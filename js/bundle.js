(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/** @jsx React.DOM */
var React=require('react');
window.React = require('react')
var rundata = require('../rundata/rundata1.js');
var google=window.google;

var App = React.createClass({displayName: 'App',


  getInitialState: function() {
        return {
            lat: 51.49119,
            lng: -0.256977,
            route: null
        };
  },

  render: function(){

    return (
        React.DOM.div(null, 
        React.DOM.div({className: "jumbotron"}, FilterableRunTable({rundata: rundata, onRunSelected: this.onRunSelected})), 
          GMap({lat: this.state.lat, lng: this.state.lng, rundata: this.state.route})
          
        ) 
      );
  },

  onRunSelected: function(index){
    this.setState({route: rundata[index]})
  }


});


var GMap = React.createClass({displayName: 'GMap',

  render: function(){
    return (
            React.DOM.div({className: "row"}, 
            React.DOM.div({className: "col-lg-12"}, 
            React.DOM.div({id: "map-canvas", ref: "Map"})
            )
            )
      );
  },

  moveMarker: function() {
    var newLatLng = new google.maps.LatLng(this.props.lat, this.props.lng);
    marker.setPosition(newLatLng)
  },

  addRoute: function(rundata){
    var route = this.props.rundata.route;

    var routeCoordinates = [];
      for (var i in route){
        routeCoordinates.push(new google.maps.LatLng(route[i].latitude,route[i].longitude));
      }


    this.runPath = new google.maps.Polyline({
      path: routeCoordinates,
      geodesic: true,
      strokeColor: '#FF0000',
      strokeOpacity: 1.0,
      strokeWeight: 2
    });

    this.runPath.setMap(this.map);
  },

  componentDidMount: function(){
    this.initialize();
    if (this.props.rundata){
      this.addRoute(this.props.rundata);
    }
  },
  //TODO if runpath exists, remove it
  clearRoute: function(){

  },

  componentDidUpdate: function(){

    this.clearRoute();

    this.map.setCenter(new google.maps.LatLng(this.props.lat, this.props.lng));

    if (this.props.rundata){
      this.addRoute(rundata);
    }
  },

  initialize: function(){
    var styles = [{"stylers":[{"saturation":-100},{"gamma":1}]},{"elementType":"labels.text.stroke","stylers":[{"visibility":"off"}]},{"featureType":"poi.business","elementType":"labels.text","stylers":[{"visibility":"off"}]},{"featureType":"poi.business","elementType":"labels.icon","stylers":[{"visibility":"off"}]},{"featureType":"poi.place_of_worship","elementType":"labels.text","stylers":[{"visibility":"off"}]},{"featureType":"poi.place_of_worship","elementType":"labels.icon","stylers":[{"visibility":"off"}]},{"featureType":"road","elementType":"geometry","stylers":[{"visibility":"simplified"}]},{"featureType":"water","stylers":[{"visibility":"on"},{"saturation":50},{"gamma":0},{"hue":"#50a5d1"}]},{"featureType":"administrative.neighborhood","elementType":"labels.text.fill","stylers":[{"color":"#333333"}]},{"featureType":"road.local","elementType":"labels.text","stylers":[{"weight":0.5},{"color":"#333333"}]},{"featureType":"transit.station","elementType":"labels.icon","stylers":[{"gamma":1},{"saturation":50}]}];

    // Create a new StyledMapType object, passing it the array of styles,
    // as well as the name to be displayed on the map type control.
    var styledMap = new google.maps.StyledMapType(styles,
      {name: "Styled Map"});

    var myLatlng = new google.maps.LatLng(this.props.lat, this.props.lng);
    var mapOptions = {
      center: myLatlng,
      zoom: 11,
          mapTypeControlOptions: {
            mapTypeIds: [google.maps.MapTypeId.ROADMAP, 'map_style']
          } 
    };
    this.map = new google.maps.Map(this.refs.Map.getDOMNode(), mapOptions);
    this.map.setTilt(45);
    this.map.setHeading(90);

    //Associate the styled map with the MapTypeId and set it to display.
    this.map.mapTypes.set('map_style', styledMap);
    this.map.setMapTypeId('map_style');

    /** this.marker = new google.maps.Marker({
      position: myLatlng,
      map: this.map,
      draggable: true
    }); **/
  }


});


var FilterableRunTable = React.createClass({displayName: 'FilterableRunTable',
    getInitialState: function() {
        return {
            filterText: ''
        };
    },

    handleUserInput: function(filterText) {
        this.setState({
            filterText: filterText
        });
    },

    render: function() {
        return (
            React.DOM.div({className: "spacer"}, 
                SearchBar({onUserInput: this.handleUserInput, filterText: this.state.filterText}), 
                RunTable({filterText: this.state.filterText, runs: this.props.rundata, onRunSelected: this.props.onRunSelected})
            )
        );
    }
});




var SearchBar = React.createClass({displayName: 'SearchBar',
    handleChange: function() {
        this.props.onUserInput(
            this.refs.filterTextInput.getDOMNode().value
        );
    },
    render: function() {
        return (
            React.DOM.div({className: "row spacer"}, 
              React.DOM.div({className: "col-lg-4 col-lg-offset-4"}, 
                React.DOM.form({onSubmit: this.handleSubmit}, 
                  React.DOM.input({ref: "filterTextInput", value: this.props.filterText, onChange: this.handleChange, type: "search", className: "form-control", placeholder: "Search for a run"})
                )
              )
            )
        );
    }
});

var RunTable = React.createClass({displayName: 'RunTable',
    render: function() {
      var props = this.props;
      var rows = props.runs
        .filter(function(run){
          return run.name.toLowerCase().indexOf(props.filterText.toLowerCase()) > -1;
        })
        .map(function(run,i){
          var handleClick = function(){
            props.onRunSelected(i);

          }
          return RunRow({key: i, run: run, handleClick: handleClick});
        });


      return (
          React.DOM.div({className: "row spacer"}, 
            React.DOM.div({className: "col-lg-4 col-lg-offset-4"}, 
              React.DOM.table({width: "100%"}, 
                  React.DOM.thead(null, 
                      React.DOM.tr(null, 
                          React.DOM.th(null, "Title"), 
                          React.DOM.th(null, "Link")
                      )
                  ), 
                  React.DOM.tbody(null, rows)
              )
            )
          )
      );
    }
});


var RunRow = React.createClass({displayName: 'RunRow',
    getInitialState: function() {
        return {
            viewed: false
        };
    },
    handleClick: function(){
      this.setState({viewed: true});
      this.props.handleClick();
    },
    render: function() {
        return (
            React.DOM.tr(null, 
                React.DOM.td(null, this.props.run.name), 
                React.DOM.td(null, React.DOM.a({onClick: this.handleClick}, "view ", this.state.viewed ? '(viewed)' : ''))
            )
        );
    }
});

React.renderComponent(App(null), document.getElementById('app'));


},{"../rundata/rundata1.js":2,"react":146}],2:[function(require,module,exports){
module.exports = [
    { name: "run1", route:[

    {
      "latitude": 51.49119,
      "longitude": -0.256977,
      "elevation": 6.4630666
    },
    {
      "latitude": 51.491196,
      "longitude": -0.256945,
      "elevation": 6.474845
    },
    {
      "latitude": 51.491203,
      "longitude": -0.256905,
      "elevation": 6.5002394
    },
    {
      "latitude": 51.491215,
      "longitude": -0.256862,
      "elevation": 6.5467935
    },
    {
      "latitude": 51.49123,
      "longitude": -0.256817,
      "elevation": 6.561067
    },
    {
      "latitude": 51.49124,
      "longitude": -0.256772,
      "elevation": 6.5607977
    },
    {
      "latitude": 51.491245,
      "longitude": -0.256729,
      "elevation": 6.5685997
    },
    {
      "latitude": 51.491245,
      "longitude": -0.256691,
      "elevation": 6.5580893
    },
    {
      "latitude": 51.49124,
      "longitude": -0.25666,
      "elevation": 6.5411267
    },
    {
      "latitude": 51.491226,
      "longitude": -0.256635,
      "elevation": 6.5240784
    },
    {
      "latitude": 51.491203,
      "longitude": -0.256614,
      "elevation": 6.501374
    },
    {
      "latitude": 51.49118,
      "longitude": -0.256596,
      "elevation": 6.4753017
    },
    {
      "latitude": 51.491158,
      "longitude": -0.256579,
      "elevation": 6.4458785
    },
    {
      "latitude": 51.49113,
      "longitude": -0.256563,
      "elevation": 6.41651
    },
    {
      "latitude": 51.491104,
      "longitude": -0.256546,
      "elevation": 6.388324
    },
    {
      "latitude": 51.49108,
      "longitude": -0.256529,
      "elevation": 6.3601913
    },
    {
      "latitude": 51.49106,
      "longitude": -0.256512,
      "elevation": 6.3247433
    },
    {
      "latitude": 51.491035,
      "longitude": -0.256496,
      "elevation": 6.308573
    },
    {
      "latitude": 51.491013,
      "longitude": -0.256481,
      "elevation": 6.283954
    },
    {
      "latitude": 51.49099,
      "longitude": -0.256468,
      "elevation": 6.259382
    },
    {
      "latitude": 51.490967,
      "longitude": -0.256457,
      "elevation": 6.2348566
    },
    {
      "latitude": 51.490948,
      "longitude": -0.256448,
      "elevation": 6.210379
    },
    {
      "latitude": 51.490925,
      "longitude": -0.256439,
      "elevation": 6.199036
    },
    {
      "latitude": 51.490902,
      "longitude": -0.256429,
      "elevation": 6.1906257
    },
    {
      "latitude": 51.49088,
      "longitude": -0.256417,
      "elevation": 6.1846337
    },
    {
      "latitude": 51.490856,
      "longitude": -0.256401,
      "elevation": 6.1838036
    },
    {
      "latitude": 51.490833,
      "longitude": -0.256381,
      "elevation": 6.1386323
    },
    {
      "latitude": 51.49081,
      "longitude": -0.256359,
      "elevation": 6.1228995
    },
    {
      "latitude": 51.49079,
      "longitude": -0.256337,
      "elevation": 6.110311
    },
    {
      "latitude": 51.490772,
      "longitude": -0.256317,
      "elevation": 6.09934
    },
    {
      "latitude": 51.490753,
      "longitude": -0.256301,
      "elevation": 6.114671
    },
    {
      "latitude": 51.490738,
      "longitude": -0.256288,
      "elevation": 6.106586
    },
    {
      "latitude": 51.490723,
      "longitude": -0.256276,
      "elevation": 6.0999765
    },
    {
      "latitude": 51.490707,
      "longitude": -0.256266,
      "elevation": 6.092985
    },
    {
      "latitude": 51.49069,
      "longitude": -0.256256,
      "elevation": 6.1140084
    },
    {
      "latitude": 51.49067,
      "longitude": -0.256248,
      "elevation": 6.177945
    },
    {
      "latitude": 51.490646,
      "longitude": -0.256242,
      "elevation": 6.2143106
    },
    {
      "latitude": 51.490623,
      "longitude": -0.256236,
      "elevation": 6.2574353
    },
    {
      "latitude": 51.4906,
      "longitude": -0.256228,
      "elevation": 6.3090506
    },
    {
      "latitude": 51.490578,
      "longitude": -0.256218,
      "elevation": 6.3703456
    },
    {
      "latitude": 51.490555,
      "longitude": -0.256206,
      "elevation": 6.441972
    },
    {
      "latitude": 51.49053,
      "longitude": -0.256192,
      "elevation": 6.619892
    },
    {
      "latitude": 51.490505,
      "longitude": -0.256178,
      "elevation": 6.7231297
    },
    {
      "latitude": 51.490482,
      "longitude": -0.256164,
      "elevation": 6.721782
    },
    {
      "latitude": 51.49046,
      "longitude": -0.256151,
      "elevation": 6.836169
    },
    {
      "latitude": 51.490437,
      "longitude": -0.256141,
      "elevation": 7.0951095
    },
    {
      "latitude": 51.490414,
      "longitude": -0.25613,
      "elevation": 7.3870044
    },
    {
      "latitude": 51.49039,
      "longitude": -0.25612,
      "elevation": 7.541765
    },
    {
      "latitude": 51.490368,
      "longitude": -0.256109,
      "elevation": 7.541725
    },
    {
      "latitude": 51.490345,
      "longitude": -0.256094,
      "elevation": 7.3868103
    },
    {
      "latitude": 51.490322,
      "longitude": -0.256077,
      "elevation": 7.3870077
    },
    {
      "latitude": 51.4903,
      "longitude": -0.256054,
      "elevation": 7.700185
    },
    {
      "latitude": 51.490276,
      "longitude": -0.25603,
      "elevation": 8.329984
    },
    {
      "latitude": 51.490253,
      "longitude": -0.256005,
      "elevation": 8.751895
    },
    {
      "latitude": 51.490234,
      "longitude": -0.255982,
      "elevation": 8.993438
    },
    {
      "latitude": 51.49021,
      "longitude": -0.255964,
      "elevation": 9.102434
    },
    {
      "latitude": 51.49019,
      "longitude": -0.255948,
      "elevation": 9.289329
    },
    {
      "latitude": 51.490166,
      "longitude": -0.255932,
      "elevation": 9.442635
    },
    {
      "latitude": 51.49014,
      "longitude": -0.255917,
      "elevation": 9.511358
    },
    {
      "latitude": 51.490112,
      "longitude": -0.255901,
      "elevation": 9.575066
    },
    {
      "latitude": 51.49008,
      "longitude": -0.255885,
      "elevation": 9.6767025
    },
    {
      "latitude": 51.49005,
      "longitude": -0.255869,
      "elevation": 9.726281
    },
    {
      "latitude": 51.490025,
      "longitude": -0.255854,
      "elevation": 9.73873
    },
    {
      "latitude": 51.489994,
      "longitude": -0.255839,
      "elevation": 9.797478
    },
    {
      "latitude": 51.489964,
      "longitude": -0.255826,
      "elevation": 9.924804
    },
    {
      "latitude": 51.489937,
      "longitude": -0.255813,
      "elevation": 10.019598
    },
    {
      "latitude": 51.48991,
      "longitude": -0.255801,
      "elevation": 10.133263
    },
    {
      "latitude": 51.48988,
      "longitude": -0.255788,
      "elevation": 10.225006
    },
    {
      "latitude": 51.489853,
      "longitude": -0.255776,
      "elevation": 10.317197
    },
    {
      "latitude": 51.489822,
      "longitude": -0.255762,
      "elevation": 10.408819
    },
    {
      "latitude": 51.489796,
      "longitude": -0.255748,
      "elevation": 10.515473
    },
    {
      "latitude": 51.489765,
      "longitude": -0.255732,
      "elevation": 10.597101
    },
    {
      "latitude": 51.48974,
      "longitude": -0.255716,
      "elevation": 10.6917
    },
    {
      "latitude": 51.489708,
      "longitude": -0.2557,
      "elevation": 10.773207
    },
    {
      "latitude": 51.489677,
      "longitude": -0.255684,
      "elevation": 10.867904
    },
    {
      "latitude": 51.48965,
      "longitude": -0.255669,
      "elevation": 10.958879
    },
    {
      "latitude": 51.489624,
      "longitude": -0.255654,
      "elevation": 11.049455
    },
    {
      "latitude": 51.489594,
      "longitude": -0.25564,
      "elevation": 11.138533
    },
    {
      "latitude": 51.48957,
      "longitude": -0.255626,
      "elevation": 11.212433
    },
    {
      "latitude": 51.489544,
      "longitude": -0.255612,
      "elevation": 11.29479
    },
    {
      "latitude": 51.48952,
      "longitude": -0.255598,
      "elevation": 11.374459
    },
    {
      "latitude": 51.4895,
      "longitude": -0.255583,
      "elevation": 11.450305
    },
    {
      "latitude": 51.48948,
      "longitude": -0.255566,
      "elevation": 11.537058
    },
    {
      "latitude": 51.48946,
      "longitude": -0.25555,
      "elevation": 11.605148
    },
    {
      "latitude": 51.489437,
      "longitude": -0.255534,
      "elevation": 11.682066
    },
    {
      "latitude": 51.489414,
      "longitude": -0.255519,
      "elevation": 11.757409
    },
    {
      "latitude": 51.48939,
      "longitude": -0.255503,
      "elevation": 11.839321
    },
    {
      "latitude": 51.48937,
      "longitude": -0.255481,
      "elevation": 11.9146385
    },
    {
      "latitude": 51.489353,
      "longitude": -0.255453,
      "elevation": 11.9906845
    },
    {
      "latitude": 51.48934,
      "longitude": -0.25542,
      "elevation": 12.060133
    },
    {
      "latitude": 51.48933,
      "longitude": -0.255383,
      "elevation": 12.124784
    },
    {
      "latitude": 51.489326,
      "longitude": -0.255346,
      "elevation": 12.176092
    },
    {
      "latitude": 51.489323,
      "longitude": -0.255311,
      "elevation": 12.221641
    },
    {
      "latitude": 51.489326,
      "longitude": -0.255282,
      "elevation": 12.235589
    },
    {
      "latitude": 51.489338,
      "longitude": -0.255261,
      "elevation": 12.232369
    },
    {
      "latitude": 51.48935,
      "longitude": -0.255242,
      "elevation": 12.209799
    },
    {
      "latitude": 51.48936,
      "longitude": -0.255218,
      "elevation": 12.209799
    },
    {
      "latitude": 51.489372,
      "longitude": -0.255183,
      "elevation": 12.2266865
    },
    {
      "latitude": 51.48938,
      "longitude": -0.255141,
      "elevation": 12.265431
    },
    {
      "latitude": 51.489388,
      "longitude": -0.255098,
      "elevation": 12.299863
    },
    {
      "latitude": 51.489403,
      "longitude": -0.255058,
      "elevation": 12.318126
    },
    {
      "latitude": 51.489414,
      "longitude": -0.25502,
      "elevation": 12.329532
    },
    {
      "latitude": 51.48943,
      "longitude": -0.254982,
      "elevation": 12.31354
    },
    {
      "latitude": 51.48944,
      "longitude": -0.254942,
      "elevation": 12.271662
    },
    {
      "latitude": 51.489452,
      "longitude": -0.254899,
      "elevation": 12.222815
    },
    {
      "latitude": 51.489464,
      "longitude": -0.254853,
      "elevation": 12.165578
    },
    {
      "latitude": 51.48948,
      "longitude": -0.254809,
      "elevation": 12.092262
    },
    {
      "latitude": 51.48949,
      "longitude": -0.254773,
      "elevation": 12.039901
    },
    {
      "latitude": 51.489494,
      "longitude": -0.254744,
      "elevation": 12.003917
    },
    {
      "latitude": 51.489487,
      "longitude": -0.254717,
      "elevation": 12.0033865
    },
    {
      "latitude": 51.48947,
      "longitude": -0.254691,
      "elevation": 12.016106
    },
    {
      "latitude": 51.48945,
      "longitude": -0.254665,
      "elevation": 12.046459
    },
    {
      "latitude": 51.48942,
      "longitude": -0.254642,
      "elevation": 12.080521
    },
    {
      "latitude": 51.48939,
      "longitude": -0.254623,
      "elevation": 12.116194
    },
    {
      "latitude": 51.489365,
      "longitude": -0.254606,
      "elevation": 12.147111
    },
    {
      "latitude": 51.489334,
      "longitude": -0.25459,
      "elevation": 12.187049
    },
    {
      "latitude": 51.489307,
      "longitude": -0.254572,
      "elevation": 12.2192135
    },
    {
      "latitude": 51.489277,
      "longitude": -0.254552,
      "elevation": 12.2496195
    },
    {
      "latitude": 51.48925,
      "longitude": -0.254528,
      "elevation": 12.276747
    },
    {
      "latitude": 51.48922,
      "longitude": -0.254498,
      "elevation": 12.294344
    },
    {
      "latitude": 51.48919,
      "longitude": -0.254467,
      "elevation": 12.31055
    },
    {
      "latitude": 51.48916,
      "longitude": -0.254439,
      "elevation": 12.301326
    },
    {
      "latitude": 51.48913,
      "longitude": -0.254418,
      "elevation": 12.228282
    },
    {
      "latitude": 51.489098,
      "longitude": -0.254399,
      "elevation": 12.159908
    },
    {
      "latitude": 51.489067,
      "longitude": -0.254379,
      "elevation": 12.080852
    },
    {
      "latitude": 51.489037,
      "longitude": -0.254354,
      "elevation": 12.005263
    },
    {
      "latitude": 51.489002,
      "longitude": -0.254327,
      "elevation": 11.92063
    },
    {
      "latitude": 51.488976,
      "longitude": -0.2543,
      "elevation": 11.849069
    },
    {
      "latitude": 51.488945,
      "longitude": -0.254276,
      "elevation": 11.726946
    },
    {
      "latitude": 51.48892,
      "longitude": -0.254255,
      "elevation": 11.011774
    },
    {
      "latitude": 51.48889,
      "longitude": -0.254235,
      "elevation": 10.247441
    },
    {
      "latitude": 51.488865,
      "longitude": -0.254214,
      "elevation": 9.460787
    },
    {
      "latitude": 51.488834,
      "longitude": -0.254194,
      "elevation": 8.728108
    },
    {
      "latitude": 51.488808,
      "longitude": -0.254173,
      "elevation": 8.476272
    },
    {
      "latitude": 51.48878,
      "longitude": -0.254151,
      "elevation": 8.355495
    },
    {
      "latitude": 51.488754,
      "longitude": -0.25413,
      "elevation": 8.243446
    },
    {
      "latitude": 51.488728,
      "longitude": -0.254108,
      "elevation": 8.335114
    },
    {
      "latitude": 51.4887,
      "longitude": -0.254086,
      "elevation": 8.4416485
    },
    {
      "latitude": 51.48867,
      "longitude": -0.254063,
      "elevation": 8.56147
    },
    {
      "latitude": 51.488644,
      "longitude": -0.254041,
      "elevation": 8.693435
    },
    {
      "latitude": 51.488617,
      "longitude": -0.254018,
      "elevation": 8.835459
    },
    {
      "latitude": 51.488586,
      "longitude": -0.253996,
      "elevation": 8.690199
    },
    {
      "latitude": 51.48856,
      "longitude": -0.253974,
      "elevation": 8.6893425
    },
    {
      "latitude": 51.488533,
      "longitude": -0.253952,
      "elevation": 8.55165
    },
    {
      "latitude": 51.488506,
      "longitude": -0.253931,
      "elevation": 8.833623
    },
    {
      "latitude": 51.488476,
      "longitude": -0.25391,
      "elevation": 8.985026
    },
    {
      "latitude": 51.48845,
      "longitude": -0.25389,
      "elevation": 9.14112
    },
    {
      "latitude": 51.48842,
      "longitude": -0.253871,
      "elevation": 9.459965
    },
    {
      "latitude": 51.48839,
      "longitude": -0.253854,
      "elevation": 9.619023
    },
    {
      "latitude": 51.48836,
      "longitude": -0.253837,
      "elevation": 9.927443
    },
    {
      "latitude": 51.488335,
      "longitude": -0.25382,
      "elevation": 9.928339
    },
    {
      "latitude": 51.488304,
      "longitude": -0.253803,
      "elevation": 9.926491
    },
    {
      "latitude": 51.488277,
      "longitude": -0.253786,
      "elevation": 9.773936
    },
    {
      "latitude": 51.488255,
      "longitude": -0.253767,
      "elevation": 9.618126
    },
    {
      "latitude": 51.488228,
      "longitude": -0.253747,
      "elevation": 9.617582
    },
    {
      "latitude": 51.488197,
      "longitude": -0.253727,
      "elevation": 9.459526
    },
    {
      "latitude": 51.48817,
      "longitude": -0.253707,
      "elevation": 9.459204
    },
    {
      "latitude": 51.48814,
      "longitude": -0.25369,
      "elevation": 9.458722
    },
    {
      "latitude": 51.488113,
      "longitude": -0.253674,
      "elevation": 9.458073
    },
    {
      "latitude": 51.488094,
      "longitude": -0.253662,
      "elevation": 9.299687
    },
    {
      "latitude": 51.488075,
      "longitude": -0.25365,
      "elevation": 9.456643
    },
    {
      "latitude": 51.488052,
      "longitude": -0.253637,
      "elevation": 9.607486
    },
    {
      "latitude": 51.488026,
      "longitude": -0.25362,
      "elevation": 9.748393
    },
    {
      "latitude": 51.487995,
      "longitude": -0.253602,
      "elevation": 9.876112
    },
    {
      "latitude": 51.48797,
      "longitude": -0.253584,
      "elevation": 10.10079
    },
    {
      "latitude": 51.48794,
      "longitude": -0.253569,
      "elevation": 10.185733
    },
    {
      "latitude": 51.48791,
      "longitude": -0.253552,
      "elevation": 10.671243
    },
    {
      "latitude": 51.487885,
      "longitude": -0.253531,
      "elevation": 10.751292
    },
    {
      "latitude": 51.487858,
      "longitude": -0.253507,
      "elevation": 10.748286
    },
    {
      "latitude": 51.48783,
      "longitude": -0.253481,
      "elevation": 10.718878
    },
    {
      "latitude": 51.48781,
      "longitude": -0.253455,
      "elevation": 10.681403
    },
    {
      "latitude": 51.48778,
      "longitude": -0.25343,
      "elevation": 10.639113
    },
    {
      "latitude": 51.48776,
      "longitude": -0.253405,
      "elevation": 10.5898695
    },
    {
      "latitude": 51.48773,
      "longitude": -0.253384,
      "elevation": 10.532563
    },
    {
      "latitude": 51.487698,
      "longitude": -0.253365,
      "elevation": 10.465811
    },
    {
      "latitude": 51.487667,
      "longitude": -0.253345,
      "elevation": 10.395275
    },
    {
      "latitude": 51.487637,
      "longitude": -0.25332,
      "elevation": 10.326086
    },
    {
      "latitude": 51.48761,
      "longitude": -0.253287,
      "elevation": 10.261306
    },
    {
      "latitude": 51.487583,
      "longitude": -0.253249,
      "elevation": 10.203723
    },
    {
      "latitude": 51.48756,
      "longitude": -0.253212,
      "elevation": 10.148576
    },
    {
      "latitude": 51.487537,
      "longitude": -0.253181,
      "elevation": 10.093446
    },
    {
      "latitude": 51.48752,
      "longitude": -0.253151,
      "elevation": 10.043076
    },
    {
      "latitude": 51.4875,
      "longitude": -0.253119,
      "elevation": 10.00228
    },
    {
      "latitude": 51.48749,
      "longitude": -0.253083,
      "elevation": 10.052643
    },
    {
      "latitude": 51.48748,
      "longitude": -0.253041,
      "elevation": 10.092714
    },
    {
      "latitude": 51.487473,
      "longitude": -0.252995,
      "elevation": 10.13553
    },
    {
      "latitude": 51.48746,
      "longitude": -0.252948,
      "elevation": 10.189564
    },
    {
      "latitude": 51.487446,
      "longitude": -0.252904,
      "elevation": 10.264394
    },
    {
      "latitude": 51.487423,
      "longitude": -0.252869,
      "elevation": 10.349477
    },
    {
      "latitude": 51.4874,
      "longitude": -0.25285,
      "elevation": 10.454419
    },
    {
      "latitude": 51.487373,
      "longitude": -0.252845,
      "elevation": 10.568915
    },
    {
      "latitude": 51.487347,
      "longitude": -0.252852,
      "elevation": 10.694692
    },
    {
      "latitude": 51.48732,
      "longitude": -0.252869,
      "elevation": 10.826481
    },
    {
      "latitude": 51.487293,
      "longitude": -0.252894,
      "elevation": 10.960684
    },
    {
      "latitude": 51.48727,
      "longitude": -0.252925,
      "elevation": 11.086467
    },
    {
      "latitude": 51.48725,
      "longitude": -0.25296,
      "elevation": 11.19546
    },
    {
      "latitude": 51.487236,
      "longitude": -0.252996,
      "elevation": 11.286256
    },
    {
      "latitude": 51.487225,
      "longitude": -0.253033,
      "elevation": 11.338706
    },
    {
      "latitude": 51.48673,
      "longitude": -0.252477,
      "elevation": 12.404476
    },
    {
      "latitude": 51.486763,
      "longitude": -0.252514,
      "elevation": 12.346264
    },
    {
      "latitude": 51.486774,
      "longitude": -0.252528,
      "elevation": 12.311044
    },
    {
      "latitude": 51.48677,
      "longitude": -0.252525,
      "elevation": 12.289623
    },
    {
      "latitude": 51.48676,
      "longitude": -0.25251,
      "elevation": 12.237182
    },
    {
      "latitude": 51.486748,
      "longitude": -0.252489,
      "elevation": 12.167892
    },
    {
      "latitude": 51.48674,
      "longitude": -0.252465,
      "elevation": 12.077525
    },
    {
      "latitude": 51.486732,
      "longitude": -0.252433,
      "elevation": 12.029437
    },
    {
      "latitude": 51.486717,
      "longitude": -0.252386,
      "elevation": 11.985312
    },
    {
      "latitude": 51.486683,
      "longitude": -0.25232,
      "elevation": 11.949813
    },
    {
      "latitude": 51.486645,
      "longitude": -0.252244,
      "elevation": 11.875847
    },
    {
      "latitude": 51.48661,
      "longitude": -0.25217,
      "elevation": 11.776158
    },
    {
      "latitude": 51.486595,
      "longitude": -0.252109,
      "elevation": 11.687979
    },
    {
      "latitude": 51.486603,
      "longitude": -0.252073,
      "elevation": 11.624067
    },
    {
      "latitude": 51.486637,
      "longitude": -0.252064,
      "elevation": 11.692509
    },
    {
      "latitude": 51.486652,
      "longitude": -0.252049,
      "elevation": 11.780513
    },
    {
      "latitude": 51.486664,
      "longitude": -0.252042,
      "elevation": 11.760491
    },
    {
      "latitude": 51.48667,
      "longitude": -0.252028,
      "elevation": 11.519425
    },
    {
      "latitude": 51.48668,
      "longitude": -0.252004,
      "elevation": 11.418841
    },
    {
      "latitude": 51.486683,
      "longitude": -0.251972,
      "elevation": 11.016314
    },
    {
      "latitude": 51.48669,
      "longitude": -0.251933,
      "elevation": 10.78138
    },
    {
      "latitude": 51.486694,
      "longitude": -0.251888,
      "elevation": 10.91121
    },
    {
      "latitude": 51.486702,
      "longitude": -0.251839,
      "elevation": 10.84598
    },
    {
      "latitude": 51.486706,
      "longitude": -0.251788,
      "elevation": 10.706003
    },
    {
      "latitude": 51.486706,
      "longitude": -0.251735,
      "elevation": 10.48645
    },
    {
      "latitude": 51.486706,
      "longitude": -0.251682,
      "elevation": 10.345154
    },
    {
      "latitude": 51.4867,
      "longitude": -0.251631,
      "elevation": 9.92483
    },
    {
      "latitude": 51.486694,
      "longitude": -0.251581,
      "elevation": 9.804245
    },
    {
      "latitude": 51.486683,
      "longitude": -0.251533,
      "elevation": 9.812977
    },
    {
      "latitude": 51.486668,
      "longitude": -0.251486,
      "elevation": 9.517634
    },
    {
      "latitude": 51.486652,
      "longitude": -0.251441,
      "elevation": 9.518823
    },
    {
      "latitude": 51.486637,
      "longitude": -0.251398,
      "elevation": 9.519471
    },
    {
      "latitude": 51.48662,
      "longitude": -0.251355,
      "elevation": 9.360002
    },
    {
      "latitude": 51.486603,
      "longitude": -0.251314,
      "elevation": 9.360035
    },
    {
      "latitude": 51.486588,
      "longitude": -0.251274,
      "elevation": 9.201754
    },
    {
      "latitude": 51.48657,
      "longitude": -0.251234,
      "elevation": 9.048713
    },
    {
      "latitude": 51.486546,
      "longitude": -0.251194,
      "elevation": 8.903769
    },
    {
      "latitude": 51.486526,
      "longitude": -0.251153,
      "elevation": 9.052588
    },
    {
      "latitude": 51.486507,
      "longitude": -0.251111,
      "elevation": 9.205379
    },
    {
      "latitude": 51.48649,
      "longitude": -0.251071,
      "elevation": 9.206183
    },
    {
      "latitude": 51.486465,
      "longitude": -0.251034,
      "elevation": 9.679993
    },
    {
      "latitude": 51.486446,
      "longitude": -0.251003,
      "elevation": 9.679995
    },
    {
      "latitude": 51.486427,
      "longitude": -0.250974,
      "elevation": 9.839335
    },
    {
      "latitude": 51.48641,
      "longitude": -0.250948,
      "elevation": 9.679994
    },
    {
      "latitude": 51.48639,
      "longitude": -0.250921,
      "elevation": 9.679991
    },
    {
      "latitude": 51.48637,
      "longitude": -0.250893,
      "elevation": 9.679986
    },
    {
      "latitude": 51.48635,
      "longitude": -0.250864,
      "elevation": 9.839006
    },
    {
      "latitude": 51.486332,
      "longitude": -0.250832,
      "elevation": 9.838819
    },
    {
      "latitude": 51.486313,
      "longitude": -0.250797,
      "elevation": 9.9940815
    },
    {
      "latitude": 51.486298,
      "longitude": -0.250761,
      "elevation": 9.993386
    },
    {
      "latitude": 51.486282,
      "longitude": -0.250724,
      "elevation": 10.141763
    },
    {
      "latitude": 51.486267,
      "longitude": -0.250685,
      "elevation": 10.414002
    },
    {
      "latitude": 51.48625,
      "longitude": -0.250644,
      "elevation": 10.409151
    },
    {
      "latitude": 51.486237,
      "longitude": -0.250603,
      "elevation": 10.524174
    },
    {
      "latitude": 51.48622,
      "longitude": -0.25056,
      "elevation": 10.515352
    },
    {
      "latitude": 51.486206,
      "longitude": -0.250516,
      "elevation": 10.388172
    },
    {
      "latitude": 51.48619,
      "longitude": -0.250471,
      "elevation": 10.378485
    },
    {
      "latitude": 51.486176,
      "longitude": -0.250427,
      "elevation": 10.367227
    },
    {
      "latitude": 51.48616,
      "longitude": -0.250383,
      "elevation": 10.23489
    },
    {
      "latitude": 51.48614,
      "longitude": -0.250341,
      "elevation": 10.096376
    },
    {
      "latitude": 51.486126,
      "longitude": -0.250302,
      "elevation": 9.953659
    },
    {
      "latitude": 51.486103,
      "longitude": -0.250267,
      "elevation": 9.806285
    },
    {
      "latitude": 51.48608,
      "longitude": -0.250235,
      "elevation": 9.508973
    },
    {
      "latitude": 51.486057,
      "longitude": -0.250207,
      "elevation": 9.353188
    },
    {
      "latitude": 51.486034,
      "longitude": -0.25018,
      "elevation": 9.195981
    },
    {
      "latitude": 51.48601,
      "longitude": -0.250151,
      "elevation": 9.192394
    },
    {
      "latitude": 51.485992,
      "longitude": -0.250119,
      "elevation": 9.1874485
    },
    {
      "latitude": 51.485977,
      "longitude": -0.250081,
      "elevation": 9.181255
    },
    {
      "latitude": 51.48597,
      "longitude": -0.250037,
      "elevation": 9.174777
    },
    {
      "latitude": 51.485962,
      "longitude": -0.249989,
      "elevation": 9.172778
    },
    {
      "latitude": 51.485962,
      "longitude": -0.249941,
      "elevation": 9.467196
    },
    {
      "latitude": 51.48596,
      "longitude": -0.249895,
      "elevation": 9.235279
    },
    {
      "latitude": 51.485966,
      "longitude": -0.249851,
      "elevation": 8.235279
    },
    {
      "latitude": 51.485973,
      "longitude": -0.24981,
      "elevation": 7.7275596
    },
    {
      "latitude": 51.485992,
      "longitude": -0.249769,
      "elevation": 7.8930893
    },
    {
      "latitude": 51.486015,
      "longitude": -0.249732,
      "elevation": 7.900078
    },
    {
      "latitude": 51.48604,
      "longitude": -0.2497,
      "elevation": 8.051693
    },
    {
      "latitude": 51.486065,
      "longitude": -0.249673,
      "elevation": 8.013908
    },
    {
      "latitude": 51.486084,
      "longitude": -0.249649,
      "elevation": 8.089191
    },
    {
      "latitude": 51.486107,
      "longitude": -0.249624,
      "elevation": 8.12766
    },
    {
      "latitude": 51.486126,
      "longitude": -0.249595,
      "elevation": 8.212246
    },
    {
      "latitude": 51.48615,
      "longitude": -0.249562,
      "elevation": 8.276465
    },
    {
      "latitude": 51.486168,
      "longitude": -0.249527,
      "elevation": 8.3710985
    },
    {
      "latitude": 51.48619,
      "longitude": -0.249491,
      "elevation": 8.428117
    },
    {
      "latitude": 51.48621,
      "longitude": -0.249455,
      "elevation": 8.520597
    },
    {
      "latitude": 51.486233,
      "longitude": -0.24942,
      "elevation": 8.605901
    },
    {
      "latitude": 51.486256,
      "longitude": -0.249387,
      "elevation": 8.673372
    },
    {
      "latitude": 51.48628,
      "longitude": -0.249355,
      "elevation": 8.728265
    },
    {
      "latitude": 51.486305,
      "longitude": -0.249324,
      "elevation": 8.787694
    },
    {
      "latitude": 51.48633,
      "longitude": -0.249293,
      "elevation": 8.852335
    },
    {
      "latitude": 51.486347,
      "longitude": -0.249259,
      "elevation": 8.908485
    },
    {
      "latitude": 51.486366,
      "longitude": -0.249224,
      "elevation": 8.950363
    },
    {
      "latitude": 51.486385,
      "longitude": -0.249186,
      "elevation": 8.99633
    },
    {
      "latitude": 51.486404,
      "longitude": -0.249148,
      "elevation": 9.043463
    },
    {
      "latitude": 51.48643,
      "longitude": -0.249114,
      "elevation": 9.071859
    },
    {
      "latitude": 51.486454,
      "longitude": -0.249079,
      "elevation": 9.098145
    },
    {
      "latitude": 51.486473,
      "longitude": -0.249043,
      "elevation": 9.11792
    },
    {
      "latitude": 51.486492,
      "longitude": -0.249008,
      "elevation": 9.132292
    },
    {
      "latitude": 51.48651,
      "longitude": -0.248975,
      "elevation": 9.143499
    },
    {
      "latitude": 51.48653,
      "longitude": -0.248945,
      "elevation": 9.14141
    },
    {
      "latitude": 51.486553,
      "longitude": -0.248917,
      "elevation": 9.129567
    },
    {
      "latitude": 51.48658,
      "longitude": -0.248891,
      "elevation": 9.11528
    },
    {
      "latitude": 51.486603,
      "longitude": -0.248865,
      "elevation": 9.094722
    },
    {
      "latitude": 51.48663,
      "longitude": -0.248839,
      "elevation": 9.06535
    },
    {
      "latitude": 51.486656,
      "longitude": -0.248813,
      "elevation": 9.028724
    },
    {
      "latitude": 51.486683,
      "longitude": -0.248785,
      "elevation": 8.988511
    },
    {
      "latitude": 51.486706,
      "longitude": -0.248754,
      "elevation": 8.948562
    },
    {
      "latitude": 51.48673,
      "longitude": -0.248718,
      "elevation": 8.906766
    },
    {
      "latitude": 51.486748,
      "longitude": -0.24868,
      "elevation": 8.862908
    },
    {
      "latitude": 51.48677,
      "longitude": -0.248642,
      "elevation": 8.818238
    },
    {
      "latitude": 51.486794,
      "longitude": -0.248606,
      "elevation": 8.773423
    },
    {
      "latitude": 51.486816,
      "longitude": -0.248572,
      "elevation": 8.715467
    },
    {
      "latitude": 51.48684,
      "longitude": -0.248539,
      "elevation": 8.65014
    },
    {
      "latitude": 51.486862,
      "longitude": -0.248505,
      "elevation": 8.5930195
    },
    {
      "latitude": 51.486885,
      "longitude": -0.24847,
      "elevation": 8.533144
    },
    {
      "latitude": 51.486904,
      "longitude": -0.248434,
      "elevation": 8.475323
    },
    {
      "latitude": 51.486927,
      "longitude": -0.248397,
      "elevation": 8.417314
    },
    {
      "latitude": 51.486946,
      "longitude": -0.248359,
      "elevation": 8.356868
    },
    {
      "latitude": 51.486965,
      "longitude": -0.24832,
      "elevation": 8.283845
    },
    {
      "latitude": 51.486984,
      "longitude": -0.248281,
      "elevation": 8.194308
    },
    {
      "latitude": 51.487007,
      "longitude": -0.248244,
      "elevation": 8.09479
    },
    {
      "latitude": 51.48703,
      "longitude": -0.24821,
      "elevation": 7.9999886
    },
    {
      "latitude": 51.487053,
      "longitude": -0.248179,
      "elevation": 7.9064436
    },
    {
      "latitude": 51.487076,
      "longitude": -0.24815,
      "elevation": 7.812973
    },
    {
      "latitude": 51.487103,
      "longitude": -0.248125,
      "elevation": 7.728374
    },
    {
      "latitude": 51.48713,
      "longitude": -0.2481,
      "elevation": 7.6344676
    },
    {
      "latitude": 51.487156,
      "longitude": -0.248075,
      "elevation": 7.5353174
    },
    {
      "latitude": 51.487183,
      "longitude": -0.248049,
      "elevation": 7.4434085
    },
    {
      "latitude": 51.487206,
      "longitude": -0.248021,
      "elevation": 7.354014
    },
    {
      "latitude": 51.48723,
      "longitude": -0.24799,
      "elevation": 7.2550344
    },
    {
      "latitude": 51.48725,
      "longitude": -0.247958,
      "elevation": 7.1662107
    },
    {
      "latitude": 51.487274,
      "longitude": -0.247924,
      "elevation": 7.074699
    },
    {
      "latitude": 51.487297,
      "longitude": -0.247891,
      "elevation": 6.9822206
    },
    {
      "latitude": 51.48732,
      "longitude": -0.247857,
      "elevation": 6.9017186
    },
    {
      "latitude": 51.487343,
      "longitude": -0.247825,
      "elevation": 6.805641
    },
    {
      "latitude": 51.487366,
      "longitude": -0.247793,
      "elevation": 6.704712
    },
    {
      "latitude": 51.48739,
      "longitude": -0.247762,
      "elevation": 6.618281
    },
    {
      "latitude": 51.48741,
      "longitude": -0.24773,
      "elevation": 6.53537
    },
    {
      "latitude": 51.487434,
      "longitude": -0.247698,
      "elevation": 6.4554596
    },
    {
      "latitude": 51.487457,
      "longitude": -0.247666,
      "elevation": 6.367826
    },
    {
      "latitude": 51.48748,
      "longitude": -0.247632,
      "elevation": 6.2807574
    },
    {
      "latitude": 51.487503,
      "longitude": -0.247598,
      "elevation": 6.214386
    },
    {
      "latitude": 51.487522,
      "longitude": -0.247563,
      "elevation": 6.1985216
    },
    {
      "latitude": 51.487545,
      "longitude": -0.247529,
      "elevation": 6.1846685
    },
    {
      "latitude": 51.487568,
      "longitude": -0.247496,
      "elevation": 6.1864357
    },
    {
      "latitude": 51.487587,
      "longitude": -0.247465,
      "elevation": 6.1499786
    },
    {
      "latitude": 51.48761,
      "longitude": -0.247434,
      "elevation": 6.137944
    },
    {
      "latitude": 51.487625,
      "longitude": -0.247403,
      "elevation": 6.084877
    },
    {
      "latitude": 51.487648,
      "longitude": -0.247369,
      "elevation": 6.074506
    },
    {
      "latitude": 51.487663,
      "longitude": -0.247331,
      "elevation": 6.063734
    },
    {
      "latitude": 51.487682,
      "longitude": -0.24729,
      "elevation": 5.9976745
    },
    {
      "latitude": 51.4877,
      "longitude": -0.247249,
      "elevation": 5.9625497
    },
    {
      "latitude": 51.48772,
      "longitude": -0.247211,
      "elevation": 5.969046
    },
    {
      "latitude": 51.48774,
      "longitude": -0.247175,
      "elevation": 5.8952804
    },
    {
      "latitude": 51.487762,
      "longitude": -0.247142,
      "elevation": 5.9122453
    },
    {
      "latitude": 51.48778,
      "longitude": -0.247108,
      "elevation": 5.9064
    },
    {
      "latitude": 51.487804,
      "longitude": -0.247075,
      "elevation": 5.905177
    },
    {
      "latitude": 51.487823,
      "longitude": -0.247041,
      "elevation": 5.9372444
    },
    {
      "latitude": 51.487846,
      "longitude": -0.247005,
      "elevation": 5.9750085
    },
    {
      "latitude": 51.487865,
      "longitude": -0.246967,
      "elevation": 6.0172124
    },
    {
      "latitude": 51.487885,
      "longitude": -0.246929,
      "elevation": 5.913576
    },
    {
      "latitude": 51.487904,
      "longitude": -0.246891,
      "elevation": 5.9217954
    },
    {
      "latitude": 51.487926,
      "longitude": -0.246854,
      "elevation": 5.9110293
    },
    {
      "latitude": 51.487946,
      "longitude": -0.246818,
      "elevation": 5.9095936
    },
    {
      "latitude": 51.48797,
      "longitude": -0.246784,
      "elevation": 5.9578123
    },
    {
      "latitude": 51.48799,
      "longitude": -0.24675,
      "elevation": 6.0145254
    },
    {
      "latitude": 51.48801,
      "longitude": -0.246716,
      "elevation": 6.050274
    },
    {
      "latitude": 51.488033,
      "longitude": -0.246679,
      "elevation": 6.0907803
    },
    {
      "latitude": 51.488056,
      "longitude": -0.24664,
      "elevation": 6.143753
    },
    {
      "latitude": 51.488075,
      "longitude": -0.246598,
      "elevation": 6.1648035
    },
    {
      "latitude": 51.488094,
      "longitude": -0.246552,
      "elevation": 6.2035704
    },
    {
      "latitude": 51.488113,
      "longitude": -0.246506,
      "elevation": 6.2113924
    },
    {
      "latitude": 51.488132,
      "longitude": -0.246463,
      "elevation": 6.253529
    },
    {
      "latitude": 51.48815,
      "longitude": -0.246425,
      "elevation": 6.3097553
    },
    {
      "latitude": 51.48817,
      "longitude": -0.24639,
      "elevation": 6.372318
    },
    {
      "latitude": 51.48819,
      "longitude": -0.246355,
      "elevation": 6.389139
    },
    {
      "latitude": 51.48821,
      "longitude": -0.246316,
      "elevation": 6.399823
    },
    {
      "latitude": 51.48822,
      "longitude": -0.246276,
      "elevation": 6.3661795
    },
    {
      "latitude": 51.48824,
      "longitude": -0.246236,
      "elevation": 6.312429
    },
    {
      "latitude": 51.488255,
      "longitude": -0.246198,
      "elevation": 6.35349
    },
    {
      "latitude": 51.488274,
      "longitude": -0.246161,
      "elevation": 6.4018626
    },
    {
      "latitude": 51.488293,
      "longitude": -0.246125,
      "elevation": 6.363809
    },
    {
      "latitude": 51.48831,
      "longitude": -0.246088,
      "elevation": 6.3810563
    },
    {
      "latitude": 51.488327,
      "longitude": -0.246051,
      "elevation": 6.4212837
    },
    {
      "latitude": 51.488342,
      "longitude": -0.246014,
      "elevation": 6.442097
    },
    {
      "latitude": 51.48836,
      "longitude": -0.245976,
      "elevation": 6.4197865
    },
    {
      "latitude": 51.48838,
      "longitude": -0.245938,
      "elevation": 6.3999095
    },
    {
      "latitude": 51.488396,
      "longitude": -0.245899,
      "elevation": 6.3799624
    },
    {
      "latitude": 51.488415,
      "longitude": -0.245861,
      "elevation": 6.330167
    },
    {
      "latitude": 51.488434,
      "longitude": -0.245823,
      "elevation": 6.3070135
    },
    {
      "latitude": 51.488453,
      "longitude": -0.245787,
      "elevation": 6.272656
    },
    {
      "latitude": 51.488472,
      "longitude": -0.245753,
      "elevation": 6.2828035
    },
    {
      "latitude": 51.488495,
      "longitude": -0.245722,
      "elevation": 6.2685924
    },
    {
      "latitude": 51.488518,
      "longitude": -0.245695,
      "elevation": 6.2650495
    },
    {
      "latitude": 51.48854,
      "longitude": -0.245672,
      "elevation": 6.315268
    },
    {
      "latitude": 51.488567,
      "longitude": -0.245648,
      "elevation": 6.2820168
    },
    {
      "latitude": 51.48859,
      "longitude": -0.245617,
      "elevation": 6.286444
    },
    {
      "latitude": 51.48861,
      "longitude": -0.245576,
      "elevation": 6.3696504
    },
    {
      "latitude": 51.488625,
      "longitude": -0.24553,
      "elevation": 6.480711
    },
    {
      "latitude": 51.488644,
      "longitude": -0.245485,
      "elevation": 6.479304
    },
    {
      "latitude": 51.488663,
      "longitude": -0.245441,
      "elevation": 6.6330323
    },
    {
      "latitude": 51.488678,
      "longitude": -0.245399,
      "elevation": 6.63833
    },
    {
      "latitude": 51.488697,
      "longitude": -0.245357,
      "elevation": 6.733855
    },
    {
      "latitude": 51.488712,
      "longitude": -0.245314,
      "elevation": 6.8377323
    },
    {
      "latitude": 51.488728,
      "longitude": -0.245272,
      "elevation": 6.8447385
    },
    {
      "latitude": 51.48874,
      "longitude": -0.245229,
      "elevation": 6.8521194
    },
    {
      "latitude": 51.48875,
      "longitude": -0.245185,
      "elevation": 6.9629393
    },
    {
      "latitude": 51.488766,
      "longitude": -0.245143,
      "elevation": 6.974423
    },
    {
      "latitude": 51.48878,
      "longitude": -0.245101,
      "elevation": 6.8946877
    },
    {
      "latitude": 51.4888,
      "longitude": -0.245059,
      "elevation": 7.0131364
    },
    {
      "latitude": 51.488815,
      "longitude": -0.245019,
      "elevation": 7.038991
    },
    {
      "latitude": 51.488834,
      "longitude": -0.244978,
      "elevation": 6.965631
    },
    {
      "latitude": 51.48885,
      "longitude": -0.244939,
      "elevation": 7.05519
    },
    {
      "latitude": 51.48887,
      "longitude": -0.2449,
      "elevation": 7.1530046
    },
    {
      "latitude": 51.488884,
      "longitude": -0.244862,
      "elevation": 7.05808
    },
    {
      "latitude": 51.488903,
      "longitude": -0.244826,
      "elevation": 7.064425
    },
    {
      "latitude": 51.488922,
      "longitude": -0.244791,
      "elevation": 7.1669946
    },
    {
      "latitude": 51.488945,
      "longitude": -0.244757,
      "elevation": 7.1796627
    },
    {
      "latitude": 51.488968,
      "longitude": -0.244722,
      "elevation": 7.100499
    },
    {
      "latitude": 51.48899,
      "longitude": -0.244683,
      "elevation": 7.1962824
    },
    {
      "latitude": 51.48901,
      "longitude": -0.244636,
      "elevation": 7.400432
    },
    {
      "latitude": 51.48903,
      "longitude": -0.244585,
      "elevation": 7.391868
    },
    {
      "latitude": 51.489048,
      "longitude": -0.244535,
      "elevation": 7.5062966
    },
    {
      "latitude": 51.489067,
      "longitude": -0.244489,
      "elevation": 7.3751154
    },
    {
      "latitude": 51.489082,
      "longitude": -0.244448,
      "elevation": 7.3692627
    },
    {
      "latitude": 51.4891,
      "longitude": -0.244408,
      "elevation": 7.4927077
    },
    {
      "latitude": 51.48912,
      "longitude": -0.24437,
      "elevation": 7.6275263
    },
    {
      "latitude": 51.489136,
      "longitude": -0.244332,
      "elevation": 7.4866033
    },
    {
      "latitude": 51.489155,
      "longitude": -0.244292,
      "elevation": 7.227409
    },
    {
      "latitude": 51.489174,
      "longitude": -0.24425,
      "elevation": 7.2121687
    },
    {
      "latitude": 51.489193,
      "longitude": -0.244208,
      "elevation": 7.184718
    },
    {
      "latitude": 51.489216,
      "longitude": -0.24417,
      "elevation": 7.450745
    },
    {
      "latitude": 51.489243,
      "longitude": -0.244136,
      "elevation": 7.2946396
    },
    {
      "latitude": 51.489265,
      "longitude": -0.244104,
      "elevation": 7.2888083
    },
    {
      "latitude": 51.48929,
      "longitude": -0.244069,
      "elevation": 6.988625
    },
    {
      "latitude": 51.489307,
      "longitude": -0.24403,
      "elevation": 6.7049665
    },
    {
      "latitude": 51.489326,
      "longitude": -0.24399,
      "elevation": 6.8279295
    },
    {
      "latitude": 51.48935,
      "longitude": -0.24395,
      "elevation": 7.1225095
    },
    {
      "latitude": 51.48937,
      "longitude": -0.243909,
      "elevation": 7.2800493
    },
    {
      "latitude": 51.48939,
      "longitude": -0.243869,
      "elevation": 7.439795
    },
    {
      "latitude": 51.489414,
      "longitude": -0.243831,
      "elevation": 7.4394846
    },
    {
      "latitude": 51.489437,
      "longitude": -0.243794,
      "elevation": 7.74697
    },
    {
      "latitude": 51.48946,
      "longitude": -0.24376,
      "elevation": 7.7448025
    },
    {
      "latitude": 51.489483,
      "longitude": -0.243727,
      "elevation": 8.021022
    },
    {
      "latitude": 51.489506,
      "longitude": -0.243695,
      "elevation": 7.8841577
    },
    {
      "latitude": 51.489525,
      "longitude": -0.243663,
      "elevation": 7.882841
    },
    {
      "latitude": 51.489548,
      "longitude": -0.24363,
      "elevation": 8.015891
    },
    {
      "latitude": 51.489567,
      "longitude": -0.243595,
      "elevation": 8.0159235
    },
    {
      "latitude": 51.48959,
      "longitude": -0.243561,
      "elevation": 8.142196
    },
    {
      "latitude": 51.48961,
      "longitude": -0.243527,
      "elevation": 8.019486
    },
    {
      "latitude": 51.48963,
      "longitude": -0.243494,
      "elevation": 8.149819
    },
    {
      "latitude": 51.48965,
      "longitude": -0.243463,
      "elevation": 8.155923
    },
    {
      "latitude": 51.489674,
      "longitude": -0.243432,
      "elevation": 8.032943
    },
    {
      "latitude": 51.489693,
      "longitude": -0.243402,
      "elevation": 8.17128
    },
    {
      "latitude": 51.489716,
      "longitude": -0.24337,
      "elevation": 7.902763
    },
    {
      "latitude": 51.489742,
      "longitude": -0.243336,
      "elevation": 7.907123
    },
    {
      "latitude": 51.489765,
      "longitude": -0.243298,
      "elevation": 7.9103646
    },
    {
      "latitude": 51.48979,
      "longitude": -0.243255,
      "elevation": 7.9129105
    },
    {
      "latitude": 51.48981,
      "longitude": -0.243209,
      "elevation": 8.209533
    },
    {
      "latitude": 51.489822,
      "longitude": -0.24316,
      "elevation": 8.348709
    },
    {
      "latitude": 51.48983,
      "longitude": -0.24311,
      "elevation": 8.478694
    },
    {
      "latitude": 51.489838,
      "longitude": -0.243059,
      "elevation": 8.601804
    },
    {
      "latitude": 51.489853,
      "longitude": -0.243009,
      "elevation": 8.917239
    },
    {
      "latitude": 51.48987,
      "longitude": -0.24296,
      "elevation": 9.0203705
    },
    {
      "latitude": 51.489887,
      "longitude": -0.242912,
      "elevation": 9.1899
    },
    {
      "latitude": 51.4899,
      "longitude": -0.242865,
      "elevation": 9.330525
    },
    {
      "latitude": 51.489914,
      "longitude": -0.242818,
      "elevation": 9.448371
    },
    {
      "latitude": 51.489925,
      "longitude": -0.242771,
      "elevation": 9.549374
    },
    {
      "latitude": 51.48994,
      "longitude": -0.242723,
      "elevation": 9.615656
    },
    {
      "latitude": 51.48996,
      "longitude": -0.242675,
      "elevation": 9.732755
    },
    {
      "latitude": 51.48997,
      "longitude": -0.242626,
      "elevation": 9.810463
    },
    {
      "latitude": 51.489983,
      "longitude": -0.242577,
      "elevation": 9.890406
    },
    {
      "latitude": 51.48999,
      "longitude": -0.242527,
      "elevation": 9.93715
    },
    {
      "latitude": 51.489998,
      "longitude": -0.242477,
      "elevation": 9.98774
    },
    {
      "latitude": 51.490005,
      "longitude": -0.242426,
      "elevation": 10.055898
    },
    {
      "latitude": 51.490013,
      "longitude": -0.242375,
      "elevation": 10.139776
    },
    {
      "latitude": 51.490025,
      "longitude": -0.242324,
      "elevation": 10.207812
    },
    {
      "latitude": 51.490036,
      "longitude": -0.242272,
      "elevation": 10.274939
    },
    {
      "latitude": 51.49004,
      "longitude": -0.242217,
      "elevation": 10.338852
    },
    {
      "latitude": 51.49005,
      "longitude": -0.242169,
      "elevation": 10.39921
    },
    {
      "latitude": 51.490063,
      "longitude": -0.242122,
      "elevation": 10.452456
    },
    {
      "latitude": 51.490074,
      "longitude": -0.242074,
      "elevation": 10.501811
    },
    {
      "latitude": 51.49008,
      "longitude": -0.242025,
      "elevation": 10.548469
    },
    {
      "latitude": 51.49009,
      "longitude": -0.241975,
      "elevation": 10.594422
    },
    {
      "latitude": 51.490093,
      "longitude": -0.241925,
      "elevation": 10.639549
    },
    {
      "latitude": 51.490093,
      "longitude": -0.241874,
      "elevation": 10.686224
    },
    {
      "latitude": 51.49009,
      "longitude": -0.241824,
      "elevation": 10.728152
    },
    {
      "latitude": 51.490086,
      "longitude": -0.241778,
      "elevation": 10.7801485
    },
    {
      "latitude": 51.490074,
      "longitude": -0.24174,
      "elevation": 10.813051
    },
    {
      "latitude": 51.49005,
      "longitude": -0.24171,
      "elevation": 10.873684
    },
    {
      "latitude": 51.490025,
      "longitude": -0.241686,
      "elevation": 10.934671
    },
    {
      "latitude": 51.489998,
      "longitude": -0.241664,
      "elevation": 10.971597
    },
    {
      "latitude": 51.489975,
      "longitude": -0.24164,
      "elevation": 10.828307
    },
    {
      "latitude": 51.48996,
      "longitude": -0.24161,
      "elevation": 10.74522
    },
    {
      "latitude": 51.48996,
      "longitude": -0.241574,
      "elevation": 10.738393
    },
    {
      "latitude": 51.48996,
      "longitude": -0.241534,
      "elevation": 10.739023
    },
    {
      "latitude": 51.489964,
      "longitude": -0.24149,
      "elevation": 10.739499
    },
    {
      "latitude": 51.489967,
      "longitude": -0.241444,
      "elevation": 10.745248
    },
    {
      "latitude": 51.489975,
      "longitude": -0.241396,
      "elevation": 10.741994
    },
    {
      "latitude": 51.489983,
      "longitude": -0.241347,
      "elevation": 10.692357
    },
    {
      "latitude": 51.489994,
      "longitude": -0.2413,
      "elevation": 10.606905
    },
    {
      "latitude": 51.490005,
      "longitude": -0.241254,
      "elevation": 10.502724
    },
    {
      "latitude": 51.490013,
      "longitude": -0.241211,
      "elevation": 10.423304
    },
    {
      "latitude": 51.490025,
      "longitude": -0.241169,
      "elevation": 10.336304
    },
    {
      "latitude": 51.490036,
      "longitude": -0.241127,
      "elevation": 10.141917
    },
    {
      "latitude": 51.490047,
      "longitude": -0.241083,
      "elevation": 10.137249
    },
    {
      "latitude": 51.49006,
      "longitude": -0.241036,
      "elevation": 10.13208
    },
    {
      "latitude": 51.49007,
      "longitude": -0.240987,
      "elevation": 10.222679
    },
    {
      "latitude": 51.490086,
      "longitude": -0.24094,
      "elevation": 10.216471
    },
    {
      "latitude": 51.490093,
      "longitude": -0.2409,
      "elevation": 10.116549
    },
    {
      "latitude": 51.490105,
      "longitude": -0.240858,
      "elevation": 10.204889
    },
    {
      "latitude": 51.490116,
      "longitude": -0.240814,
      "elevation": 10.096386
    },
    {
      "latitude": 51.49013,
      "longitude": -0.24077,
      "elevation": 10.155804
    },
    {
      "latitude": 51.490143,
      "longitude": -0.240725,
      "elevation": 10.121977
    },
    {
      "latitude": 51.490154,
      "longitude": -0.240681,
      "elevation": 10.08778
    },
    {
      "latitude": 51.490166,
      "longitude": -0.240635,
      "elevation": 9.975429
    },
    {
      "latitude": 51.490173,
      "longitude": -0.240588,
      "elevation": 9.941224
    },
    {
      "latitude": 51.490177,
      "longitude": -0.240539,
      "elevation": 9.906109
    },
    {
      "latitude": 51.490185,
      "longitude": -0.240487,
      "elevation": 9.868172
    },
    {
      "latitude": 51.49019,
      "longitude": -0.240432,
      "elevation": 9.757979
    },
    {
      "latitude": 51.49019,
      "longitude": -0.240377,
      "elevation": 9.645616
    },
    {
      "latitude": 51.490192,
      "longitude": -0.240326,
      "elevation": 9.612216
    },
    {
      "latitude": 51.490196,
      "longitude": -0.240281,
      "elevation": 9.418203
    },
    {
      "latitude": 51.4902,
      "longitude": -0.240239,
      "elevation": 9.392686
    },
    {
      "latitude": 51.490208,
      "longitude": -0.240193,
      "elevation": 9.362521
    },
    {
      "latitude": 51.49022,
      "longitude": -0.240141,
      "elevation": 9.326019
    },
    {
      "latitude": 51.490227,
      "longitude": -0.240088,
      "elevation": 9.359935
    },
    {
      "latitude": 51.490234,
      "longitude": -0.24004,
      "elevation": 9.320125
    },
    {
      "latitude": 51.49024,
      "longitude": -0.23999,
      "elevation": 9.326367
    },
    {
      "latitude": 51.490246,
      "longitude": -0.23994,
      "elevation": 9.234723
    },
    {
      "latitude": 51.49025,
      "longitude": -0.239894,
      "elevation": 9.101837
    },
    {
      "latitude": 51.49026,
      "longitude": -0.239857,
      "elevation": 9.031694
    },
    {
      "latitude": 51.490273,
      "longitude": -0.23982,
      "elevation": 8.9606695
    },
    {
      "latitude": 51.490288,
      "longitude": -0.239775,
      "elevation": 8.876289
    },
    {
      "latitude": 51.49029,
      "longitude": -0.239726,
      "elevation": 8.786195
    },
    {
      "latitude": 51.490288,
      "longitude": -0.239678,
      "elevation": 8.663079
    },
    {
      "latitude": 51.490284,
      "longitude": -0.239634,
      "elevation": 8.580215
    },
    {
      "latitude": 51.490288,
      "longitude": -0.239586,
      "elevation": 8.458006
    },
    {
      "latitude": 51.49029,
      "longitude": -0.239534,
      "elevation": 8.36346
    },
    {
      "latitude": 51.4903,
      "longitude": -0.23948,
      "elevation": 8.29089
    },
    {
      "latitude": 51.49031,
      "longitude": -0.239424,
      "elevation": 8.18963
    },
    {
      "latitude": 51.490314,
      "longitude": -0.239371,
      "elevation": 8.093755
    },
    {
      "latitude": 51.49032,
      "longitude": -0.239323,
      "elevation": 8.004645
    },
    {
      "latitude": 51.49032,
      "longitude": -0.239281,
      "elevation": 7.9210463
    },
    {
      "latitude": 51.49032,
      "longitude": -0.23924,
      "elevation": 7.8329687
    },
    {
      "latitude": 51.49031,
      "longitude": -0.23919,
      "elevation": 7.7160773
    },
    {
      "latitude": 51.490303,
      "longitude": -0.23913,
      "elevation": 7.574325
    },
    {
      "latitude": 51.4903,
      "longitude": -0.239079,
      "elevation": 7.471371
    },
    {
      "latitude": 51.49031,
      "longitude": -0.239048,
      "elevation": 7.347107
    },
    {
      "latitude": 51.490326,
      "longitude": -0.239014,
      "elevation": 7.336959
    },
    {
      "latitude": 51.49034,
      "longitude": -0.238978,
      "elevation": 7.3260555
    },
    {
      "latitude": 51.490345,
      "longitude": -0.23893,
      "elevation": 7.3035984
    },
    {
      "latitude": 51.49035,
      "longitude": -0.238875,
      "elevation": 7.2413673
    },
    {
      "latitude": 51.490353,
      "longitude": -0.238817,
      "elevation": 7.1949053
    },
    {
      "latitude": 51.490356,
      "longitude": -0.238759,
      "elevation": 7.145378
    },
    {
      "latitude": 51.490364,
      "longitude": -0.238705,
      "elevation": 7.0784993
    },
    {
      "latitude": 51.490368,
      "longitude": -0.238653,
      "elevation": 7.031543
    },
    {
      "latitude": 51.490376,
      "longitude": -0.238602,
      "elevation": 6.9935975
    },
    {
      "latitude": 51.49038,
      "longitude": -0.23855,
      "elevation": 6.9519873
    },
    {
      "latitude": 51.490383,
      "longitude": -0.238501,
      "elevation": 6.903132
    },
    {
      "latitude": 51.49039,
      "longitude": -0.238455,
      "elevation": 6.880537
    },
    {
      "latitude": 51.490395,
      "longitude": -0.238407,
      "elevation": 6.8588963
    },
    {
      "latitude": 51.490395,
      "longitude": -0.238357,
      "elevation": 6.8208
    },
    {
      "latitude": 51.4904,
      "longitude": -0.238304,
      "elevation": 6.78621
    },
    {
      "latitude": 51.4904,
      "longitude": -0.238251,
      "elevation": 6.7477627
    },
    {
      "latitude": 51.490402,
      "longitude": -0.238198,
      "elevation": 6.709781
    },
    {
      "latitude": 51.49041,
      "longitude": -0.238145,
      "elevation": 6.6834445
    },
    {
      "latitude": 51.490417,
      "longitude": -0.238092,
      "elevation": 6.681723
    },
    {
      "latitude": 51.49042,
      "longitude": -0.238037,
      "elevation": 6.660384
    },
    {
      "latitude": 51.49042,
      "longitude": -0.23798,
      "elevation": 6.60262
    },
    {
      "latitude": 51.49042,
      "longitude": -0.237928,
      "elevation": 6.5461936
    },
    {
      "latitude": 51.49042,
      "longitude": -0.237878,
      "elevation": 6.4849515
    },
    {
      "latitude": 51.49042,
      "longitude": -0.23783,
      "elevation": 6.4294643
    },
    {
      "latitude": 51.490425,
      "longitude": -0.23778,
      "elevation": 6.3918366
    },
    {
      "latitude": 51.490425,
      "longitude": -0.237729,
      "elevation": 6.352922
    },
    {
      "latitude": 51.49043,
      "longitude": -0.237679,
      "elevation": 6.322101
    },
    {
      "latitude": 51.490433,
      "longitude": -0.237632,
      "elevation": 6.304627
    },
    {
      "latitude": 51.490437,
      "longitude": -0.237586,
      "elevation": 6.289341
    },
    {
      "latitude": 51.49044,
      "longitude": -0.237539,
      "elevation": 6.273985
    },
    {
      "latitude": 51.490444,
      "longitude": -0.237491,
      "elevation": 6.231721
    },
    {
      "latitude": 51.490444,
      "longitude": -0.237441,
      "elevation": 6.166082
    },
    {
      "latitude": 51.490448,
      "longitude": -0.23739,
      "elevation": 6.0967503
    },
    {
      "latitude": 51.49045,
      "longitude": -0.237338,
      "elevation": 6.0469284
    },
    {
      "latitude": 51.490456,
      "longitude": -0.237286,
      "elevation": 5.9973016
    },
    {
      "latitude": 51.49046,
      "longitude": -0.237235,
      "elevation": 5.949676
    },
    {
      "latitude": 51.490463,
      "longitude": -0.237186,
      "elevation": 5.8850064
    },
    {
      "latitude": 51.490463,
      "longitude": -0.237138,
      "elevation": 5.821424
    },
    {
      "latitude": 51.490463,
      "longitude": -0.237091,
      "elevation": 5.7496557
    },
    {
      "latitude": 51.490467,
      "longitude": -0.237044,
      "elevation": 5.67797
    },
    {
      "latitude": 51.490467,
      "longitude": -0.236999,
      "elevation": 5.6007066
    },
    {
      "latitude": 51.490467,
      "longitude": -0.236952,
      "elevation": 5.529213
    },
    {
      "latitude": 51.490467,
      "longitude": -0.236905,
      "elevation": 5.448588
    },
    {
      "latitude": 51.49047,
      "longitude": -0.236856,
      "elevation": 5.385409
    },
    {
      "latitude": 51.49047,
      "longitude": -0.236804,
      "elevation": 5.31735
    },
    {
      "latitude": 51.490475,
      "longitude": -0.23675,
      "elevation": 5.24519
    },
    {
      "latitude": 51.490475,
      "longitude": -0.236695,
      "elevation": 5.181037
    },
    {
      "latitude": 51.49048,
      "longitude": -0.236641,
      "elevation": 5.2016015
    },
    {
      "latitude": 51.490482,
      "longitude": -0.236588,
      "elevation": 5.2848897
    },
    {
      "latitude": 51.490482,
      "longitude": -0.236539,
      "elevation": 5.3440914
    },
    {
      "latitude": 51.490482,
      "longitude": -0.236494,
      "elevation": 5.37806
    },
    {
      "latitude": 51.490482,
      "longitude": -0.236453,
      "elevation": 5.4094453
    },
    {
      "latitude": 51.490486,
      "longitude": -0.236415,
      "elevation": 5.4543333
    },
    {
      "latitude": 51.49049,
      "longitude": -0.236376,
      "elevation": 5.5374207
    },
    {
      "latitude": 51.49049,
      "longitude": -0.236331,
      "elevation": 5.5609727
    },
    {
      "latitude": 51.490486,
      "longitude": -0.236287,
      "elevation": 5.565363
    },
    {
      "latitude": 51.490482,
      "longitude": -0.236241,
      "elevation": 5.5807066
    },
    {
      "latitude": 51.49048,
      "longitude": -0.236194,
      "elevation": 5.6060596
    },
    {
      "latitude": 51.490475,
      "longitude": -0.236146,
      "elevation": 5.641401
    },
    {
      "latitude": 51.490475,
      "longitude": -0.236097,
      "elevation": 5.6911807
    },
    {
      "latitude": 51.490475,
      "longitude": -0.236047,
      "elevation": 5.741376
    },
    {
      "latitude": 51.490475,
      "longitude": -0.235998,
      "elevation": 5.7991085
    },
    {
      "latitude": 51.49048,
      "longitude": -0.235948,
      "elevation": 5.862109
    },
    {
      "latitude": 51.49048,
      "longitude": -0.235898,
      "elevation": 5.915419
    },
    {
      "latitude": 51.49048,
      "longitude": -0.235849,
      "elevation": 5.963851
    },
    {
      "latitude": 51.49048,
      "longitude": -0.2358,
      "elevation": 6.0206714
    },
    {
      "latitude": 51.490475,
      "longitude": -0.235752,
      "elevation": 6.0771365
    },
    {
      "latitude": 51.490475,
      "longitude": -0.235704,
      "elevation": 6.140025
    },
    {
      "latitude": 51.49047,
      "longitude": -0.235657,
      "elevation": 6.1952214
    },
    {
      "latitude": 51.49047,
      "longitude": -0.23561,
      "elevation": 6.2334275
    },
    {
      "latitude": 51.49047,
      "longitude": -0.235564,
      "elevation": 6.2940974
    },
    {
      "latitude": 51.490467,
      "longitude": -0.235517,
      "elevation": 6.356322
    },
    {
      "latitude": 51.490467,
      "longitude": -0.235472,
      "elevation": 6.4271626
    },
    {
      "latitude": 51.49047,
      "longitude": -0.235426,
      "elevation": 6.494821
    },
    {
      "latitude": 51.49047,
      "longitude": -0.235381,
      "elevation": 6.5612416
    },
    {
      "latitude": 51.49048,
      "longitude": -0.235335,
      "elevation": 6.608931
    },
    {
      "latitude": 51.490486,
      "longitude": -0.23529,
      "elevation": 6.681473
    },
    {
      "latitude": 51.490498,
      "longitude": -0.235245,
      "elevation": 6.7410316
    },
    {
      "latitude": 51.490505,
      "longitude": -0.235203,
      "elevation": 6.7200074
    },
    {
      "latitude": 51.490513,
      "longitude": -0.235164,
      "elevation": 6.7704687
    },
    {
      "latitude": 51.490517,
      "longitude": -0.235124,
      "elevation": 6.6640973
    },
    {
      "latitude": 51.490524,
      "longitude": -0.235082,
      "elevation": 6.6089063
    },
    {
      "latitude": 51.49053,
      "longitude": -0.235037,
      "elevation": 6.528193
    },
    {
      "latitude": 51.490536,
      "longitude": -0.234992,
      "elevation": 6.1423736
    },
    {
      "latitude": 51.490543,
      "longitude": -0.234954,
      "elevation": 5.360882
    },
    {
      "latitude": 51.490566,
      "longitude": -0.234929,
      "elevation": 5.3622065
    },
    {
      "latitude": 51.490585,
      "longitude": -0.234903,
      "elevation": 5.0657253
    },
    {
      "latitude": 51.490604,
      "longitude": -0.234874,
      "elevation": 4.9370947
    },
    {
      "latitude": 51.49062,
      "longitude": -0.234843,
      "elevation": 4.604598
    },
    {
      "latitude": 51.49064,
      "longitude": -0.234809,
      "elevation": 4.3803825
    },
    {
      "latitude": 51.490658,
      "longitude": -0.234769,
      "elevation": 4.243089
    },
    {
      "latitude": 51.490677,
      "longitude": -0.23472,
      "elevation": 4.222619
    },
    {
      "latitude": 51.49069,
      "longitude": -0.234661,
      "elevation": 4.1621504
    },
    {
      "latitude": 51.490704,
      "longitude": -0.234604,
      "elevation": 4.134219
    },
    {
      "latitude": 51.490715,
      "longitude": -0.234555,
      "elevation": 4.1644664
    },
    {
      "latitude": 51.490726,
      "longitude": -0.234505,
      "elevation": 4.193076
    },
    {
      "latitude": 51.490738,
      "longitude": -0.234452,
      "elevation": 4.180825
    },
    {
      "latitude": 51.490746,
      "longitude": -0.234397,
      "elevation": 4.162622
    },
    {
      "latitude": 51.490753,
      "longitude": -0.234339,
      "elevation": 4.0736923
    },
    {
      "latitude": 51.49076,
      "longitude": -0.234282,
      "elevation": 4.012363
    },
    {
      "latitude": 51.49076,
      "longitude": -0.234224,
      "elevation": 4.0256414
    },
    {
      "latitude": 51.490765,
      "longitude": -0.234168,
      "elevation": 3.898063
    },
    {
      "latitude": 51.490765,
      "longitude": -0.234112,
      "elevation": 3.868171
    },
    {
      "latitude": 51.49076,
      "longitude": -0.234058,
      "elevation": 3.8137739
    },
    {
      "latitude": 51.490757,
      "longitude": -0.234005,
      "elevation": 3.7265923
    },
    {
      "latitude": 51.490753,
      "longitude": -0.233953,
      "elevation": 3.6974995
    },
    {
      "latitude": 51.490746,
      "longitude": -0.233903,
      "elevation": 3.6424303
    },
    {
      "latitude": 51.49074,
      "longitude": -0.233853,
      "elevation": 3.5864785
    },
    {
      "latitude": 51.490734,
      "longitude": -0.233804,
      "elevation": 3.5307589
    },
    {
      "latitude": 51.490726,
      "longitude": -0.233756,
      "elevation": 3.4755213
    },
    {
      "latitude": 51.49072,
      "longitude": -0.233709,
      "elevation": 3.4722733
    },
    {
      "latitude": 51.490707,
      "longitude": -0.233662,
      "elevation": 3.6243138
    },
    {
      "latitude": 51.490696,
      "longitude": -0.233615,
      "elevation": 3.584957
    },
    {
      "latitude": 51.490685,
      "longitude": -0.233569,
      "elevation": 3.6427653
    },
    {
      "latitude": 51.49067,
      "longitude": -0.233523,
      "elevation": 3.6128998
    },
    {
      "latitude": 51.490654,
      "longitude": -0.23348,
      "elevation": 3.587135
    },
    {
      "latitude": 51.490643,
      "longitude": -0.233441,
      "elevation": 3.5652616
    },
    {
      "latitude": 51.490627,
      "longitude": -0.233402,
      "elevation": 3.8014581
    },
    {
      "latitude": 51.490612,
      "longitude": -0.23336,
      "elevation": 3.9353151
    },
    {
      "latitude": 51.490597,
      "longitude": -0.233315,
      "elevation": 4.0842447
    },
    {
      "latitude": 51.490578,
      "longitude": -0.233268,
      "elevation": 4.0846214
    },
    {
      "latitude": 51.49056,
      "longitude": -0.233226,
      "elevation": 4.0847955
    },
    {
      "latitude": 51.49054,
      "longitude": -0.23319,
      "elevation": 4.240922
    },
    {
      "latitude": 51.490517,
      "longitude": -0.23316,
      "elevation": 4.240755
    },
    {
      "latitude": 51.490494,
      "longitude": -0.233131,
      "elevation": 4.083482
    },
    {
      "latitude": 51.49047,
      "longitude": -0.2331,
      "elevation": 4.082846
    },
    {
      "latitude": 51.490444,
      "longitude": -0.233069,
      "elevation": 3.9280872
    },
    {
      "latitude": 51.49042,
      "longitude": -0.233039,
      "elevation": 4.081886
    },
    {
      "latitude": 51.490402,
      "longitude": -0.233011,
      "elevation": 3.7764738
    },
    {
      "latitude": 51.490383,
      "longitude": -0.232983,
      "elevation": 3.77589
    },
    {
      "latitude": 51.490368,
      "longitude": -0.232952,
      "elevation": 3.7756033
    },
    {
      "latitude": 51.49035,
      "longitude": -0.232917,
      "elevation": 3.7755084
    },
    {
      "latitude": 51.49033,
      "longitude": -0.232878,
      "elevation": 3.775414
    },
    {
      "latitude": 51.49031,
      "longitude": -0.232838,
      "elevation": 3.6318164
    },
    {
      "latitude": 51.49029,
      "longitude": -0.232797,
      "elevation": 3.4969885
    },
    {
      "latitude": 51.490273,
      "longitude": -0.232757,
      "elevation": 3.4978542
    },
    {
      "latitude": 51.490257,
      "longitude": -0.232716,
      "elevation": 3.926852
    },
    {
      "latitude": 51.49024,
      "longitude": -0.232673,
      "elevation": 4.081886
    },
    {
      "latitude": 51.49022,
      "longitude": -0.232629,
      "elevation": 4.082032
    },
    {
      "latitude": 51.4902,
      "longitude": -0.232585,
      "elevation": 4.082134
    },
    {
      "latitude": 51.49018,
      "longitude": -0.23254,
      "elevation": 3.9281495
    },
    {
      "latitude": 51.49016,
      "longitude": -0.232494,
      "elevation": 3.92892
    },
    {
      "latitude": 51.490147,
      "longitude": -0.232448,
      "elevation": 3.9297366
    },
    {
      "latitude": 51.49013,
      "longitude": -0.232403,
      "elevation": 3.9309747
    },
    {
      "latitude": 51.49012,
      "longitude": -0.232357,
      "elevation": 3.9325566
    },
    {
      "latitude": 51.49011,
      "longitude": -0.232312,
      "elevation": 4.0853434
    },
    {
      "latitude": 51.490093,
      "longitude": -0.232267,
      "elevation": 4.0862923
    },
    {
      "latitude": 51.49008,
      "longitude": -0.232223,
      "elevation": 3.9377508
    },
    {
      "latitude": 51.490067,
      "longitude": -0.232178,
      "elevation": 4.0880666
    },
    {
      "latitude": 51.490047,
      "longitude": -0.232135,
      "elevation": 4.2425356
    },
    {
      "latitude": 51.490032,
      "longitude": -0.232094,
      "elevation": 4.089232
    },
    {
      "latitude": 51.490017,
      "longitude": -0.232056,
      "elevation": 3.670254
    },
    {
      "latitude": 51.49,
      "longitude": -0.232014,
      "elevation": 3.3351135
    },
    {
      "latitude": 51.489983,
      "longitude": -0.23197,
      "elevation": 3.1061356
    },
    {
      "latitude": 51.48996,
      "longitude": -0.231927,
      "elevation": 3.0633385
    },
    {
      "latitude": 51.489937,
      "longitude": -0.231887,
      "elevation": 3.0256934
    },
    {
      "latitude": 51.489918,
      "longitude": -0.23185,
      "elevation": 2.9529448
    },
    {
      "latitude": 51.489895,
      "longitude": -0.231813,
      "elevation": 3.0081418
    },
    {
      "latitude": 51.489876,
      "longitude": -0.231777,
      "elevation": 3.021409
    },
    {
      "latitude": 51.48986,
      "longitude": -0.23174,
      "elevation": 3.035651
    },
    {
      "latitude": 51.48984,
      "longitude": -0.231701,
      "elevation": 3.0113282
    },
    {
      "latitude": 51.489822,
      "longitude": -0.231662,
      "elevation": 3.0249019
    },
    {
      "latitude": 51.489803,
      "longitude": -0.231621,
      "elevation": 3.0918145
    },
    {
      "latitude": 51.489788,
      "longitude": -0.23158,
      "elevation": 3.1633523
    },
    {
      "latitude": 51.489773,
      "longitude": -0.231537,
      "elevation": 3.1999512
    },
    {
      "latitude": 51.489758,
      "longitude": -0.231495,
      "elevation": 3.2380447
    },
    {
      "latitude": 51.489742,
      "longitude": -0.231452,
      "elevation": 3.2778227
    },
    {
      "latitude": 51.489723,
      "longitude": -0.23141,
      "elevation": 3.3178182
    },
    {
      "latitude": 51.489704,
      "longitude": -0.231367,
      "elevation": 3.3600273
    },
    {
      "latitude": 51.48969,
      "longitude": -0.231324,
      "elevation": 3.4046638
    },
    {
      "latitude": 51.48967,
      "longitude": -0.231279,
      "elevation": 3.4880297
    },
    {
      "latitude": 51.489655,
      "longitude": -0.231233,
      "elevation": 3.6187918
    },
    {
      "latitude": 51.489643,
      "longitude": -0.231183,
      "elevation": 3.638206
    },
    {
      "latitude": 51.48963,
      "longitude": -0.23113,
      "elevation": 3.7418199
    },
    {
      "latitude": 51.489624,
      "longitude": -0.231077,
      "elevation": 3.8482163
    },
    {
      "latitude": 51.489613,
      "longitude": -0.231027,
      "elevation": 3.8764071
    },
    {
      "latitude": 51.489597,
      "longitude": -0.230983,
      "elevation": 3.9689634
    },
    {
      "latitude": 51.489582,
      "longitude": -0.230943,
      "elevation": 3.9916615
    },
    {
      "latitude": 51.489563,
      "longitude": -0.230904,
      "elevation": 4.048054
    },
    {
      "latitude": 51.489544,
      "longitude": -0.230864,
      "elevation": 4.0645895
    },
    {
      "latitude": 51.489525,
      "longitude": -0.230823,
      "elevation": 4.1323075
    },
    {
      "latitude": 51.489506,
      "longitude": -0.230781,
      "elevation": 4.221846
    },
    {
      "latitude": 51.48949,
      "longitude": -0.230738,
      "elevation": 4.3155575
    },
    {
      "latitude": 51.489475,
      "longitude": -0.230694,
      "elevation": 4.3931284
    },
    {
      "latitude": 51.48946,
      "longitude": -0.23065,
      "elevation": 4.4728947
    },
    {
      "latitude": 51.48945,
      "longitude": -0.230606,
      "elevation": 4.571783
    },
    {
      "latitude": 51.489437,
      "longitude": -0.230562,
      "elevation": 4.6382384
    },
    {
      "latitude": 51.489426,
      "longitude": -0.230518,
      "elevation": 4.723703
    },
    {
      "latitude": 51.489414,
      "longitude": -0.230474,
      "elevation": 4.810669
    },
    {
      "latitude": 51.489407,
      "longitude": -0.230429,
      "elevation": 4.9270515
    },
    {
      "latitude": 51.48939,
      "longitude": -0.230384,
      "elevation": 5.0059066
    },
    {
      "latitude": 51.48938,
      "longitude": -0.230338,
      "elevation": 5.114053
    },
    {
      "latitude": 51.48937,
      "longitude": -0.230292,
      "elevation": 5.225324
    },
    {
      "latitude": 51.489353,
      "longitude": -0.230246,
      "elevation": 5.3385096
    },
    {
      "latitude": 51.489338,
      "longitude": -0.230199,
      "elevation": 5.4215174
    },
    {
      "latitude": 51.489326,
      "longitude": -0.230155,
      "elevation": 5.5213585
    },
    {
      "latitude": 51.48932,
      "longitude": -0.230114,
      "elevation": 5.62276
    },
    {
      "latitude": 51.48931,
      "longitude": -0.230074,
      "elevation": 5.7331223
    },
    {
      "latitude": 51.4893,
      "longitude": -0.230033,
      "elevation": 5.8281765
    },
    {
      "latitude": 51.48929,
      "longitude": -0.229991,
      "elevation": 5.917725
    },
    {
      "latitude": 51.48928,
      "longitude": -0.229948,
      "elevation": 5.9206176
    },
    {
      "latitude": 51.489265,
      "longitude": -0.229905,
      "elevation": 5.934236
    },
    {
      "latitude": 51.489258,
      "longitude": -0.229862,
      "elevation": 5.966692
    },
    {
      "latitude": 51.489246,
      "longitude": -0.229819,
      "elevation": 5.991327
    },
    {
      "latitude": 51.489235,
      "longitude": -0.229775,
      "elevation": 6.0176864
    },
    {
      "latitude": 51.489223,
      "longitude": -0.229731,
      "elevation": 6.0296264
    },
    {
      "latitude": 51.489212,
      "longitude": -0.229686,
      "elevation": 6.057769
    },
    {
      "latitude": 51.4892,
      "longitude": -0.229642,
      "elevation": 6.134761
    },
    {
      "latitude": 51.48919,
      "longitude": -0.229601,
      "elevation": 6.2064905
    },
    {
      "latitude": 51.48918,
      "longitude": -0.229565,
      "elevation": 6.402824
    },
    {
      "latitude": 51.48917,
      "longitude": -0.229532,
      "elevation": 6.4737997
    },
    {
      "latitude": 51.489162,
      "longitude": -0.229502,
      "elevation": 6.541147
    },
    {
      "latitude": 51.48915,
      "longitude": -0.229471,
      "elevation": 6.52657
    },
    {
      "latitude": 51.489143,
      "longitude": -0.229437,
      "elevation": 6.59813
    },
    {
      "latitude": 51.489136,
      "longitude": -0.229399,
      "elevation": 6.68368
    },
    {
      "latitude": 51.48913,
      "longitude": -0.229353,
      "elevation": 6.7820826
    },
    {
      "latitude": 51.48912,
      "longitude": -0.229302,
      "elevation": 7.0191517
    },
    {
      "latitude": 51.489105,
      "longitude": -0.229249,
      "elevation": 7.1507454
    },
    {
      "latitude": 51.48909,
      "longitude": -0.229196,
      "elevation": 7.1467094
    },
    {
      "latitude": 51.48907,
      "longitude": -0.229145,
      "elevation": 6.6438603
    },
    {
      "latitude": 51.48905,
      "longitude": -0.229098,
      "elevation": 6.3769755
    },
    {
      "latitude": 51.489033,
      "longitude": -0.229057,
      "elevation": 6.247116
    },
    {
      "latitude": 51.489014,
      "longitude": -0.22902,
      "elevation": 6.388023
    },
    {
      "latitude": 51.488995,
      "longitude": -0.228985,
      "elevation": 6.5623517
    },
    {
      "latitude": 51.488976,
      "longitude": -0.228952,
      "elevation": 7.0163856
    },
    {
      "latitude": 51.48896,
      "longitude": -0.228919,
      "elevation": 7.4467278
    },
    {
      "latitude": 51.488945,
      "longitude": -0.228884,
      "elevation": 8.079478
    },
    {
      "latitude": 51.48893,
      "longitude": -0.228847,
      "elevation": 7.60272
    },
    {
      "latitude": 51.488914,
      "longitude": -0.228807,
      "elevation": 7.9200044
    },
    {
      "latitude": 51.488907,
      "longitude": -0.228766,
      "elevation": 8.238957
    },
    {
      "latitude": 51.488907,
      "longitude": -0.228725,
      "elevation": 8.396995
    },
    {
      "latitude": 51.488914,
      "longitude": -0.228684,
      "elevation": 8.554216
    },
    {
      "latitude": 51.48893,
      "longitude": -0.228644,
      "elevation": 8.557229
    },
    {
      "latitude": 51.488953,
      "longitude": -0.228604,
      "elevation": 8.559022
    },
    {
      "latitude": 51.488968,
      "longitude": -0.228563,
      "elevation": 8.400001
    },
    {
      "latitude": 51.488983,
      "longitude": -0.228518,
      "elevation": 7.9363503
    },
    {
      "latitude": 51.488995,
      "longitude": -0.228471,
      "elevation": 7.339094
    },
    {
      "latitude": 51.489006,
      "longitude": -0.228424,
      "elevation": 7.374056
    },
    {
      "latitude": 51.48902,
      "longitude": -0.228381,
      "elevation": 7.409528
    },
    {
      "latitude": 51.48904,
      "longitude": -0.22834,
      "elevation": 7.44631
    },
    {
      "latitude": 51.489056,
      "longitude": -0.228298,
      "elevation": 7.530527
    },
    {
      "latitude": 51.489075,
      "longitude": -0.228255,
      "elevation": 7.430344
    },
    {
      "latitude": 51.48909,
      "longitude": -0.228212,
      "elevation": 7.608605
    },
    {
      "latitude": 51.489105,
      "longitude": -0.228171,
      "elevation": 7.7110376
    },
    {
      "latitude": 51.48912,
      "longitude": -0.228132,
      "elevation": 7.826885
    },
    {
      "latitude": 51.489136,
      "longitude": -0.228093,
      "elevation": 8.097764
    },
    {
      "latitude": 51.48915,
      "longitude": -0.228052,
      "elevation": 8.245646
    },
    {
      "latitude": 51.489166,
      "longitude": -0.228006,
      "elevation": 8.400728
    },
    {
      "latitude": 51.48918,
      "longitude": -0.227955,
      "elevation": 9.176561
    },
    {
      "latitude": 51.48919,
      "longitude": -0.227904,
      "elevation": 9.660159
    },
    {
      "latitude": 51.48918,
      "longitude": -0.227853,
      "elevation": 9.734776
    },
    {
      "latitude": 51.489166,
      "longitude": -0.227807,
      "elevation": 9.713888
    },
    {
      "latitude": 51.489143,
      "longitude": -0.22777,
      "elevation": 9.68935
    },
    {
      "latitude": 51.489117,
      "longitude": -0.227745,
      "elevation": 9.670806
    },
    {
      "latitude": 51.48909,
      "longitude": -0.227726,
      "elevation": 9.655788
    },
    {
      "latitude": 51.48906,
      "longitude": -0.227705,
      "elevation": 9.464109
    },
    {
      "latitude": 51.489033,
      "longitude": -0.227679,
      "elevation": 9.350166
    },
    {
      "latitude": 51.48901,
      "longitude": -0.227651,
      "elevation": 9.338351
    },
    {
      "latitude": 51.488983,
      "longitude": -0.227626,
      "elevation": 9.327959
    },
    {
      "latitude": 51.488956,
      "longitude": -0.227608,
      "elevation": 9.415581
    },
    {
      "latitude": 51.488934,
      "longitude": -0.227587,
      "elevation": 9.20824
    },
    {
      "latitude": 51.48891,
      "longitude": -0.22756,
      "elevation": 8.2394285
    },
    {
      "latitude": 51.488888,
      "longitude": -0.227538,
      "elevation": 8.239236
    },
    {
      "latitude": 51.48887,
      "longitude": -0.227519,
      "elevation": 8.3953
    },
    {
      "latitude": 51.488846,
      "longitude": -0.227501,
      "elevation": 8.545865
    },
    {
      "latitude": 51.488827,
      "longitude": -0.227478,
      "elevation": 8.819797
    },
    {
      "latitude": 51.488804,
      "longitude": -0.227453,
      "elevation": 8.810818
    },
    {
      "latitude": 51.488785,
      "longitude": -0.227425,
      "elevation": 8.920194
    },
    {
      "latitude": 51.48876,
      "longitude": -0.227398,
      "elevation": 8.906749
    },
    {
      "latitude": 51.488735,
      "longitude": -0.22737,
      "elevation": 8.892477
    },
    {
      "latitude": 51.488716,
      "longitude": -0.227344,
      "elevation": 8.767251
    },
    {
      "latitude": 51.488693,
      "longitude": -0.227319,
      "elevation": 8.866282
    },
    {
      "latitude": 51.488667,
      "longitude": -0.227295,
      "elevation": 8.854245
    },
    {
      "latitude": 51.488644,
      "longitude": -0.227271,
      "elevation": 8.737165
    },
    {
      "latitude": 51.488613,
      "longitude": -0.227249,
      "elevation": 8.615365
    },
    {
      "latitude": 51.488583,
      "longitude": -0.227233,
      "elevation": 8.489254
    },
    {
      "latitude": 51.488552,
      "longitude": -0.227227,
      "elevation": 8.8287735
    },
    {
      "latitude": 51.488525,
      "longitude": -0.227236,
      "elevation": 8.932777
    },
    {
      "latitude": 51.4885,
      "longitude": -0.227254,
      "elevation": 9.035473
    },
    {
      "latitude": 51.488476,
      "longitude": -0.227275,
      "elevation": 9.05324
    },
    {
      "latitude": 51.488457,
      "longitude": -0.227294,
      "elevation": 8.976749
    },
    {
      "latitude": 51.488434,
      "longitude": -0.227318,
      "elevation": 8.991894
    },
    {
      "latitude": 51.48841,
      "longitude": -0.227351,
      "elevation": 9.010388
    },
    {
      "latitude": 51.48839,
      "longitude": -0.22738,
      "elevation": 9.124698
    },
    {
      "latitude": 51.488373,
      "longitude": -0.227405,
      "elevation": 9.230401
    },
    {
      "latitude": 51.488358,
      "longitude": -0.227435,
      "elevation": 8.9359
    },
    {
      "latitude": 51.48834,
      "longitude": -0.227475,
      "elevation": 8.9483385
    },
    {
      "latitude": 51.48832,
      "longitude": -0.227522,
      "elevation": 8.821198
    },
    {
      "latitude": 51.488297,
      "longitude": -0.227567,
      "elevation": 8.934087
    },
    {
      "latitude": 51.488274,
      "longitude": -0.227604,
      "elevation": 8.918439
    },
    {
      "latitude": 51.488247,
      "longitude": -0.227635,
      "elevation": 8.900059
    },
    {
      "latitude": 51.48822,
      "longitude": -0.227664,
      "elevation": 8.768797
    },
    {
      "latitude": 51.488197,
      "longitude": -0.227693,
      "elevation": 8.75271
    },
    {
      "latitude": 51.488174,
      "longitude": -0.227724,
      "elevation": 8.736851
    },
    {
      "latitude": 51.488155,
      "longitude": -0.227757,
      "elevation": 8.721504
    },
    {
      "latitude": 51.48814,
      "longitude": -0.227793,
      "elevation": 8.597986
    },
    {
      "latitude": 51.488125,
      "longitude": -0.227835,
      "elevation": 8.587543
    },
    {
      "latitude": 51.48811,
      "longitude": -0.227885,
      "elevation": 8.777512
    },
    {
      "latitude": 51.488094,
      "longitude": -0.227942,
      "elevation": 8.920543
    },
    {
      "latitude": 51.488075,
      "longitude": -0.227995,
      "elevation": 8.96191
    },
    {
      "latitude": 51.48806,
      "longitude": -0.228033,
      "elevation": 8.934772
    },
    {
      "latitude": 51.48804,
      "longitude": -0.228046,
      "elevation": 8.905537
    },
    {
      "latitude": 51.48802,
      "longitude": -0.22804,
      "elevation": 9.070891
    },
    {
      "latitude": 51.488,
      "longitude": -0.228025,
      "elevation": 9.073615
    },
    {
      "latitude": 51.48798,
      "longitude": -0.228007,
      "elevation": 8.929053
    },
    {
      "latitude": 51.487957,
      "longitude": -0.22799,
      "elevation": 8.854913
    },
    {
      "latitude": 51.487934,
      "longitude": -0.227972,
      "elevation": 8.848133
    },
    {
      "latitude": 51.487915,
      "longitude": -0.227953,
      "elevation": 8.833827
    },
    {
      "latitude": 51.487892,
      "longitude": -0.227933,
      "elevation": 8.808992
    },
    {
      "latitude": 51.48787,
      "longitude": -0.227912,
      "elevation": 8.780781
    },
    {
      "latitude": 51.487846,
      "longitude": -0.22789,
      "elevation": 8.743693
    },
    {
      "latitude": 51.487823,
      "longitude": -0.227867,
      "elevation": 8.712954
    },
    {
      "latitude": 51.487797,
      "longitude": -0.227843,
      "elevation": 8.66463
    },
    {
      "latitude": 51.48777,
      "longitude": -0.227818,
      "elevation": 8.617412
    },
    {
      "latitude": 51.487747,
      "longitude": -0.227793,
      "elevation": 8.563883
    },
    {
      "latitude": 51.48772,
      "longitude": -0.227768,
      "elevation": 8.512541
    },
    {
      "latitude": 51.487694,
      "longitude": -0.227742,
      "elevation": 8.456598
    },
    {
      "latitude": 51.48767,
      "longitude": -0.227718,
      "elevation": 8.39944
    },
    {
      "latitude": 51.487644,
      "longitude": -0.227695,
      "elevation": 8.340654
    },
    {
      "latitude": 51.48762,
      "longitude": -0.227673,
      "elevation": 8.286411
    },
    {
      "latitude": 51.4876,
      "longitude": -0.227652,
      "elevation": 8.236768
    },
    {
      "latitude": 51.487583,
      "longitude": -0.22763,
      "elevation": 8.194161
    },
    {
      "latitude": 51.487568,
      "longitude": -0.227604,
      "elevation": 8.156236
    },
    {
      "latitude": 51.487553,
      "longitude": -0.227576,
      "elevation": 8.120313
    },
    {
      "latitude": 51.487537,
      "longitude": -0.227543,
      "elevation": 8.084684
    },
    {
      "latitude": 51.48752,
      "longitude": -0.227509,
      "elevation": 8.041556
    },
    {
      "latitude": 51.4875,
      "longitude": -0.227473,
      "elevation": 7.9963007
    },
    {
      "latitude": 51.48748,
      "longitude": -0.227438,
      "elevation": 7.952694
    },
    {
      "latitude": 51.48746,
      "longitude": -0.227404,
      "elevation": 7.9088836
    },
    {
      "latitude": 51.48744,
      "longitude": -0.227371,
      "elevation": 7.8644047
    },
    {
      "latitude": 51.487415,
      "longitude": -0.227338,
      "elevation": 7.8196588
    },
    {
      "latitude": 51.487392,
      "longitude": -0.227305,
      "elevation": 7.7748833
    },
    {
      "latitude": 51.48737,
      "longitude": -0.227272,
      "elevation": 7.7261477
    },
    {
      "latitude": 51.48734,
      "longitude": -0.227238,
      "elevation": 7.676095
    },
    {
      "latitude": 51.487312,
      "longitude": -0.227204,
      "elevation": 7.6287136
    },
    {
      "latitude": 51.487286,
      "longitude": -0.227172,
      "elevation": 7.5852094
    },
    {
      "latitude": 51.487263,
      "longitude": -0.227142,
      "elevation": 7.5511656
    },
    {
      "latitude": 51.48724,
      "longitude": -0.227115,
      "elevation": 7.517926
    },
    {
      "latitude": 51.487217,
      "longitude": -0.22709,
      "elevation": 7.485577
    },
    {
      "latitude": 51.487186,
      "longitude": -0.227067,
      "elevation": 7.444677
    },
    {
      "latitude": 51.48716,
      "longitude": -0.227045,
      "elevation": 7.400623
    },
    {
      "latitude": 51.48713,
      "longitude": -0.227021,
      "elevation": 7.3576736
    },
    {
      "latitude": 51.487103,
      "longitude": -0.226995,
      "elevation": 7.3203273
    },
    {
      "latitude": 51.487076,
      "longitude": -0.226966,
      "elevation": 7.2858644
    },
    {
      "latitude": 51.487053,
      "longitude": -0.226937,
      "elevation": 7.263617
    },
    {
      "latitude": 51.487026,
      "longitude": -0.22691,
      "elevation": 7.2317796
    },
    {
      "latitude": 51.487,
      "longitude": -0.226884,
      "elevation": 7.202121
    },
    {
      "latitude": 51.48697,
      "longitude": -0.22686,
      "elevation": 7.1539736
    },
    {
      "latitude": 51.48694,
      "longitude": -0.226837,
      "elevation": 7.1072454
    },
    {
      "latitude": 51.486908,
      "longitude": -0.226814,
      "elevation": 7.05422
    },
    {
      "latitude": 51.48688,
      "longitude": -0.226792,
      "elevation": 6.9956403
    },
    {
      "latitude": 51.48685,
      "longitude": -0.226771,
      "elevation": 6.9259367
    },
    {
      "latitude": 51.486824,
      "longitude": -0.226749,
      "elevation": 6.941323
    },
    {
      "latitude": 51.486797,
      "longitude": -0.226728,
      "elevation": 6.952805
    },
    {
      "latitude": 51.48677,
      "longitude": -0.226707,
      "elevation": 6.8926387
    },
    {
      "latitude": 51.486744,
      "longitude": -0.226686,
      "elevation": 6.984931
    },
    {
      "latitude": 51.486717,
      "longitude": -0.226667,
      "elevation": 7.0461726
    },
    {
      "latitude": 51.48669,
      "longitude": -0.226651,
      "elevation": 7.0588613
    },
    {
      "latitude": 51.486664,
      "longitude": -0.226636,
      "elevation": 7.069664
    },
    {
      "latitude": 51.486637,
      "longitude": -0.22662,
      "elevation": 7.1781187
    },
    {
      "latitude": 51.48661,
      "longitude": -0.226603,
      "elevation": 7.293868
    },
    {
      "latitude": 51.486584,
      "longitude": -0.226585,
      "elevation": 7.414
    },
    {
      "latitude": 51.486553,
      "longitude": -0.22657,
      "elevation": 7.5315447
    },
    {
      "latitude": 51.486523,
      "longitude": -0.226557,
      "elevation": 7.6431003
    },
    {
      "latitude": 51.486496,
      "longitude": -0.226544,
      "elevation": 7.758556
    },
    {
      "latitude": 51.486465,
      "longitude": -0.226526,
      "elevation": 7.888016
    },
    {
      "latitude": 51.48644,
      "longitude": -0.226505,
      "elevation": 8.024915
    },
    {
      "latitude": 51.486404,
      "longitude": -0.226482,
      "elevation": 8.163251
    },
    {
      "latitude": 51.486374,
      "longitude": -0.226459,
      "elevation": 8.302614
    },
    {
      "latitude": 51.486343,
      "longitude": -0.226436,
      "elevation": 8.425588
    },
    {
      "latitude": 51.486313,
      "longitude": -0.226415,
      "elevation": 8.54173
    },
    {
      "latitude": 51.486282,
      "longitude": -0.226397,
      "elevation": 8.696401
    },
    {
      "latitude": 51.486256,
      "longitude": -0.226383,
      "elevation": 8.841518
    },
    {
      "latitude": 51.48623,
      "longitude": -0.226371,
      "elevation": 8.945175
    },
    {
      "latitude": 51.48621,
      "longitude": -0.226355,
      "elevation": 9.04914
    },
    {
      "latitude": 51.486187,
      "longitude": -0.226336,
      "elevation": 9.19389
    },
    {
      "latitude": 51.486164,
      "longitude": -0.226313,
      "elevation": 9.361099
    },
    {
      "latitude": 51.486137,
      "longitude": -0.226287,
      "elevation": 9.5113
    },
    {
      "latitude": 51.486115,
      "longitude": -0.226264,
      "elevation": 9.686025
    },
    {
      "latitude": 51.48609,
      "longitude": -0.226245,
      "elevation": 9.80226
    },
    {
      "latitude": 51.48607,
      "longitude": -0.226226,
      "elevation": 9.912058
    },
    {
      "latitude": 51.48605,
      "longitude": -0.226208,
      "elevation": 10.066692
    },
    {
      "latitude": 51.486027,
      "longitude": -0.226189,
      "elevation": 10.2257805
    },
    {
      "latitude": 51.486008,
      "longitude": -0.226168,
      "elevation": 10.34244
    },
    {
      "latitude": 51.48598,
      "longitude": -0.226145,
      "elevation": 10.314376
    },
    {
      "latitude": 51.48596,
      "longitude": -0.226122,
      "elevation": 10.076221
    },
    {
      "latitude": 51.48593,
      "longitude": -0.226101,
      "elevation": 9.519353
    },
    {
      "latitude": 51.485905,
      "longitude": -0.226086,
      "elevation": 8.756641
    },
    {
      "latitude": 51.485878,
      "longitude": -0.226071,
      "elevation": 8.548729
    },
    {
      "latitude": 51.48585,
      "longitude": -0.226056,
      "elevation": 8.436065
    },
    {
      "latitude": 51.485825,
      "longitude": -0.226035,
      "elevation": 8.681018
    },
    {
      "latitude": 51.485798,
      "longitude": -0.226012,
      "elevation": 8.803051
    },
    {
      "latitude": 51.48577,
      "longitude": -0.225991,
      "elevation": 8.827627
    },
    {
      "latitude": 51.485744,
      "longitude": -0.225974,
      "elevation": 8.936191
    },
    {
      "latitude": 51.48572,
      "longitude": -0.22596,
      "elevation": 9.044173
    },
    {
      "latitude": 51.485695,
      "longitude": -0.225943,
      "elevation": 9.281318
    },
    {
      "latitude": 51.485664,
      "longitude": -0.225924,
      "elevation": 9.550166
    },
    {
      "latitude": 51.485634,
      "longitude": -0.225903,
      "elevation": 9.846205
    },
    {
      "latitude": 51.485603,
      "longitude": -0.225883,
      "elevation": 10.160126
    },
    {
      "latitude": 51.485577,
      "longitude": -0.225865,
      "elevation": 10.160134
    },
    {
      "latitude": 51.48555,
      "longitude": -0.225848,
      "elevation": 10.319993
    },
    {
      "latitude": 51.48553,
      "longitude": -0.225829,
      "elevation": 10.479368
    },
    {
      "latitude": 51.48551,
      "longitude": -0.225808,
      "elevation": 10.4794
    },
    {
      "latitude": 51.485493,
      "longitude": -0.225782,
      "elevation": 10.479524
    },
    {
      "latitude": 51.485474,
      "longitude": -0.225754,
      "elevation": 10.479571
    },
    {
      "latitude": 51.48545,
      "longitude": -0.225722,
      "elevation": 10.32
    },
    {
      "latitude": 51.48543,
      "longitude": -0.225688,
      "elevation": 10.32
    },
    {
      "latitude": 51.48541,
      "longitude": -0.225653,
      "elevation": 10.160211
    },
    {
      "latitude": 51.485386,
      "longitude": -0.225619,
      "elevation": 10.160108
    },
    {
      "latitude": 51.485367,
      "longitude": -0.225586,
      "elevation": 10.001054
    },
    {
      "latitude": 51.485348,
      "longitude": -0.225556,
      "elevation": 9.843617
    },
    {
      "latitude": 51.48533,
      "longitude": -0.22553,
      "elevation": 9.688156
    },
    {
      "latitude": 51.48531,
      "longitude": -0.225505,
      "elevation": 9.685551
    },
    {
      "latitude": 51.48529,
      "longitude": -0.225481,
      "elevation": 9.529228
    },
    {
      "latitude": 51.485264,
      "longitude": -0.225454,
      "elevation": 9.524137
    },
    {
      "latitude": 51.48523,
      "longitude": -0.225428,
      "elevation": 9.2129
    },
    {
      "latitude": 51.4852,
      "longitude": -0.225403,
      "elevation": 9.204241
    },
    {
      "latitude": 51.48516,
      "longitude": -0.225382,
      "elevation": 9.980294
    },
    {
      "latitude": 51.485123,
      "longitude": -0.225363,
      "elevation": 10.312457
    },
    {
      "latitude": 51.485096,
      "longitude": -0.225334,
      "elevation": 10.148705
    },
    {
      "latitude": 51.485077,
      "longitude": -0.225304,
      "elevation": 10.185858
    },
    {
      "latitude": 51.485054,
      "longitude": -0.225277,
      "elevation": 9.937618
    },
    {
      "latitude": 51.48503,
      "longitude": -0.225251,
      "elevation": 9.769888
    },
    {
      "latitude": 51.485004,
      "longitude": -0.225228,
      "elevation": 9.591289
    },
    {
      "latitude": 51.484974,
      "longitude": -0.225205,
      "elevation": 9.588339
    },
    {
      "latitude": 51.484943,
      "longitude": -0.225184,
      "elevation": 9.598975
    },
    {
      "latitude": 51.484913,
      "longitude": -0.225161,
      "elevation": 9.610898
    },
    {
      "latitude": 51.484886,
      "longitude": -0.225138,
      "elevation": 9.716052
    },
    {
      "latitude": 51.48486,
      "longitude": -0.225113,
      "elevation": 9.635781
    },
    {
      "latitude": 51.484837,
      "longitude": -0.225087,
      "elevation": 9.648146
    },
    {
      "latitude": 51.48481,
      "longitude": -0.225062,
      "elevation": 9.66212
    },
    {
      "latitude": 51.484787,
      "longitude": -0.225039,
      "elevation": 9.565299
    },
    {
      "latitude": 51.484764,
      "longitude": -0.225019,
      "elevation": 9.321628
    },
    {
      "latitude": 51.484734,
      "longitude": -0.225003,
      "elevation": 9.594522
    },
    {
      "latitude": 51.484703,
      "longitude": -0.224993,
      "elevation": 10.127733
    },
    {
      "latitude": 51.48466,
      "longitude": -0.224983,
      "elevation": 10.08238
    },
    {
      "latitude": 51.48463,
      "longitude": -0.224962,
      "elevation": 10.005102
    },
    {
      "latitude": 51.4846,
      "longitude": -0.224937,
      "elevation": 9.780428
    },
    {
      "latitude": 51.48457,
      "longitude": -0.224916,
      "elevation": 9.652491
    },
    {
      "latitude": 51.48454,
      "longitude": -0.224902,
      "elevation": 8.880335
    },
    {
      "latitude": 51.4845,
      "longitude": -0.224894,
      "elevation": 8.292572
    },
    {
      "latitude": 51.484463,
      "longitude": -0.22489,
      "elevation": 7.9693236
    },
    {
      "latitude": 51.48442,
      "longitude": -0.224884,
      "elevation": 7.913412
    },
    {
      "latitude": 51.484386,
      "longitude": -0.224872,
      "elevation": 8.888909
    },
    {
      "latitude": 51.484352,
      "longitude": -0.224857,
      "elevation": 9.200878
    },
    {
      "latitude": 51.48432,
      "longitude": -0.224841,
      "elevation": 8.896882
    },
    {
      "latitude": 51.48429,
      "longitude": -0.224824,
      "elevation": 8.5050955
    },
    {
      "latitude": 51.48426,
      "longitude": -0.224805,
      "elevation": 8.212642
    },
    {
      "latitude": 51.484234,
      "longitude": -0.224786,
      "elevation": 8.2314625
    },
    {
      "latitude": 51.484203,
      "longitude": -0.224768,
      "elevation": 8.249657
    },
    {
      "latitude": 51.484177,
      "longitude": -0.224751,
      "elevation": 8.193769
    },
    {
      "latitude": 51.484146,
      "longitude": -0.224737,
      "elevation": 8.256465
    },
    {
      "latitude": 51.484116,
      "longitude": -0.224725,
      "elevation": 8.151796
    },
    {
      "latitude": 51.48408,
      "longitude": -0.224716,
      "elevation": 8.300761
    },
    {
      "latitude": 51.48405,
      "longitude": -0.224707,
      "elevation": 8.024383
    },
    {
      "latitude": 51.484016,
      "longitude": -0.224697,
      "elevation": 8.164303
    },
    {
      "latitude": 51.483982,
      "longitude": -0.224686,
      "elevation": 7.968842
    },
    {
      "latitude": 51.48395,
      "longitude": -0.224674,
      "elevation": 7.8665843
    },
    {
      "latitude": 51.483925,
      "longitude": -0.22466,
      "elevation": 7.768945
    },
    {
      "latitude": 51.4839,
      "longitude": -0.224647,
      "elevation": 7.5278664
    },
    {
      "latitude": 51.483875,
      "longitude": -0.224637,
      "elevation": 7.460146
    },
    {
      "latitude": 51.483856,
      "longitude": -0.224631,
      "elevation": 7.300085
    },
    {
      "latitude": 51.483833,
      "longitude": -0.224628,
      "elevation": 7.257283
    },
    {
      "latitude": 51.48381,
      "longitude": -0.224621,
      "elevation": 7.1963425
    },
    {
      "latitude": 51.483784,
      "longitude": -0.224607,
      "elevation": 7.130058
    },
    {
      "latitude": 51.483757,
      "longitude": -0.224588,
      "elevation": 7.087805
    },
    {
      "latitude": 51.483727,
      "longitude": -0.224564,
      "elevation": 7.0267415
    },
    {
      "latitude": 51.483692,
      "longitude": -0.224538,
      "elevation": 6.9769635
    },
    {
      "latitude": 51.48366,
      "longitude": -0.224511,
      "elevation": 6.897942
    },
    {
      "latitude": 51.48363,
      "longitude": -0.224485,
      "elevation": 6.834697
    },
    {
      "latitude": 51.483597,
      "longitude": -0.22446,
      "elevation": 6.810573
    },
    {
      "latitude": 51.483566,
      "longitude": -0.224439,
      "elevation": 6.7354846
    },
    {
      "latitude": 51.483536,
      "longitude": -0.22442,
      "elevation": 6.6841903
    },
    {
      "latitude": 51.483505,
      "longitude": -0.224403,
      "elevation": 6.6868277
    },
    {
      "latitude": 51.48348,
      "longitude": -0.224389,
      "elevation": 6.7159595
    },
    {
      "latitude": 51.483444,
      "longitude": -0.224375,
      "elevation": 6.835302
    },
    {
      "latitude": 51.483414,
      "longitude": -0.224362,
      "elevation": 6.873492
    },
    {
      "latitude": 51.48338,
      "longitude": -0.224349,
      "elevation": 6.7709236
    },
    {
      "latitude": 51.48335,
      "longitude": -0.224337,
      "elevation": 6.673382
    },
    {
      "latitude": 51.483315,
      "longitude": -0.224326,
      "elevation": 6.5933743
    },
    {
      "latitude": 51.483284,
      "longitude": -0.224316,
      "elevation": 6.5309124
    },
    {
      "latitude": 51.483253,
      "longitude": -0.224306,
      "elevation": 6.522781
    },
    {
      "latitude": 51.483227,
      "longitude": -0.224296,
      "elevation": 6.5146875
    },
    {
      "latitude": 51.483196,
      "longitude": -0.224285,
      "elevation": 6.50583
    },
    {
      "latitude": 51.483166,
      "longitude": -0.224272,
      "elevation": 6.445209
    },
    {
      "latitude": 51.48314,
      "longitude": -0.224257,
      "elevation": 6.349108
    },
    {
      "latitude": 51.483112,
      "longitude": -0.224241,
      "elevation": 6.29996
    },
    {
      "latitude": 51.48308,
      "longitude": -0.224226,
      "elevation": 6.2553444
    },
    {
      "latitude": 51.48305,
      "longitude": -0.224211,
      "elevation": 6.1712255
    },
    {
      "latitude": 51.48302,
      "longitude": -0.224198,
      "elevation": 6.1574254
    },
    {
      "latitude": 51.48299,
      "longitude": -0.224189,
      "elevation": 6.1681547
    },
    {
      "latitude": 51.482964,
      "longitude": -0.224185,
      "elevation": 6.1640105
    },
    {
      "latitude": 51.482937,
      "longitude": -0.224182,
      "elevation": 6.1077933
    },
    {
      "latitude": 51.48291,
      "longitude": -0.224176,
      "elevation": 6.101225
    },
    {
      "latitude": 51.482883,
      "longitude": -0.224165,
      "elevation": 6.122515
    },
    {
      "latitude": 51.482857,
      "longitude": -0.224152,
      "elevation": 6.090626
    },
    {
      "latitude": 51.482822,
      "longitude": -0.224138,
      "elevation": 6.059726
    },
    {
      "latitude": 51.48279,
      "longitude": -0.224127,
      "elevation": 6.033937
    },
    {
      "latitude": 51.482758,
      "longitude": -0.224118,
      "elevation": 6.0379577
    },
    {
      "latitude": 51.482727,
      "longitude": -0.224109,
      "elevation": 6.1115317
    },
    {
      "latitude": 51.4827,
      "longitude": -0.224101,
      "elevation": 6.133563
    },
    {
      "latitude": 51.482674,
      "longitude": -0.224092,
      "elevation": 6.124945
    },
    {
      "latitude": 51.482647,
      "longitude": -0.224082,
      "elevation": 6.115395
    },
    {
      "latitude": 51.482616,
      "longitude": -0.22407,
      "elevation": 6.180771
    },
    {
      "latitude": 51.482582,
      "longitude": -0.224057,
      "elevation": 6.217172
    },
    {
      "latitude": 51.48255,
      "longitude": -0.224045,
      "elevation": 6.1591196
    },
    {
      "latitude": 51.482525,
      "longitude": -0.224034,
      "elevation": 6.1070333
    },
    {
      "latitude": 51.482502,
      "longitude": -0.224019,
      "elevation": 6.055843
    },
    {
      "latitude": 51.482487,
      "longitude": -0.223994,
      "elevation": 6.0617137
    },
    {
      "latitude": 51.48248,
      "longitude": -0.223955,
      "elevation": 6.03032
    },
    {
      "latitude": 51.482475,
      "longitude": -0.223908,
      "elevation": 5.9659066
    },
    {
      "latitude": 51.48247,
      "longitude": -0.22386,
      "elevation": 5.922429
    },
    {
      "latitude": 51.482468,
      "longitude": -0.223817,
      "elevation": 5.86843
    },
    {
      "latitude": 51.482464,
      "longitude": -0.223776,
      "elevation": 5.840485
    },
    {
      "latitude": 51.48246,
      "longitude": -0.223733,
      "elevation": 5.7930636
    },
    {
      "latitude": 51.482464,
      "longitude": -0.223683,
      "elevation": 5.714126
    },
    {
      "latitude": 51.48247,
      "longitude": -0.22363,
      "elevation": 5.6574574
    },
    {
      "latitude": 51.48248,
      "longitude": -0.223576,
      "elevation": 5.5466733
    },
    {
      "latitude": 51.482487,
      "longitude": -0.223523,
      "elevation": 5.4774246
    },
    {
      "latitude": 51.48249,
      "longitude": -0.223475,
      "elevation": 5.336442
    },
    {
      "latitude": 51.482494,
      "longitude": -0.223432,
      "elevation": 5.286673
    },
    {
      "latitude": 51.482494,
      "longitude": -0.223396,
      "elevation": 5.27389
    },
    {
      "latitude": 51.48249,
      "longitude": -0.223364,
      "elevation": 5.2448626
    },
    {
      "latitude": 51.48248,
      "longitude": -0.223336,
      "elevation": 5.259579
    },
    {
      "latitude": 51.482456,
      "longitude": -0.223309,
      "elevation": 5.405758
    },
    {
      "latitude": 51.48243,
      "longitude": -0.223288,
      "elevation": 5.429484
    },
    {
      "latitude": 51.4824,
      "longitude": -0.223278,
      "elevation": 5.5048623
    },
    {
      "latitude": 51.482376,
      "longitude": -0.223277,
      "elevation": 5.647537
    },
    {
      "latitude": 51.482353,
      "longitude": -0.223274,
      "elevation": 5.7364883
    },
    {
      "latitude": 51.482327,
      "longitude": -0.223259,
      "elevation": 5.9214773
    },
    {
      "latitude": 51.482304,
      "longitude": -0.223248,
      "elevation": 6.136653
    },
    {
      "latitude": 51.48228,
      "longitude": -0.223241,
      "elevation": 6.2596626
    },
    {
      "latitude": 51.482258,
      "longitude": -0.223233,
      "elevation": 6.661998
    },
    {
      "latitude": 51.48223,
      "longitude": -0.223219,
      "elevation": 7.1207047
    },
    {
      "latitude": 51.4822,
      "longitude": -0.223202,
      "elevation": 7.439957
    },
    {
      "latitude": 51.482166,
      "longitude": -0.223184,
      "elevation": 7.59932
    },
    {
      "latitude": 51.48214,
      "longitude": -0.22317,
      "elevation": 8.058473
    },
    {
      "latitude": 51.48211,
      "longitude": -0.22316,
      "elevation": 8.338376
    },
    {
      "latitude": 51.48208,
      "longitude": -0.223152,
      "elevation": 8.064586
    },
    {
      "latitude": 51.48205,
      "longitude": -0.223146,
      "elevation": 8.067082
    },
    {
      "latitude": 51.482025,
      "longitude": -0.223143,
      "elevation": 8.355604
    },
    {
      "latitude": 51.482,
      "longitude": -0.22314,
      "elevation": 8.929659
    },
    {
      "latitude": 51.48197,
      "longitude": -0.223139,
      "elevation": 9.17736
    },
    {
      "latitude": 51.481945,
      "longitude": -0.223143,
      "elevation": 9.360019
    },
    {
      "latitude": 51.481926,
      "longitude": -0.223158,
      "elevation": 9.518209
    },
    {
      "latitude": 51.481915,
      "longitude": -0.223186,
      "elevation": 9.555895
    },
    {
      "latitude": 51.481903,
      "longitude": -0.223222,
      "elevation": 9.587667
    },
    {
      "latitude": 51.481888,
      "longitude": -0.223258,
      "elevation": 9.63733
    },
    {
      "latitude": 51.48187,
      "longitude": -0.223288,
      "elevation": 9.684338
    },
    {
      "latitude": 51.481853,
      "longitude": -0.223317,
      "elevation": 9.720768
    },
    {
      "latitude": 51.481846,
      "longitude": -0.223347,
      "elevation": 9.8158
    },
    {
      "latitude": 51.481827,
      "longitude": -0.223376,
      "elevation": 9.93576
    },
    {
      "latitude": 51.481808,
      "longitude": -0.223399,
      "elevation": 10.083102
    },
    {
      "latitude": 51.481785,
      "longitude": -0.223402,
      "elevation": 9.758831
    },
    {
      "latitude": 51.481762,
      "longitude": -0.22341,
      "elevation": 9.157953
    },
    {
      "latitude": 51.48174,
      "longitude": -0.223428,
      "elevation": 8.719544
    },
    {
      "latitude": 51.481716,
      "longitude": -0.223458,
      "elevation": 7.723014
    },
    {
      "latitude": 51.481697,
      "longitude": -0.223495,
      "elevation": 7.827552
    },
    {
      "latitude": 51.481674,
      "longitude": -0.223538,
      "elevation": 7.995612
    },
    {
      "latitude": 51.48165,
      "longitude": -0.223582,
      "elevation": 8.120714
    },
    {
      "latitude": 51.481632,
      "longitude": -0.223623,
      "elevation": 8.29527
    },
    {
      "latitude": 51.481613,
      "longitude": -0.223663,
      "elevation": 8.390405
    },
    {
      "latitude": 51.481598,
      "longitude": -0.223705,
      "elevation": 8.6448
    },
    {
      "latitude": 51.481586,
      "longitude": -0.22375,
      "elevation": 8.918579
    },
    {
      "latitude": 51.48157,
      "longitude": -0.223793,
      "elevation": 9.110253
    },
    {
      "latitude": 51.48156,
      "longitude": -0.22383,
      "elevation": 9.269495
    },
    {
      "latitude": 51.48154,
      "longitude": -0.223857,
      "elevation": 9.349972
    },
    {
      "latitude": 51.481514,
      "longitude": -0.223874,
      "elevation": 9.346236
    },
    {
      "latitude": 51.481487,
      "longitude": -0.223883,
      "elevation": 9.284128
    },
    {
      "latitude": 51.481457,
      "longitude": -0.223887,
      "elevation": 9.17753
    },
    {
      "latitude": 51.481426,
      "longitude": -0.223886,
      "elevation": 9.065213
    },
    {
      "latitude": 51.4814,
      "longitude": -0.223884,
      "elevation": 8.968537
    },
    {
      "latitude": 51.481373,
      "longitude": -0.223882,
      "elevation": 8.844944
    },
    {
      "latitude": 51.481342,
      "longitude": -0.223879,
      "elevation": 8.721313
    },
    {
      "latitude": 51.481316,
      "longitude": -0.223875,
      "elevation": 8.574962
    },
    {
      "latitude": 51.481285,
      "longitude": -0.223868,
      "elevation": 8.42009
    },
    {
      "latitude": 51.481255,
      "longitude": -0.223859,
      "elevation": 8.266189
    },
    {
      "latitude": 51.481228,
      "longitude": -0.223852,
      "elevation": 8.129831
    },
    {
      "latitude": 51.4812,
      "longitude": -0.223847,
      "elevation": 8.011798
    },
    {
      "latitude": 51.481174,
      "longitude": -0.223845,
      "elevation": 7.909742
    },
    {
      "latitude": 51.48115,
      "longitude": -0.223845,
      "elevation": 7.821179
    },
    {
      "latitude": 51.481125,
      "longitude": -0.223847,
      "elevation": 7.7256737
    },
    {
      "latitude": 51.481094,
      "longitude": -0.22385,
      "elevation": 7.650583
    },
    {
      "latitude": 51.481068,
      "longitude": -0.223855,
      "elevation": 7.600254
    },
    {
      "latitude": 51.481033,
      "longitude": -0.223858,
      "elevation": 7.4611745
    },
    {
      "latitude": 51.481003,
      "longitude": -0.223858,
      "elevation": 7.3278775
    },
    {
      "latitude": 51.480972,
      "longitude": -0.22385,
      "elevation": 7.187145
    },
    {
      "latitude": 51.480946,
      "longitude": -0.223833,
      "elevation": 7.0592794
    },
    {
      "latitude": 51.48092,
      "longitude": -0.223818,
      "elevation": 6.9286795
    },
    {
      "latitude": 51.480896,
      "longitude": -0.223814,
      "elevation": 6.857364
    },
    {
      "latitude": 51.480865,
      "longitude": -0.223816,
      "elevation": 6.807727
    },
    {
      "latitude": 51.48083,
      "longitude": -0.22382,
      "elevation": 6.821168
    },
    {
      "latitude": 51.4808,
      "longitude": -0.223819,
      "elevation": 6.671825
    },
    {
      "latitude": 51.48077,
      "longitude": -0.223811,
      "elevation": 6.530845
    },
    {
      "latitude": 51.48074,
      "longitude": -0.223805,
      "elevation": 6.3944983
    },
    {
      "latitude": 51.480705,
      "longitude": -0.223806,
      "elevation": 6.3312902
    },
    {
      "latitude": 51.480675,
      "longitude": -0.223809,
      "elevation": 6.2312036
    },
    {
      "latitude": 51.480644,
      "longitude": -0.223811,
      "elevation": 6.088698
    },
    {
      "latitude": 51.480614,
      "longitude": -0.22381,
      "elevation": 6.065644
    },
    {
      "latitude": 51.48059,
      "longitude": -0.223806,
      "elevation": 5.8453846
    },
    {
      "latitude": 51.480568,
      "longitude": -0.223801,
      "elevation": 5.7375426
    },
    {
      "latitude": 51.480545,
      "longitude": -0.223794,
      "elevation": 5.6752806
    },
    {
      "latitude": 51.480515,
      "longitude": -0.223787,
      "elevation": 5.4820294
    },
    {
      "latitude": 51.480484,
      "longitude": -0.223781,
      "elevation": 5.3097286
    },
    {
      "latitude": 51.480453,
      "longitude": -0.223775,
      "elevation": 5.2014565
    },
    {
      "latitude": 51.480427,
      "longitude": -0.223772,
      "elevation": 5.1171885
    },
    {
      "latitude": 51.480396,
      "longitude": -0.223771,
      "elevation": 5.0263243
    },
    {
      "latitude": 51.480366,
      "longitude": -0.223773,
      "elevation": 4.9443197
    },
    {
      "latitude": 51.48033,
      "longitude": -0.223783,
      "elevation": 4.852183
    },
    {
      "latitude": 51.480297,
      "longitude": -0.223796,
      "elevation": 4.6667714
    },
    {
      "latitude": 51.480267,
      "longitude": -0.223803,
      "elevation": 4.5000706
    },
    {
      "latitude": 51.480232,
      "longitude": -0.223801,
      "elevation": 4.4160156
    },
    {
      "latitude": 51.4802,
      "longitude": -0.223794,
      "elevation": 4.2994747
    },
    {
      "latitude": 51.480167,
      "longitude": -0.223788,
      "elevation": 4.359852
    },
    {
      "latitude": 51.480133,
      "longitude": -0.223784,
      "elevation": 4.230615
    },
    {
      "latitude": 51.480103,
      "longitude": -0.22378,
      "elevation": 4.173079
    },
    {
      "latitude": 51.48007,
      "longitude": -0.223778,
      "elevation": 4.112941
    },
    {
      "latitude": 51.480038,
      "longitude": -0.223776,
      "elevation": 4.0599666
    },
    {
      "latitude": 51.480003,
      "longitude": -0.223773,
      "elevation": 4.01555
    },
    {
      "latitude": 51.479973,
      "longitude": -0.223771,
      "elevation": 4.012348
    },
    {
      "latitude": 51.479942,
      "longitude": -0.223768,
      "elevation": 3.6847765
    },
    {
      "latitude": 51.47991,
      "longitude": -0.223764,
      "elevation": 3.773617
    },
    {
      "latitude": 51.47988,
      "longitude": -0.22376,
      "elevation": 3.7609622
    },
    {
      "latitude": 51.47985,
      "longitude": -0.223755,
      "elevation": 3.9185686
    },
    {
      "latitude": 51.47982,
      "longitude": -0.223749,
      "elevation": 4.1877093
    },
    {
      "latitude": 51.47979,
      "longitude": -0.223742,
      "elevation": 4.1182823
    },
    {
      "latitude": 51.47976,
      "longitude": -0.223734,
      "elevation": 3.9217029
    },
    {
      "latitude": 51.47973,
      "longitude": -0.223721,
      "elevation": 3.7506897
    },
    {
      "latitude": 51.479702,
      "longitude": -0.223705,
      "elevation": 3.7047632
    },
    {
      "latitude": 51.479675,
      "longitude": -0.223695,
      "elevation": 3.785727
    },
    {
      "latitude": 51.47965,
      "longitude": -0.223697,
      "elevation": 3.6571174
    },
    {
      "latitude": 51.479618,
      "longitude": -0.2237,
      "elevation": 3.4034915
    },
    {
      "latitude": 51.47959,
      "longitude": -0.223702,
      "elevation": 3.0938072
    },
    {
      "latitude": 51.47956,
      "longitude": -0.2237,
      "elevation": 2.80816
    },
    {
      "latitude": 51.479527,
      "longitude": -0.223695,
      "elevation": 2.5426028
    },
    {
      "latitude": 51.479496,
      "longitude": -0.223689,
      "elevation": 2.227682
    },
    {
      "latitude": 51.479465,
      "longitude": -0.223683,
      "elevation": 1.9632162
    },
    {
      "latitude": 51.47943,
      "longitude": -0.223682,
      "elevation": 1.6578995
    },
    {
      "latitude": 51.4794,
      "longitude": -0.223682,
      "elevation": 1.3116142
    },
    {
      "latitude": 51.479366,
      "longitude": -0.223681,
      "elevation": 0.96235645
    },
    {
      "latitude": 51.479336,
      "longitude": -0.223678,
      "elevation": 0.6584572
    },
    {
      "latitude": 51.4793,
      "longitude": -0.223675,
      "elevation": 0.3569684
    },
    {
      "latitude": 51.47927,
      "longitude": -0.223674,
      "elevation": 0.021826329
    },
    {
      "latitude": 51.47924,
      "longitude": -0.223677,
      "elevation": -0.36290905
    },
    {
      "latitude": 51.47921,
      "longitude": -0.223682,
      "elevation": -0.7823056
    },
    {
      "latitude": 51.47918,
      "longitude": -0.223685,
      "elevation": -1.1823792
    },
    {
      "latitude": 51.47915,
      "longitude": -0.223685,
      "elevation": -1.1312892
    },
    {
      "latitude": 51.47912,
      "longitude": -0.223685,
      "elevation": -0.8267167
    },
    {
      "latitude": 51.47909,
      "longitude": -0.223687,
      "elevation": -0.60549825
    },
    {
      "latitude": 51.47906,
      "longitude": -0.223684,
      "elevation": -0.2518799
    },
    {
      "latitude": 51.47903,
      "longitude": -0.223677,
      "elevation": 0.19027707
    },
    {
      "latitude": 51.478996,
      "longitude": -0.22367,
      "elevation": 0.61115485
    },
    {
      "latitude": 51.47897,
      "longitude": -0.223668,
      "elevation": 0.9214523
    },
    {
      "latitude": 51.478943,
      "longitude": -0.223668,
      "elevation": 1.1801995
    },
    {
      "latitude": 51.478912,
      "longitude": -0.223668,
      "elevation": 1.4386668
    },
    {
      "latitude": 51.47888,
      "longitude": -0.223667,
      "elevation": 1.7424486
    },
    {
      "latitude": 51.47885,
      "longitude": -0.223665,
      "elevation": 2.0472043
    },
    {
      "latitude": 51.47882,
      "longitude": -0.223663,
      "elevation": 2.3322937
    },
    {
      "latitude": 51.478794,
      "longitude": -0.223663,
      "elevation": 2.5609848
    },
    {
      "latitude": 51.478767,
      "longitude": -0.223662,
      "elevation": 2.7401366
    },
    {
      "latitude": 51.47874,
      "longitude": -0.223661,
      "elevation": 2.8986003
    },
    {
      "latitude": 51.47871,
      "longitude": -0.223657,
      "elevation": 3.0386767
    },
    {
      "latitude": 51.47868,
      "longitude": -0.223652,
      "elevation": 3.2096162
    },
    {
      "latitude": 51.478645,
      "longitude": -0.223647,
      "elevation": 3.2034202
    },
    {
      "latitude": 51.47862,
      "longitude": -0.223644,
      "elevation": 3.2520747
    },
    {
      "latitude": 51.478592,
      "longitude": -0.223643,
      "elevation": 3.2728238
    },
    {
      "latitude": 51.478565,
      "longitude": -0.223643,
      "elevation": 3.589178
    },
    {
      "latitude": 51.478535,
      "longitude": -0.223643,
      "elevation": 3.439944
    },
    {
      "latitude": 51.478508,
      "longitude": -0.223642,
      "elevation": 3.4405742
    },
    {
      "latitude": 51.478477,
      "longitude": -0.223642,
      "elevation": 3.1576228
    },
    {
      "latitude": 51.478447,
      "longitude": -0.223641,
      "elevation": 3.2112238
    },
    {
      "latitude": 51.478416,
      "longitude": -0.223639,
      "elevation": 3.2959588
    },
    {
      "latitude": 51.478386,
      "longitude": -0.223638,
      "elevation": 3.505495
    },
    {
      "latitude": 51.478355,
      "longitude": -0.223635,
      "elevation": 3.4946463
    },
    {
      "latitude": 51.47833,
      "longitude": -0.223633,
      "elevation": 3.5935724
    },
    {
      "latitude": 51.478294,
      "longitude": -0.22363,
      "elevation": 3.5765777
    },
    {
      "latitude": 51.478268,
      "longitude": -0.223628,
      "elevation": 3.563904
    },
    {
      "latitude": 51.478237,
      "longitude": -0.223626,
      "elevation": 3.6216872
    },
    {
      "latitude": 51.478207,
      "longitude": -0.223625,
      "elevation": 3.6804776
    },
    {
      "latitude": 51.47818,
      "longitude": -0.223625,
      "elevation": 3.6611865
    },
    {
      "latitude": 51.47815,
      "longitude": -0.223623,
      "elevation": 3.6508298
    },
    {
      "latitude": 51.478123,
      "longitude": -0.223616,
      "elevation": 3.7103233
    },
    {
      "latitude": 51.478096,
      "longitude": -0.223603,
      "elevation": 3.716123
    },
    {
      "latitude": 51.47807,
      "longitude": -0.223591,
      "elevation": 3.7499368
    },
    {
      "latitude": 51.478043,
      "longitude": -0.223584,
      "elevation": 3.7770774
    },
    {
      "latitude": 51.47801,
      "longitude": -0.223582,
      "elevation": 3.8566566
    },
    {
      "latitude": 51.477978,
      "longitude": -0.223581,
      "elevation": 3.9981885
    },
    {
      "latitude": 51.477947,
      "longitude": -0.22358,
      "elevation": 4.014395
    },
    {
      "latitude": 51.477917,
      "longitude": -0.223576,
      "elevation": 4.141635
    },
    {
      "latitude": 51.47789,
      "longitude": -0.22357,
      "elevation": 4.007611
    },
    {
      "latitude": 51.47786,
      "longitude": -0.223564,
      "elevation": 3.9063532
    },
    {
      "latitude": 51.477825,
      "longitude": -0.223558,
      "elevation": 3.929552
    },
    {
      "latitude": 51.477795,
      "longitude": -0.223552,
      "elevation": 3.9151356
    },
    {
      "latitude": 51.477764,
      "longitude": -0.223546,
      "elevation": 3.9231725
    },
    {
      "latitude": 51.477734,
      "longitude": -0.223539,
      "elevation": 3.9064174
    },
    {
      "latitude": 51.477703,
      "longitude": -0.223533,
      "elevation": 3.9151027
    },
    {
      "latitude": 51.477673,
      "longitude": -0.223528,
      "elevation": 3.9342246
    },
    {
      "latitude": 51.477642,
      "longitude": -0.223526,
      "elevation": 3.9436686
    },
    {
      "latitude": 51.47761,
      "longitude": -0.223525,
      "elevation": 3.95764
    },
    {
      "latitude": 51.477577,
      "longitude": -0.223522,
      "elevation": 3.9751122
    },
    {
      "latitude": 51.477547,
      "longitude": -0.223516,
      "elevation": 3.9929879
    },
    {
      "latitude": 51.477516,
      "longitude": -0.223508,
      "elevation": 4.009373
    },
    {
      "latitude": 51.47748,
      "longitude": -0.223498,
      "elevation": 4.024991
    },
    {
      "latitude": 51.477448,
      "longitude": -0.223489,
      "elevation": 4.0565023
    },
    {
      "latitude": 51.477413,
      "longitude": -0.22348,
      "elevation": 4.0928755
    },
    {
      "latitude": 51.477383,
      "longitude": -0.223471,
      "elevation": 4.141546
    },
    {
      "latitude": 51.477352,
      "longitude": -0.223462,
      "elevation": 4.176863
    },
    {
      "latitude": 51.47732,
      "longitude": -0.223452,
      "elevation": 4.2261863
    },
    {
      "latitude": 51.477295,
      "longitude": -0.223442,
      "elevation": 4.2842646
    },
    {
      "latitude": 51.477264,
      "longitude": -0.22343,
      "elevation": 4.3506413
    },
    {
      "latitude": 51.477238,
      "longitude": -0.223417,
      "elevation": 4.419351
    },
    {
      "latitude": 51.477207,
      "longitude": -0.223402,
      "elevation": 4.5075135
    },
    {
      "latitude": 51.47718,
      "longitude": -0.223387,
      "elevation": 4.6060977
    },
    {
      "latitude": 51.47715,
      "longitude": -0.223372,
      "elevation": 4.708894
    },
    {
      "latitude": 51.477123,
      "longitude": -0.223357,
      "elevation": 4.823548
    },
    {
      "latitude": 51.477093,
      "longitude": -0.223343,
      "elevation": 4.9487653
    },
    {
      "latitude": 51.477062,
      "longitude": -0.223331,
      "elevation": 5.0669823
    },
    {
      "latitude": 51.47703,
      "longitude": -0.223325,
      "elevation": 5.155747
    },
    {
      "latitude": 51.477,
      "longitude": -0.223326,
      "elevation": 5.304237
    },
    {
      "latitude": 51.47697,
      "longitude": -0.223331,
      "elevation": 5.456004
    },
    {
      "latitude": 51.47694,
      "longitude": -0.223335,
      "elevation": 5.5345454
    },
    {
      "latitude": 51.476913,
      "longitude": -0.223335,
      "elevation": 5.5619006
    },
    {
      "latitude": 51.476887,
      "longitude": -0.223331,
      "elevation": 5.625283
    },
    {
      "latitude": 51.47686,
      "longitude": -0.223325,
      "elevation": 5.6385884
    },
    {
      "latitude": 51.476837,
      "longitude": -0.223316,
      "elevation": 5.6882906
    },
    {
      "latitude": 51.476814,
      "longitude": -0.223305,
      "elevation": 5.7290373
    },
    {
      "latitude": 51.476788,
      "longitude": -0.223291,
      "elevation": 5.814404
    },
    {
      "latitude": 51.476757,
      "longitude": -0.223276,
      "elevation": 5.8410244
    },
    {
      "latitude": 51.476727,
      "longitude": -0.223259,
      "elevation": 5.890017
    },
    {
      "latitude": 51.476696,
      "longitude": -0.223244,
      "elevation": 5.954858
    },
    {
      "latitude": 51.47667,
      "longitude": -0.223231,
      "elevation": 6.0383463
    },
    {
      "latitude": 51.47664,
      "longitude": -0.223221,
      "elevation": 5.782246
    },
    {
      "latitude": 51.47661,
      "longitude": -0.223217,
      "elevation": 5.5193644
    },
    {
      "latitude": 51.476574,
      "longitude": -0.223218,
      "elevation": 5.2218366
    },
    {
      "latitude": 51.47654,
      "longitude": -0.223217,
      "elevation": 4.9347415
    },
    {
      "latitude": 51.476513,
      "longitude": -0.223207,
      "elevation": 4.6808877
    },
    {
      "latitude": 51.47649,
      "longitude": -0.223184,
      "elevation": 4.509723
    },
    {
      "latitude": 51.476467,
      "longitude": -0.223156,
      "elevation": 4.3586836
    },
    {
      "latitude": 51.476437,
      "longitude": -0.223134,
      "elevation": 4.1931524
    },
    {
      "latitude": 51.476402,
      "longitude": -0.22312,
      "elevation": 4.0511856
    },
    {
      "latitude": 51.476368,
      "longitude": -0.223111,
      "elevation": 3.9613738
    },
    {
      "latitude": 51.476334,
      "longitude": -0.223103,
      "elevation": 3.8858683
    },
    {
      "latitude": 51.4763,
      "longitude": -0.223092,
      "elevation": 3.6867635
    },
    {
      "latitude": 51.47627,
      "longitude": -0.22308,
      "elevation": 4.1053333
    },
    {
      "latitude": 51.476242,
      "longitude": -0.223069,
      "elevation": 4.242746
    },
    {
      "latitude": 51.476215,
      "longitude": -0.223062,
      "elevation": 4.3999977
    },
    {
      "latitude": 51.47619,
      "longitude": -0.223057,
      "elevation": 4.399149
    },
    {
      "latitude": 51.476162,
      "longitude": -0.223052,
      "elevation": 4.544348
    },
    {
      "latitude": 51.476135,
      "longitude": -0.223044,
      "elevation": 4.521904
    },
    {
      "latitude": 51.476105,
      "longitude": -0.223035,
      "elevation": 4.6067696
    },
    {
      "latitude": 51.47607,
      "longitude": -0.223026,
      "elevation": 4.537357
    },
    {
      "latitude": 51.47604,
      "longitude": -0.223018,
      "elevation": 4.2529745
    },
    {
      "latitude": 51.47601,
      "longitude": -0.223011,
      "elevation": 4.350126
    },
    {
      "latitude": 51.47598,
      "longitude": -0.223001,
      "elevation": 4.303097
    },
    {
      "latitude": 51.47595,
      "longitude": -0.222989,
      "elevation": 3.9978673
    },
    {
      "latitude": 51.475918,
      "longitude": -0.222975,
      "elevation": 4.0661693
    },
    {
      "latitude": 51.475887,
      "longitude": -0.22296,
      "elevation": 4.0157776
    },
    {
      "latitude": 51.47586,
      "longitude": -0.222946,
      "elevation": 3.825789
    },
    {
      "latitude": 51.47583,
      "longitude": -0.222932,
      "elevation": 3.694208
    },
    {
      "latitude": 51.475803,
      "longitude": -0.222919,
      "elevation": 3.7306585
    },
    {
      "latitude": 51.47578,
      "longitude": -0.222905,
      "elevation": 3.8058002
    },
    {
      "latitude": 51.475758,
      "longitude": -0.222891,
      "elevation": 3.846451
    },
    {
      "latitude": 51.475735,
      "longitude": -0.222879,
      "elevation": 3.8403347
    },
    {
      "latitude": 51.475708,
      "longitude": -0.222867,
      "elevation": 3.868738
    },
    {
      "latitude": 51.47568,
      "longitude": -0.222856,
      "elevation": 3.845631
    },
    {
      "latitude": 51.475655,
      "longitude": -0.222843,
      "elevation": 3.8742344
    },
    {
      "latitude": 51.47563,
      "longitude": -0.222828,
      "elevation": 4.0027733
    },
    {
      "latitude": 51.475613,
      "longitude": -0.222807,
      "elevation": 4.1034684
    },
    {
      "latitude": 51.4756,
      "longitude": -0.222777,
      "elevation": 4.237295
    },
    {
      "latitude": 51.4756,
      "longitude": -0.222736,
      "elevation": 4.506523
    },
    {
      "latitude": 51.47561,
      "longitude": -0.222689,
      "elevation": 4.7373524
    },
    {
      "latitude": 51.475616,
      "longitude": -0.222642,
      "elevation": 4.989035
    },
    {
      "latitude": 51.475628,
      "longitude": -0.2226,
      "elevation": 5.20251
    },
    {
      "latitude": 51.47564,
      "longitude": -0.222561,
      "elevation": 5.3509665
    },
    {
      "latitude": 51.475655,
      "longitude": -0.222521,
      "elevation": 5.490586
    },
    {
      "latitude": 51.47567,
      "longitude": -0.222476,
      "elevation": 5.645196
    },
    {
      "latitude": 51.475685,
      "longitude": -0.222433,
      "elevation": 5.8770304
    },
    {
      "latitude": 51.4757,
      "longitude": -0.222397,
      "elevation": 6.0811195
    },
    {
      "latitude": 51.475716,
      "longitude": -0.222372,
      "elevation": 6.189661
    },
    {
      "latitude": 51.475727,
      "longitude": -0.222347,
      "elevation": 6.3493557
    },
    {
      "latitude": 51.475735,
      "longitude": -0.222313,
      "elevation": 6.4769654
    },
    {
      "latitude": 51.47574,
      "longitude": -0.222269,
      "elevation": 6.6187553
    },
    {
      "latitude": 51.475746,
      "longitude": -0.222217,
      "elevation": 6.8498497
    },
    {
      "latitude": 51.475754,
      "longitude": -0.222164,
      "elevation": 7.0761704
    },
    {
      "latitude": 51.475765,
      "longitude": -0.222112,
      "elevation": 6.779708
    },
    {
      "latitude": 51.475773,
      "longitude": -0.222061,
      "elevation": 6.9514165
    },
    {
      "latitude": 51.475784,
      "longitude": -0.222011,
      "elevation": 7.420008
    },
    {
      "latitude": 51.4758,
      "longitude": -0.22196,
      "elevation": 7.5923295
    },
    {
      "latitude": 51.475815,
      "longitude": -0.221909,
      "elevation": 7.4400086
    },
    {
      "latitude": 51.475826,
      "longitude": -0.221857,
      "elevation": 7.294091
    },
    {
      "latitude": 51.47584,
      "longitude": -0.221806,
      "elevation": 7.7653394
    },
    {
      "latitude": 51.475857,
      "longitude": -0.221755,
      "elevation": 7.9325576
    },
    {
      "latitude": 51.47587,
      "longitude": -0.221705,
      "elevation": 8.10266
    },
    {
      "latitude": 51.475883,
      "longitude": -0.221656,
      "elevation": 8.129621
    },
    {
      "latitude": 51.475895,
      "longitude": -0.22161,
      "elevation": 8.411801
    },
    {
      "latitude": 51.47591,
      "longitude": -0.221568,
      "elevation": 8.880002
    },
    {
      "latitude": 51.47592,
      "longitude": -0.221527,
      "elevation": 9.039745
    },
    {
      "latitude": 51.475933,
      "longitude": -0.221487,
      "elevation": 9.03967
    },
    {
      "latitude": 51.47594,
      "longitude": -0.221449,
      "elevation": 9.6385565
    },
    {
      "latitude": 51.47595,
      "longitude": -0.221413,
      "elevation": 9.768681
    },
    {
      "latitude": 51.475952,
      "longitude": -0.221379,
      "elevation": 10.198103
    },
    {
      "latitude": 51.47595,
      "longitude": -0.22135,
      "elevation": 9.637306
    },
    {
      "latitude": 51.475937,
      "longitude": -0.221326,
      "elevation": 9.039631
    },
    {
      "latitude": 51.475918,
      "longitude": -0.221301,
      "elevation": 8.720462
    },
    {
      "latitude": 51.475895,
      "longitude": -0.221271,
      "elevation": 8.5639925
    },
    {
      "latitude": 51.47587,
      "longitude": -0.221238,
      "elevation": 8.132234
    },
    {
      "latitude": 51.47584,
      "longitude": -0.221208,
      "elevation": 8.7216425
    },
    {
      "latitude": 51.47581,
      "longitude": -0.221184,
      "elevation": 8.880016
    },
    {
      "latitude": 51.47578,
      "longitude": -0.221164,
      "elevation": 9.196541
    },
    {
      "latitude": 51.47575,
      "longitude": -0.221145,
      "elevation": 9.193289
    },
    {
      "latitude": 51.47572,
      "longitude": -0.221125,
      "elevation": 8.879283
    },
    {
      "latitude": 51.475685,
      "longitude": -0.221103,
      "elevation": 9.181198
    },
    {
      "latitude": 51.47565,
      "longitude": -0.221081,
      "elevation": 9.027259
    },
    {
      "latitude": 51.47562,
      "longitude": -0.221058,
      "elevation": 9.021028
    },
    {
      "latitude": 51.475594,
      "longitude": -0.221035,
      "elevation": 9.152384
    },
    {
      "latitude": 51.475563,
      "longitude": -0.221012,
      "elevation": 9.005631
    },
    {
      "latitude": 51.475533,
      "longitude": -0.22099,
      "elevation": 9.2477255
    },
    {
      "latitude": 51.475502,
      "longitude": -0.220968,
      "elevation": 9.4330015
    },
    {
      "latitude": 51.475468,
      "longitude": -0.220944,
      "elevation": 9.628213
    },
    {
      "latitude": 51.475437,
      "longitude": -0.220919,
      "elevation": 9.692649
    },
    {
      "latitude": 51.475407,
      "longitude": -0.220891,
      "elevation": 9.726417
    },
    {
      "latitude": 51.47538,
      "longitude": -0.220861,
      "elevation": 9.739071
    },
    {
      "latitude": 51.475353,
      "longitude": -0.220832,
      "elevation": 9.67507
    },
    {
      "latitude": 51.475327,
      "longitude": -0.220817,
      "elevation": 9.599357
    },
    {
      "latitude": 51.475296,
      "longitude": -0.220802,
      "elevation": 9.15444
    },
    {
      "latitude": 51.47527,
      "longitude": -0.220786,
      "elevation": 8.8580065
    },
    {
      "latitude": 51.475243,
      "longitude": -0.220769,
      "elevation": 8.73327
    },
    {
      "latitude": 51.475212,
      "longitude": -0.220751,
      "elevation": 8.993445
    },
    {
      "latitude": 51.475185,
      "longitude": -0.220731,
      "elevation": 9.041149
    },
    {
      "latitude": 51.475163,
      "longitude": -0.220709,
      "elevation": 8.872511
    },
    {
      "latitude": 51.475136,
      "longitude": -0.220687,
      "elevation": 8.999801
    },
    {
      "latitude": 51.475113,
      "longitude": -0.220665,
      "elevation": 9.039737
    },
    {
      "latitude": 51.475086,
      "longitude": -0.220643,
      "elevation": 9.115644
    },
    {
      "latitude": 51.47506,
      "longitude": -0.220622,
      "elevation": 9.16527
    },
    {
      "latitude": 51.475037,
      "longitude": -0.220603,
      "elevation": 9.171681
    },
    {
      "latitude": 51.47501,
      "longitude": -0.220583,
      "elevation": 9.018875
    },
    {
      "latitude": 51.474983,
      "longitude": -0.220562,
      "elevation": 8.920079
    },
    {
      "latitude": 51.474957,
      "longitude": -0.220537,
      "elevation": 8.931738
    },
    {
      "latitude": 51.47493,
      "longitude": -0.220512,
      "elevation": 8.997184
    },
    {
      "latitude": 51.474903,
      "longitude": -0.220488,
      "elevation": 9.055312
    },
    {
      "latitude": 51.474876,
      "longitude": -0.220466,
      "elevation": 9.011947
    },
    {
      "latitude": 51.474846,
      "longitude": -0.220447,
      "elevation": 8.893854
    },
    {
      "latitude": 51.47482,
      "longitude": -0.220427,
      "elevation": 8.65098
    },
    {
      "latitude": 51.474792,
      "longitude": -0.220406,
      "elevation": 8.743173
    },
    {
      "latitude": 51.474766,
      "longitude": -0.220383,
      "elevation": 8.899677
    },
    {
      "latitude": 51.47474,
      "longitude": -0.220361,
      "elevation": 8.900421
    },
    {
      "latitude": 51.474712,
      "longitude": -0.220339,
      "elevation": 8.827248
    },
    {
      "latitude": 51.47469,
      "longitude": -0.220318,
      "elevation": 8.8258295
    },
    {
      "latitude": 51.474663,
      "longitude": -0.220296,
      "elevation": 8.823963
    },
    {
      "latitude": 51.474636,
      "longitude": -0.220274,
      "elevation": 8.820814
    },
    {
      "latitude": 51.47461,
      "longitude": -0.220251,
      "elevation": 8.736342
    },
    {
      "latitude": 51.474583,
      "longitude": -0.220228,
      "elevation": 8.6426325
    },
    {
      "latitude": 51.474552,
      "longitude": -0.220205,
      "elevation": 8.539363
    },
    {
      "latitude": 51.474525,
      "longitude": -0.220182,
      "elevation": 8.427093
    },
    {
      "latitude": 51.474495,
      "longitude": -0.220159,
      "elevation": 8.528661
    },
    {
      "latitude": 51.47447,
      "longitude": -0.220136,
      "elevation": 8.416909
    },
    {
      "latitude": 51.47444,
      "longitude": -0.220113,
      "elevation": 8.296862
    },
    {
      "latitude": 51.474415,
      "longitude": -0.22009,
      "elevation": 8.684645
    },
    {
      "latitude": 51.474384,
      "longitude": -0.220066,
      "elevation": 8.747466
    },
    {
      "latitude": 51.474358,
      "longitude": -0.220045,
      "elevation": 8.797886
    },
    {
      "latitude": 51.47433,
      "longitude": -0.220025,
      "elevation": 8.835406
    },
    {
      "latitude": 51.4743,
      "longitude": -0.220013,
      "elevation": 8.812384
    },
    {
      "latitude": 51.47427,
      "longitude": -0.22002,
      "elevation": 8.012923
    },
    {
      "latitude": 51.47425,
      "longitude": -0.220044,
      "elevation": 7.8759704
    },
    {
      "latitude": 51.474224,
      "longitude": -0.220057,
      "elevation": 7.279178
    },
    {
      "latitude": 51.474197,
      "longitude": -0.220052,
      "elevation": 7.4346085
    },
    {
      "latitude": 51.47417,
      "longitude": -0.220031,
      "elevation": 7.583047
    },
    {
      "latitude": 51.474144,
      "longitude": -0.220009,
      "elevation": 7.850243
    },
    {
      "latitude": 51.47412,
      "longitude": -0.219987,
      "elevation": 7.9566436
    },
    {
      "latitude": 51.474094,
      "longitude": -0.219965,
      "elevation": 8.141827
    },
    {
      "latitude": 51.474068,
      "longitude": -0.219941,
      "elevation": 8.115394
    },
    {
      "latitude": 51.47404,
      "longitude": -0.219918,
      "elevation": 8.089508
    },
    {
      "latitude": 51.474014,
      "longitude": -0.219896,
      "elevation": 8.140094
    },
    {
      "latitude": 51.47399,
      "longitude": -0.219879,
      "elevation": 8.113735
    },
    {
      "latitude": 51.473972,
      "longitude": -0.219864,
      "elevation": 8.088234
    },
    {
      "latitude": 51.47395,
      "longitude": -0.219851,
      "elevation": 8.063572
    },
    {
      "latitude": 51.473927,
      "longitude": -0.219837,
      "elevation": 7.8944435
    },
    {
      "latitude": 51.473907,
      "longitude": -0.21982,
      "elevation": 7.8736033
    },
    {
      "latitude": 51.473885,
      "longitude": -0.219801,
      "elevation": 7.8520517
    },
    {
      "latitude": 51.473858,
      "longitude": -0.219777,
      "elevation": 7.7527084
    },
    {
      "latitude": 51.473835,
      "longitude": -0.21975,
      "elevation": 7.733517
    },
    {
      "latitude": 51.47381,
      "longitude": -0.219721,
      "elevation": 7.714286
    },
    {
      "latitude": 51.47378,
      "longitude": -0.219692,
      "elevation": 7.7686057
    },
    {
      "latitude": 51.47376,
      "longitude": -0.219665,
      "elevation": 7.811431
    },
    {
      "latitude": 51.473736,
      "longitude": -0.21964,
      "elevation": 7.585642
    },
    {
      "latitude": 51.473713,
      "longitude": -0.219617,
      "elevation": 7.6493325
    },
    {
      "latitude": 51.473694,
      "longitude": -0.219596,
      "elevation": 7.635693
    },
    {
      "latitude": 51.47367,
      "longitude": -0.219574,
      "elevation": 7.621969
    },
    {
      "latitude": 51.473644,
      "longitude": -0.21955,
      "elevation": 7.6066856
    },
    {
      "latitude": 51.473618,
      "longitude": -0.219524,
      "elevation": 7.592106
    },
    {
      "latitude": 51.47359,
      "longitude": -0.219497,
      "elevation": 7.343436
    },
    {
      "latitude": 51.473564,
      "longitude": -0.21947,
      "elevation": 7.0194182
    },
    {
      "latitude": 51.473537,
      "longitude": -0.219444,
      "elevation": 7.1275353
    },
    {
      "latitude": 51.47351,
      "longitude": -0.219419,
      "elevation": 7.3176184
    },
    {
      "latitude": 51.473488,
      "longitude": -0.219396,
      "elevation": 7.219479
    },
    {
      "latitude": 51.47347,
      "longitude": -0.219375,
      "elevation": 7.3064823
    },
    {
      "latitude": 51.473446,
      "longitude": -0.219355,
      "elevation": 7.4554276
    },
    {
      "latitude": 51.473427,
      "longitude": -0.219337,
      "elevation": 7.6177115
    },
    {
      "latitude": 51.473404,
      "longitude": -0.21932,
      "elevation": 7.687883
    },
    {
      "latitude": 51.473377,
      "longitude": -0.219304,
      "elevation": 7.733237
    },
    {
      "latitude": 51.47335,
      "longitude": -0.219287,
      "elevation": 7.7603307
    },
    {
      "latitude": 51.473324,
      "longitude": -0.219268,
      "elevation": 7.7401476
    },
    {
      "latitude": 51.473297,
      "longitude": -0.219244,
      "elevation": 7.6124845
    },
    {
      "latitude": 51.473278,
      "longitude": -0.219213,
      "elevation": 7.1550655
    },
    {
      "latitude": 51.473255,
      "longitude": -0.219176,
      "elevation": 6.319773
    },
    {
      "latitude": 51.47322,
      "longitude": -0.21914,
      "elevation": 6.0027704
    },
    {
      "latitude": 51.47319,
      "longitude": -0.219111,
      "elevation": 6.4799986
    },
    {
      "latitude": 51.47316,
      "longitude": -0.219088,
      "elevation": 5.8702354
    },
    {
      "latitude": 51.47313,
      "longitude": -0.219066,
      "elevation": 5.753342
    },
    {
      "latitude": 51.473103,
      "longitude": -0.219043,
      "elevation": 5.5540385
    },
    {
      "latitude": 51.473076,
      "longitude": -0.219018,
      "elevation": 5.501922
    },
    {
      "latitude": 51.473045,
      "longitude": -0.218993,
      "elevation": 5.5475545
    },
    {
      "latitude": 51.47302,
      "longitude": -0.218968,
      "elevation": 5.764056
    },
    {
      "latitude": 51.47299,
      "longitude": -0.218945,
      "elevation": 5.996771
    },
    {
      "latitude": 51.472958,
      "longitude": -0.218924,
      "elevation": 6.131505
    },
    {
      "latitude": 51.47293,
      "longitude": -0.218906,
      "elevation": 6.2668567
    },
    {
      "latitude": 51.4729,
      "longitude": -0.218889,
      "elevation": 6.175799
    },
    {
      "latitude": 51.472878,
      "longitude": -0.218876,
      "elevation": 6.1958075
    },
    {
      "latitude": 51.472855,
      "longitude": -0.218866,
      "elevation": 6.213276
    },
    {
      "latitude": 51.47283,
      "longitude": -0.218854,
      "elevation": 6.1414413
    },
    {
      "latitude": 51.47281,
      "longitude": -0.218837,
      "elevation": 6.1635103
    },
    {
      "latitude": 51.47279,
      "longitude": -0.218811,
      "elevation": 6.189062
    },
    {
      "latitude": 51.472767,
      "longitude": -0.21878,
      "elevation": 6.1432877
    },
    {
      "latitude": 51.472744,
      "longitude": -0.218751,
      "elevation": 6.1722927
    },
    {
      "latitude": 51.47272,
      "longitude": -0.218727,
      "elevation": 6.1387267
    },
    {
      "latitude": 51.472694,
      "longitude": -0.218705,
      "elevation": 6.1153
    },
    {
      "latitude": 51.472668,
      "longitude": -0.218682,
      "elevation": 6.144312
    },
    {
      "latitude": 51.472637,
      "longitude": -0.218656,
      "elevation": 6.220732
    },
    {
      "latitude": 51.472607,
      "longitude": -0.218627,
      "elevation": 6.24541
    },
    {
      "latitude": 51.472576,
      "longitude": -0.218601,
      "elevation": 6.3763084
    },
    {
      "latitude": 51.47255,
      "longitude": -0.218579,
      "elevation": 6.5297804
    },
    {
      "latitude": 51.472523,
      "longitude": -0.21856,
      "elevation": 6.6213613
    },
    {
      "latitude": 51.472496,
      "longitude": -0.218541,
      "elevation": 6.476812
    },
    {
      "latitude": 51.47247,
      "longitude": -0.218518,
      "elevation": 6.413602
    },
    {
      "latitude": 51.472446,
      "longitude": -0.218495,
      "elevation": 6.35792
    },
    {
      "latitude": 51.47242,
      "longitude": -0.218472,
      "elevation": 6.35792
    },
    {
      "latitude": 51.472397,
      "longitude": -0.218452,
      "elevation": 6.35792
    },
    {
      "latitude": 51.47237,
      "longitude": -0.218432,
      "elevation": 6.413602
    },
    {
      "latitude": 51.472347,
      "longitude": -0.218409,
      "elevation": 6.35792
    },
    {
      "latitude": 51.472317,
      "longitude": -0.218382,
      "elevation": 6.476812
    },
    {
      "latitude": 51.472286,
      "longitude": -0.218351,
      "elevation": 6.5482054
    },
    {
      "latitude": 51.47226,
      "longitude": -0.218319,
      "elevation": 6.626037
    },
    {
      "latitude": 51.472233,
      "longitude": -0.218289,
      "elevation": 6.710844
    },
    {
      "latitude": 51.472206,
      "longitude": -0.218261,
      "elevation": 6.8063917
    },
    {
      "latitude": 51.47218,
      "longitude": -0.218234,
      "elevation": 6.9130983
    },
    {
      "latitude": 51.472157,
      "longitude": -0.218209,
      "elevation": 7.162815
    },
    {
      "latitude": 51.47213,
      "longitude": -0.218184,
      "elevation": 7.449033
    },
    {
      "latitude": 51.472103,
      "longitude": -0.218161,
      "elevation": 7.602263
    },
    {
      "latitude": 51.472073,
      "longitude": -0.218138,
      "elevation": 7.919995
    },
    {
      "latitude": 51.47204,
      "longitude": -0.218121,
      "elevation": 8.079102
    },
    {
      "latitude": 51.471996,
      "longitude": -0.218115,
      "elevation": 8.234835
    },
    {
      "latitude": 51.471954,
      "longitude": -0.218122,
      "elevation": 8.078765
    },
    {
      "latitude": 51.47192,
      "longitude": -0.218143,
      "elevation": 7.9199586
    },
    {
      "latitude": 51.4719,
      "longitude": -0.218172,
      "elevation": 7.919983
    },
    {
      "latitude": 51.471886,
      "longitude": -0.218199,
      "elevation": 7.7601466
    },
    {
      "latitude": 51.471863,
      "longitude": -0.218224,
      "elevation": 7.7602253
    },
    {
      "latitude": 51.47184,
      "longitude": -0.218252,
      "elevation": 8.237359
    },
    {
      "latitude": 51.471817,
      "longitude": -0.218287,
      "elevation": 7.9200034
    },
    {
      "latitude": 51.471798,
      "longitude": -0.218325,
      "elevation": 7.7610292
    },
    {
      "latitude": 51.47178,
      "longitude": -0.218365,
      "elevation": 7.7611456
    },
    {
      "latitude": 51.471756,
      "longitude": -0.218402,
      "elevation": 7.7611456
    },
    {
      "latitude": 51.47173,
      "longitude": -0.218436,
      "elevation": 7.45419
    },
    {
      "latitude": 51.471706,
      "longitude": -0.218467,
      "elevation": 7.6052494
    },
    {
      "latitude": 51.471684,
      "longitude": -0.218494,
      "elevation": 7.7611456
    },
    {
      "latitude": 51.47166,
      "longitude": -0.218519,
      "elevation": 7.605741
    },
    {
      "latitude": 51.471638,
      "longitude": -0.218539,
      "elevation": 7.457659
    },
    {
      "latitude": 51.47162,
      "longitude": -0.218557,
      "elevation": 7.061063
    },
    {
      "latitude": 51.4716,
      "longitude": -0.218574,
      "elevation": 6.9536333
    },
    {
      "latitude": 51.471577,
      "longitude": -0.218595,
      "elevation": 6.85878
    },
    {
      "latitude": 51.471554,
      "longitude": -0.218619,
      "elevation": 6.6944623
    },
    {
      "latitude": 51.471527,
      "longitude": -0.218638,
      "elevation": 6.702539
    },
    {
      "latitude": 51.47151,
      "longitude": -0.218645,
      "elevation": 6.7097645
    },
    {
      "latitude": 51.471485,
      "longitude": -0.218651,
      "elevation": 6.7212925
    },
    {
      "latitude": 51.471455,
      "longitude": -0.21866,
      "elevation": 6.6663795
    },
    {
      "latitude": 51.47142,
      "longitude": -0.218669,
      "elevation": 6.6199226
    },
    {
      "latitude": 51.471394,
      "longitude": -0.218675,
      "elevation": 6.690911
    },
    {
      "latitude": 51.47137,
      "longitude": -0.218677,
      "elevation": 6.842151
    },
    {
      "latitude": 51.47135,
      "longitude": -0.21867,
      "elevation": 7.1295257
    },
    {
      "latitude": 51.471333,
      "longitude": -0.218654,
      "elevation": 7.49631
    },
    {
      "latitude": 51.47131,
      "longitude": -0.218632,
      "elevation": 7.928778
    },
    {
      "latitude": 51.47129,
      "longitude": -0.218609,
      "elevation": 8.240829
    },
    {
      "latitude": 51.47127,
      "longitude": -0.218589,
      "elevation": 8.559992
    },
    {
      "latitude": 51.47125,
      "longitude": -0.218572,
      "elevation": 8.56
    },
    {
      "latitude": 51.471226,
      "longitude": -0.218557,
      "elevation": 8.4010515
    },
    {
      "latitude": 51.471203,
      "longitude": -0.21854,
      "elevation": 8.248038
    },
    {
      "latitude": 51.471176,
      "longitude": -0.218517,
      "elevation": 7.9707303
    },
    {
      "latitude": 51.471153,
      "longitude": -0.218483,
      "elevation": 7.86993
    },
    {
      "latitude": 51.471127,
      "longitude": -0.218454,
      "elevation": 7.9031615
    },
    {
      "latitude": 51.471096,
      "longitude": -0.218429,
      "elevation": 8.050488
    },
    {
      "latitude": 51.471066,
      "longitude": -0.218403,
      "elevation": 8.089604
    },
    {
      "latitude": 51.471043,
      "longitude": -0.218374,
      "elevation": 8.045076
    },
    {
      "latitude": 51.47102,
      "longitude": -0.218344,
      "elevation": 8.392415
    },
    {
      "latitude": 51.470993,
      "longitude": -0.218319,
      "elevation": 8.228194
    },
    {
      "latitude": 51.470966,
      "longitude": -0.218304,
      "elevation": 8.250594
    },
    {
      "latitude": 51.47094,
      "longitude": -0.218297,
      "elevation": 8.139569
    },
    {
      "latitude": 51.470913,
      "longitude": -0.218297,
      "elevation": 8.119809
    },
    {
      "latitude": 51.470894,
      "longitude": -0.218297,
      "elevation": 8.107453
    },
    {
      "latitude": 51.470875,
      "longitude": -0.21829,
      "elevation": 8.062842
    },
    {
      "latitude": 51.470856,
      "longitude": -0.218273,
      "elevation": 8.054095
    },
    {
      "latitude": 51.470833,
      "longitude": -0.218248,
      "elevation": 8.005369
    },
    {
      "latitude": 51.47081,
      "longitude": -0.21822,
      "elevation": 7.869763
    },
    {
      "latitude": 51.470787,
      "longitude": -0.218192,
      "elevation": 7.762999
    },
    {
      "latitude": 51.470764,
      "longitude": -0.218165,
      "elevation": 7.658409
    },
    {
      "latitude": 51.470745,
      "longitude": -0.218137,
      "elevation": 7.576363
    },
    {
      "latitude": 51.47073,
      "longitude": -0.218109,
      "elevation": 7.5147033
    },
    {
      "latitude": 51.47071,
      "longitude": -0.218077,
      "elevation": 7.4338307
    },
    {
      "latitude": 51.47068,
      "longitude": -0.218042,
      "elevation": 7.3453455
    },
    {
      "latitude": 51.470657,
      "longitude": -0.218014,
      "elevation": 7.2852163
    },
    {
      "latitude": 51.470642,
      "longitude": -0.217991,
      "elevation": 7.2689066
    },
    {
      "latitude": 51.470627,
      "longitude": -0.217967,
      "elevation": 7.216401
    },
    {
      "latitude": 51.4706,
      "longitude": -0.217937,
      "elevation": 7.166266
    },
    {
      "latitude": 51.470573,
      "longitude": -0.217904,
      "elevation": 7.1014476
    },
    {
      "latitude": 51.47054,
      "longitude": -0.217871,
      "elevation": 7.040596
    },
    {
      "latitude": 51.47051,
      "longitude": -0.217842,
      "elevation": 6.9709983
    },
    {
      "latitude": 51.470474,
      "longitude": -0.217814,
      "elevation": 6.928585
    },
    {
      "latitude": 51.470444,
      "longitude": -0.217787,
      "elevation": 6.8858876
    },
    {
      "latitude": 51.470413,
      "longitude": -0.21776,
      "elevation": 6.860075
    },
    {
      "latitude": 51.470387,
      "longitude": -0.217733,
      "elevation": 6.8395166
    },
    {
      "latitude": 51.470364,
      "longitude": -0.217707,
      "elevation": 6.8377833
    },
    {
      "latitude": 51.47035,
      "longitude": -0.217683,
      "elevation": 6.841039
    },
    {
      "latitude": 51.47033,
      "longitude": -0.217658,
      "elevation": 6.851711
    },
    {
      "latitude": 51.47031,
      "longitude": -0.21763,
      "elevation": 6.867397
    },
    {
      "latitude": 51.47029,
      "longitude": -0.217597,
      "elevation": 6.892794
    },
    {
      "latitude": 51.470264,
      "longitude": -0.217562,
      "elevation": 6.9236813
    },
    {
      "latitude": 51.47024,
      "longitude": -0.217532,
      "elevation": 6.9576206
    },
    {
      "latitude": 51.470222,
      "longitude": -0.217504,
      "elevation": 6.9961867
    },
    {
      "latitude": 51.470207,
      "longitude": -0.217479,
      "elevation": 7.0279417
    },
    {
      "latitude": 51.47019,
      "longitude": -0.217456,
      "elevation": 7.061137
    },
    {
      "latitude": 51.470165,
      "longitude": -0.217427,
      "elevation": 7.107363
    },
    {
      "latitude": 51.470146,
      "longitude": -0.217394,
      "elevation": 7.1689563
    },
    {
      "latitude": 51.47012,
      "longitude": -0.217362,
      "elevation": 7.2382684
    },
    {
      "latitude": 51.470093,
      "longitude": -0.217335,
      "elevation": 7.312188
    },
    {
      "latitude": 51.470062,
      "longitude": -0.217312,
      "elevation": 7.3843837
    },
    {
      "latitude": 51.470043,
      "longitude": -0.217288,
      "elevation": 7.456567
    },
    {
      "latitude": 51.470028,
      "longitude": -0.217261,
      "elevation": 7.539101
    },
    {
      "latitude": 51.47001,
      "longitude": -0.217232,
      "elevation": 7.6352563
    },
    {
      "latitude": 51.46999,
      "longitude": -0.217202,
      "elevation": 7.694406
    },
    {
      "latitude": 51.469967,
      "longitude": -0.217173,
      "elevation": 7.711113
    },
    {
      "latitude": 51.469944,
      "longitude": -0.217147,
      "elevation": 7.717465
    },
    {
      "latitude": 51.46992,
      "longitude": -0.217124,
      "elevation": 7.722243
    },
    {
      "latitude": 51.469906,
      "longitude": -0.217103,
      "elevation": 7.729409
    },
    {
      "latitude": 51.469887,
      "longitude": -0.217081,
      "elevation": 7.7389655
    },
    {
      "latitude": 51.469868,
      "longitude": -0.217053,
      "elevation": 7.7550263
    },
    {
      "latitude": 51.46984,
      "longitude": -0.217015,
      "elevation": 7.7843623
    },
    {
      "latitude": 51.46981,
      "longitude": -0.216975,
      "elevation": 7.810021
    },
    {
      "latitude": 51.469784,
      "longitude": -0.216944,
      "elevation": 7.822598
    },
    {
      "latitude": 51.469765,
      "longitude": -0.216925,
      "elevation": 7.818029
    },
    {
      "latitude": 51.46974,
      "longitude": -0.216902,
      "elevation": 7.819211
    },
    {
      "latitude": 51.46971,
      "longitude": -0.216862,
      "elevation": 7.878261
    },
    {
      "latitude": 51.46969,
      "longitude": -0.216827,
      "elevation": 7.91983
    },
    {
      "latitude": 51.46967,
      "longitude": -0.216797,
      "elevation": 7.9749355
    },
    {
      "latitude": 51.46965,
      "longitude": -0.216767,
      "elevation": 8.012473
    },
    {
      "latitude": 51.46963,
      "longitude": -0.216732,
      "elevation": 8.047525
    },
    {
      "latitude": 51.469612,
      "longitude": -0.216694,
      "elevation": 8.074919
    },
    {
      "latitude": 51.469597,
      "longitude": -0.216659,
      "elevation": 8.097085
    },
    {
      "latitude": 51.46958,
      "longitude": -0.216629,
      "elevation": 8.070844
    },
    {
      "latitude": 51.469563,
      "longitude": -0.216596,
      "elevation": 8.011117
    },
    {
      "latitude": 51.46954,
      "longitude": -0.216553,
      "elevation": 7.90382
    },
    {
      "latitude": 51.46952,
      "longitude": -0.216512,
      "elevation": 7.785609
    },
    {
      "latitude": 51.469505,
      "longitude": -0.216472,
      "elevation": 7.8799243
    },
    {
      "latitude": 51.469482,
      "longitude": -0.21643,
      "elevation": 7.8732624
    },
    {
      "latitude": 51.469456,
      "longitude": -0.216385,
      "elevation": 7.8876123
    },
    {
      "latitude": 51.469425,
      "longitude": -0.216341,
      "elevation": 7.7436886
    },
    {
      "latitude": 51.4694,
      "longitude": -0.216296,
      "elevation": 7.689048
    },
    {
      "latitude": 51.46937,
      "longitude": -0.216254,
      "elevation": 7.4649606
    },
    {
      "latitude": 51.46935,
      "longitude": -0.216213,
      "elevation": 7.415511
    },
    {
      "latitude": 51.469326,
      "longitude": -0.216176,
      "elevation": 7.375022
    },
    {
      "latitude": 51.469307,
      "longitude": -0.216142,
      "elevation": 7.555441
    },
    {
      "latitude": 51.46929,
      "longitude": -0.216111,
      "elevation": 7.938564
    },
    {
      "latitude": 51.469276,
      "longitude": -0.216078,
      "elevation": 8.08457
    },
    {
      "latitude": 51.469257,
      "longitude": -0.216044,
      "elevation": 7.7797737
    },
    {
      "latitude": 51.46924,
      "longitude": -0.216008,
      "elevation": 7.924932
    },
    {
      "latitude": 51.46922,
      "longitude": -0.215971,
      "elevation": 7.7688417
    },
    {
      "latitude": 51.4692,
      "longitude": -0.215934,
      "elevation": 7.6147156
    },
    {
      "latitude": 51.469185,
      "longitude": -0.215889,
      "elevation": 7.920401
    },
    {
      "latitude": 51.469162,
      "longitude": -0.215834,
      "elevation": 7.604465
    },
    {
      "latitude": 51.46914,
      "longitude": -0.215775,
      "elevation": 7.2895765
    },
    {
      "latitude": 51.46911,
      "longitude": -0.215718,
      "elevation": 7.1273775
    },
    {
      "latitude": 51.469086,
      "longitude": -0.215662,
      "elevation": 6.674635
    },
    {
      "latitude": 51.469063,
      "longitude": -0.215609,
      "elevation": 6.519562
    },
    {
      "latitude": 51.469044,
      "longitude": -0.215558,
      "elevation": 6.369488
    },
    {
      "latitude": 51.46903,
      "longitude": -0.215509,
      "elevation": 6.099616
    },
    {
      "latitude": 51.46901,
      "longitude": -0.215461,
      "elevation": 6.211554
    },
    {
      "latitude": 51.468994,
      "longitude": -0.215416,
      "elevation": 6.0713677
    },
    {
      "latitude": 51.468975,
      "longitude": -0.215374,
      "elevation": 5.937804
    },
    {
      "latitude": 51.468964,
      "longitude": -0.215334,
      "elevation": 5.6097617
    },
    {
      "latitude": 51.46895,
      "longitude": -0.215296,
      "elevation": 5.513724
    },
    {
      "latitude": 51.468937,
      "longitude": -0.21526,
      "elevation": 5.5093536
    },
    {
      "latitude": 51.46892,
      "longitude": -0.215225,
      "elevation": 5.4257116
    },
    {
      "latitude": 51.468906,
      "longitude": -0.215189,
      "elevation": 5.694676
    },
    {
      "latitude": 51.468887,
      "longitude": -0.215151,
      "elevation": 5.6967235
    },
    {
      "latitude": 51.468872,
      "longitude": -0.215106,
      "elevation": 5.812658
    },
    {
      "latitude": 51.46886,
      "longitude": -0.215054,
      "elevation": 5.8257575
    },
    {
      "latitude": 51.46885,
      "longitude": -0.215013,
      "elevation": 5.8386145
    },
    {
      "latitude": 51.46884,
      "longitude": -0.214982,
      "elevation": 5.9533987
    },
    {
      "latitude": 51.46883,
      "longitude": -0.214953,
      "elevation": 6.343915
    },
    {
      "latitude": 51.46882,
      "longitude": -0.214919,
      "elevation": 6.203717
    },
    {
      "latitude": 51.468803,
      "longitude": -0.214882,
      "elevation": 6.071908
    },
    {
      "latitude": 51.46879,
      "longitude": -0.214844,
      "elevation": 6.3432565
    },
    {
      "latitude": 51.46877,
      "longitude": -0.214809,
      "elevation": 6.2045956
    },
    {
      "latitude": 51.468746,
      "longitude": -0.214771,
      "elevation": 6.206556
    },
    {
      "latitude": 51.468723,
      "longitude": -0.214726,
      "elevation": 6.644526
    },
    {
      "latitude": 51.468704,
      "longitude": -0.214673,
      "elevation": 6.960048
    },
    {
      "latitude": 51.468685,
      "longitude": -0.214625,
      "elevation": 7.1199884
    },
    {
      "latitude": 51.468674,
      "longitude": -0.21459,
      "elevation": 6.221873
    },
    {
      "latitude": 51.468655,
      "longitude": -0.214538,
      "elevation": 5.9926805
    },
    {
      "latitude": 51.468636,
      "longitude": -0.214478,
      "elevation": 5.907445
    },
    {
      "latitude": 51.468616,
      "longitude": -0.214427,
      "elevation": 5.8368263
    },
    {
      "latitude": 51.468605,
      "longitude": -0.214385,
      "elevation": 5.7796655
    },
    {
      "latitude": 51.46859,
      "longitude": -0.214349,
      "elevation": 5.802581
    },
    {
      "latitude": 51.468575,
      "longitude": -0.214312,
      "elevation": 5.7640543
    },
    {
      "latitude": 51.468563,
      "longitude": -0.214271,
      "elevation": 5.5853715
    },
    {
      "latitude": 51.468548,
      "longitude": -0.214227,
      "elevation": 5.582724
    },
    {
      "latitude": 51.468533,
      "longitude": -0.214181,
      "elevation": 5.5607486
    },
    {
      "latitude": 51.468517,
      "longitude": -0.214135,
      "elevation": 5.5940304
    },
    {
      "latitude": 51.468502,
      "longitude": -0.214091,
      "elevation": 5.639721
    },
    {
      "latitude": 51.468487,
      "longitude": -0.214049,
      "elevation": 5.703822
    },
    {
      "latitude": 51.468468,
      "longitude": -0.21401,
      "elevation": 5.778866
    },
    {
      "latitude": 51.468452,
      "longitude": -0.213972,
      "elevation": 5.8536825
    },
    {
      "latitude": 51.468437,
      "longitude": -0.213933,
      "elevation": 5.9311857
    },
    {
      "latitude": 51.468426,
      "longitude": -0.213891,
      "elevation": 6.00198
    },
    {
      "latitude": 51.46842,
      "longitude": -0.213847,
      "elevation": 6.0598984
    },
    {
      "latitude": 51.46842,
      "longitude": -0.213804,
      "elevation": 6.091732
    },
    {
      "latitude": 51.468426,
      "longitude": -0.213761,
      "elevation": 6.102432
    },
    {
      "latitude": 51.468433,
      "longitude": -0.213713,
      "elevation": 6.114812
    },
    {
      "latitude": 51.46843,
      "longitude": -0.213657,
      "elevation": 6.1776447
    },
    {
      "latitude": 51.46841,
      "longitude": -0.213602,
      "elevation": 6.304134
    },
    {
      "latitude": 51.468376,
      "longitude": -0.213553,
      "elevation": 6.525161
    },
    {
      "latitude": 51.46833,
      "longitude": -0.213514,
      "elevation": 6.7637987
    },
    {
      "latitude": 51.468292,
      "longitude": -0.213492,
      "elevation": 6.54927
    },
    {
      "latitude": 51.46827,
      "longitude": -0.213473,
      "elevation": 6.399206
    },
    {
      "latitude": 51.468246,
      "longitude": -0.213439,
      "elevation": 6.271681
    },
    {
      "latitude": 51.468224,
      "longitude": -0.213398,
      "elevation": 6.1672153
    },
    {
      "latitude": 51.468204,
      "longitude": -0.213354,
      "elevation": 6.0835047
    },
    {
      "latitude": 51.46819,
      "longitude": -0.213309,
      "elevation": 5.9755287
    },
    {
      "latitude": 51.468178,
      "longitude": -0.213266,
      "elevation": 5.873347
    },
    {
      "latitude": 51.468166,
      "longitude": -0.213224,
      "elevation": 5.756911
    },
    {
      "latitude": 51.468147,
      "longitude": -0.213182,
      "elevation": 5.6127334
    },
    {
      "latitude": 51.468132,
      "longitude": -0.213139,
      "elevation": 5.5025454
    },
    {
      "latitude": 51.46812,
      "longitude": -0.213096,
      "elevation": 5.413282
    },
    {
      "latitude": 51.46811,
      "longitude": -0.213054,
      "elevation": 5.3276396
    },
    {
      "latitude": 51.468098,
      "longitude": -0.213014,
      "elevation": 5.2819924
    },
    {
      "latitude": 51.468082,
      "longitude": -0.212976,
      "elevation": 5.173388
    },
    {
      "latitude": 51.46807,
      "longitude": -0.212938,
      "elevation": 5.067723
    },
    {
      "latitude": 51.468056,
      "longitude": -0.212902,
      "elevation": 4.987395
    },
    {
      "latitude": 51.468044,
      "longitude": -0.212864,
      "elevation": 4.881282
    },
    {
      "latitude": 51.46803,
      "longitude": -0.212823,
      "elevation": 4.804677
    },
    {
      "latitude": 51.468018,
      "longitude": -0.212779,
      "elevation": 4.758868
    },
    {
      "latitude": 51.468006,
      "longitude": -0.212733,
      "elevation": 4.814968
    },
    {
      "latitude": 51.467995,
      "longitude": -0.212689,
      "elevation": 4.7741637
    },
    {
      "latitude": 51.46799,
      "longitude": -0.212649,
      "elevation": 4.8097863
    },
    {
      "latitude": 51.468,
      "longitude": -0.212614,
      "elevation": 4.769489
    },
    {
      "latitude": 51.468018,
      "longitude": -0.212583,
      "elevation": 4.8305535
    },
    {
      "latitude": 51.46804,
      "longitude": -0.212555,
      "elevation": 4.913464
    },
    {
      "latitude": 51.468063,
      "longitude": -0.212521,
      "elevation": 4.950058
    },
    {
      "latitude": 51.468082,
      "longitude": -0.212473,
      "elevation": 5.0471234
    },
    {
      "latitude": 51.468105,
      "longitude": -0.212421,
      "elevation": 5.1148868
    },
    {
      "latitude": 51.46813,
      "longitude": -0.212374,
      "elevation": 5.2220154
    },
    {
      "latitude": 51.468155,
      "longitude": -0.212336,
      "elevation": 5.2924666
    },
    {
      "latitude": 51.468178,
      "longitude": -0.212301,
      "elevation": 5.3496222
    },
    {
      "latitude": 51.468193,
      "longitude": -0.212264,
      "elevation": 5.4215093
    },
    {
      "latitude": 51.46821,
      "longitude": -0.212223,
      "elevation": 5.481186
    },
    {
      "latitude": 51.468227,
      "longitude": -0.212183,
      "elevation": 5.4698253
    },
    {
      "latitude": 51.46824,
      "longitude": -0.212146,
      "elevation": 5.5596566
    },
    {
      "latitude": 51.468246,
      "longitude": -0.212111,
      "elevation": 5.555236
    },
    {
      "latitude": 51.468258,
      "longitude": -0.212064,
      "elevation": 5.710443
    },
    {
      "latitude": 51.468273,
      "longitude": -0.212014,
      "elevation": 5.8529224
    },
    {
      "latitude": 51.468285,
      "longitude": -0.211969,
      "elevation": 6.1390166
    },
    {
      "latitude": 51.468304,
      "longitude": -0.211923,
      "elevation": 6.378967
    },
    {
      "latitude": 51.468315,
      "longitude": -0.211884,
      "elevation": 6.5119476
    },
    {
      "latitude": 51.468315,
      "longitude": -0.211855,
      "elevation": 6.653392
    },
    {
      "latitude": 51.46831,
      "longitude": -0.21182,
      "elevation": 7.1200013
    },
    {
      "latitude": 51.46831,
      "longitude": -0.211779,
      "elevation": 7.589768
    },
    {
      "latitude": 51.46831,
      "longitude": -0.211738,
      "elevation": 7.732001
    },
    {
      "latitude": 51.468315,
      "longitude": -0.211701,
      "elevation": 7.989611
    },
    {
      "latitude": 51.468315,
      "longitude": -0.211666,
      "elevation": 8.296818
    },
    {
      "latitude": 51.468315,
      "longitude": -0.211628,
      "elevation": 8.316696
    },
    {
      "latitude": 51.468315,
      "longitude": -0.211585,
      "elevation": 8.511158
    },
    {
      "latitude": 51.468315,
      "longitude": -0.211538,
      "elevation": 8.743981
    },
    {
      "latitude": 51.468315,
      "longitude": -0.211487,
      "elevation": 8.839381
    },
    {
      "latitude": 51.468323,
      "longitude": -0.211434,
      "elevation": 8.936437
    },
    {
      "latitude": 51.468327,
      "longitude": -0.211382,
      "elevation": 8.719267
    },
    {
      "latitude": 51.468334,
      "longitude": -0.211333,
      "elevation": 8.833047
    },
    {
      "latitude": 51.46834,
      "longitude": -0.211287,
      "elevation": 8.940256
    },
    {
      "latitude": 51.46835,
      "longitude": -0.211249,
      "elevation": 8.798017
    },
    {
      "latitude": 51.468433,
      "longitude": -0.21103,
      "elevation": 9.791378
    },
    {
      "latitude": 51.468456,
      "longitude": -0.211006,
      "elevation": 9.821842
    },
    {
      "latitude": 51.46848,
      "longitude": -0.210978,
      "elevation": 9.85368
    },
    {
      "latitude": 51.468502,
      "longitude": -0.210948,
      "elevation": 9.886017
    },
    {
      "latitude": 51.468525,
      "longitude": -0.210916,
      "elevation": 9.916941
    },
    {
      "latitude": 51.46855,
      "longitude": -0.210886,
      "elevation": 9.943603
    },
    {
      "latitude": 51.468575,
      "longitude": -0.210859,
      "elevation": 9.96826
    },
    {
      "latitude": 51.4686,
      "longitude": -0.210835,
      "elevation": 9.984777
    },
    {
      "latitude": 51.468628,
      "longitude": -0.210805,
      "elevation": 9.993592
    },
    {
      "latitude": 51.46866,
      "longitude": -0.210764,
      "elevation": 9.999123
    },
    {
      "latitude": 51.468678,
      "longitude": -0.210728,
      "elevation": 9.985
    },
    {
      "latitude": 51.468697,
      "longitude": -0.210698,
      "elevation": 9.970897
    },
    {
      "latitude": 51.46871,
      "longitude": -0.210669,
      "elevation": 9.967167
    },
    {
      "latitude": 51.468735,
      "longitude": -0.210642,
      "elevation": 9.9404
    },
    {
      "latitude": 51.468758,
      "longitude": -0.210615,
      "elevation": 9.915998
    },
    {
      "latitude": 51.468784,
      "longitude": -0.21059,
      "elevation": 9.885497
    },
    {
      "latitude": 51.468807,
      "longitude": -0.210566,
      "elevation": 9.850788
    },
    {
      "latitude": 51.46883,
      "longitude": -0.210542,
      "elevation": 9.813411
    },
    {
      "latitude": 51.468853,
      "longitude": -0.210519,
      "elevation": 9.808514
    },
    {
      "latitude": 51.468876,
      "longitude": -0.210496,
      "elevation": 9.797036
    },
    {
      "latitude": 51.4689,
      "longitude": -0.210474,
      "elevation": 9.778554
    },
    {
      "latitude": 51.468925,
      "longitude": -0.210452,
      "elevation": 9.750637
    },
    {
      "latitude": 51.46896,
      "longitude": -0.210431,
      "elevation": 9.724595
    },
    {
      "latitude": 51.46899,
      "longitude": -0.210412,
      "elevation": 9.67712
    },
    {
      "latitude": 51.469013,
      "longitude": -0.210395,
      "elevation": 9.625035
    },
    {
      "latitude": 51.469036,
      "longitude": -0.210376,
      "elevation": 9.574005
    },
    {
      "latitude": 51.469063,
      "longitude": -0.210358,
      "elevation": 9.527064
    },
    {
      "latitude": 51.46909,
      "longitude": -0.21034,
      "elevation": 9.473452
    },
    {
      "latitude": 51.469116,
      "longitude": -0.210325,
      "elevation": 9.436491
    },
    {
      "latitude": 51.469147,
      "longitude": -0.210311,
      "elevation": 9.385812
    },
    {
      "latitude": 51.46917,
      "longitude": -0.210297,
      "elevation": 9.34074
    },
    {
      "latitude": 51.469193,
      "longitude": -0.21028,
      "elevation": 9.31355
    },
    {
      "latitude": 51.469215,
      "longitude": -0.210257,
      "elevation": 9.282488
    },
    {
      "latitude": 51.469234,
      "longitude": -0.210227,
      "elevation": 9.242355
    },
    {
      "latitude": 51.469257,
      "longitude": -0.210185,
      "elevation": 9.190089
    },
    {
      "latitude": 51.46929,
      "longitude": -0.210135,
      "elevation": 9.131132
    },
    {
      "latitude": 51.46932,
      "longitude": -0.210083,
      "elevation": 9.073633
    },
    {
      "latitude": 51.469337,
      "longitude": -0.210032,
      "elevation": 9.024269
    },
    {
      "latitude": 51.46935,
      "longitude": -0.209981,
      "elevation": 8.998954
    },
    {
      "latitude": 51.469353,
      "longitude": -0.209928,
      "elevation": 9.014101
    },
    {
      "latitude": 51.469357,
      "longitude": -0.20987,
      "elevation": 9.0314045
    },
    {
      "latitude": 51.469357,
      "longitude": -0.20981,
      "elevation": 9.04614
    },
    {
      "latitude": 51.469353,
      "longitude": -0.20975,
      "elevation": 9.063463
    },
    {
      "latitude": 51.469353,
      "longitude": -0.209692,
      "elevation": 9.078759
    },
    {
      "latitude": 51.469353,
      "longitude": -0.209639,
      "elevation": 9.09381
    },
    {
      "latitude": 51.469353,
      "longitude": -0.209591,
      "elevation": 9.106967
    },
    {
      "latitude": 51.469353,
      "longitude": -0.209545,
      "elevation": 9.11987
    },
    {
      "latitude": 51.469357,
      "longitude": -0.209498,
      "elevation": 9.135669
    },
    {
      "latitude": 51.469364,
      "longitude": -0.20945,
      "elevation": 9.154387
    },
    {
      "latitude": 51.469376,
      "longitude": -0.209401,
      "elevation": 9.176493
    },
    {
      "latitude": 51.469383,
      "longitude": -0.209351,
      "elevation": 9.202558
    },
    {
      "latitude": 51.4694,
      "longitude": -0.2093,
      "elevation": 9.231229
    },
    {
      "latitude": 51.46941,
      "longitude": -0.209249,
      "elevation": 9.262546
    },
    {
      "latitude": 51.469425,
      "longitude": -0.209198,
      "elevation": 9.296656
    },
    {
      "latitude": 51.469437,
      "longitude": -0.209148,
      "elevation": 9.347592
    },
    {
      "latitude": 51.46945,
      "longitude": -0.209099,
      "elevation": 9.423084
    },
    {
      "latitude": 51.469467,
      "longitude": -0.20905,
      "elevation": 9.499926
    },
    {
      "latitude": 51.469482,
      "longitude": -0.209003,
      "elevation": 9.573434
    },
    {
      "latitude": 51.469494,
      "longitude": -0.208958,
      "elevation": 9.644358
    },
    {
      "latitude": 51.46951,
      "longitude": -0.208914,
      "elevation": 9.712776
    },
    {
      "latitude": 51.469517,
      "longitude": -0.208871,
      "elevation": 9.776384
    },
    {
      "latitude": 51.46953,
      "longitude": -0.208826,
      "elevation": 9.841168
    },
    {
      "latitude": 51.469547,
      "longitude": -0.208793,
      "elevation": 9.903432
    },
    {
      "latitude": 51.469566,
      "longitude": -0.208767,
      "elevation": 9.956851
    },
    {
      "latitude": 51.469597,
      "longitude": -0.208745,
      "elevation": 10.017556
    },
    {
      "latitude": 51.469624,
      "longitude": -0.208721,
      "elevation": 10.075423
    },
    {
      "latitude": 51.469646,
      "longitude": -0.208696,
      "elevation": 10.1289215
    },
    {
      "latitude": 51.46967,
      "longitude": -0.208669,
      "elevation": 10.171524
    },
    {
      "latitude": 51.469692,
      "longitude": -0.208642,
      "elevation": 10.140453
    },
    {
      "latitude": 51.469715,
      "longitude": -0.208616,
      "elevation": 10.1932955
    },
    {
      "latitude": 51.46974,
      "longitude": -0.208592,
      "elevation": 10.26394
    },
    {
      "latitude": 51.469765,
      "longitude": -0.208569,
      "elevation": 10.293572
    },
    {
      "latitude": 51.46979,
      "longitude": -0.20855,
      "elevation": 10.314246
    },
    {
      "latitude": 51.469814,
      "longitude": -0.208532,
      "elevation": 10.292479
    },
    {
      "latitude": 51.469845,
      "longitude": -0.208517,
      "elevation": 10.368997
    },
    {
      "latitude": 51.46988,
      "longitude": -0.208503,
      "elevation": 10.37601
    },
    {
      "latitude": 51.469913,
      "longitude": -0.208487,
      "elevation": 10.461375
    },
    {
      "latitude": 51.469948,
      "longitude": -0.208467,
      "elevation": 10.547566
    },
    {
      "latitude": 51.46998,
      "longitude": -0.208444,
      "elevation": 10.558844
    },
    {
      "latitude": 51.47001,
      "longitude": -0.208418,
      "elevation": 10.600969
    },
    {
      "latitude": 51.470036,
      "longitude": -0.208392,
      "elevation": 10.665743
    },
    {
      "latitude": 51.47006,
      "longitude": -0.208365,
      "elevation": 10.727901
    },
    {
      "latitude": 51.47008,
      "longitude": -0.208339,
      "elevation": 10.617559
    },
    {
      "latitude": 51.470104,
      "longitude": -0.208313,
      "elevation": 10.422788
    },
    {
      "latitude": 51.470127,
      "longitude": -0.208289,
      "elevation": 10.339181
    },
    {
      "latitude": 51.47015,
      "longitude": -0.208266,
      "elevation": 10.14334
    },
    {
      "latitude": 51.470173,
      "longitude": -0.208244,
      "elevation": 9.908433
    },
    {
      "latitude": 51.4702,
      "longitude": -0.208224,
      "elevation": 9.336762
    },
    {
      "latitude": 51.470222,
      "longitude": -0.208204,
      "elevation": 9.0199995
    },
    {
      "latitude": 51.47025,
      "longitude": -0.208184,
      "elevation": 8.860229
    },
    {
      "latitude": 51.47028,
      "longitude": -0.208162,
      "elevation": 8.7022295
    },
    {
      "latitude": 51.470306,
      "longitude": -0.208137,
      "elevation": 8.7022295
    },
    {
      "latitude": 51.470337,
      "longitude": -0.208113,
      "elevation": 8.257279
    },
    {
      "latitude": 51.470367,
      "longitude": -0.208094,
      "elevation": 7.9989595
    },
    {
      "latitude": 51.470398,
      "longitude": -0.208074,
      "elevation": 7.8838954
    },
    {
      "latitude": 51.470425,
      "longitude": -0.20805,
      "elevation": 7.683182
    },
    {
      "latitude": 51.47045,
      "longitude": -0.208018,
      "elevation": 7.520434
    },
    {
      "latitude": 51.470478,
      "longitude": -0.207987,
      "elevation": 7.3918753
    },
    {
      "latitude": 51.47051,
      "longitude": -0.207967,
      "elevation": 7.3388424
    },
    {
      "latitude": 51.470535,
      "longitude": -0.207954,
      "elevation": 7.3388424
    },
    {
      "latitude": 51.470566,
      "longitude": -0.207937,
      "elevation": 7.2924047
    },
    {
      "latitude": 51.470592,
      "longitude": -0.207912,
      "elevation": 7.2518935
    },
    {
      "latitude": 51.47062,
      "longitude": -0.207881,
      "elevation": 7.2924047
    },
    {
      "latitude": 51.470642,
      "longitude": -0.207849,
      "elevation": 7.2518935
    },
    {
      "latitude": 51.47067,
      "longitude": -0.207817,
      "elevation": 7.2518935
    },
    {
      "latitude": 51.47069,
      "longitude": -0.207784,
      "elevation": 7.2166667
    },
    {
      "latitude": 51.470715,
      "longitude": -0.207752,
      "elevation": 7.2518935
    },
    {
      "latitude": 51.470737,
      "longitude": -0.207719,
      "elevation": 7.2518935
    },
    {
      "latitude": 51.470757,
      "longitude": -0.207687,
      "elevation": 7.2924047
    },
    {
      "latitude": 51.47078,
      "longitude": -0.207652,
      "elevation": 7.3388424
    },
    {
      "latitude": 51.4708,
      "longitude": -0.207613,
      "elevation": 7.4521832
    },
    {
      "latitude": 51.47082,
      "longitude": -0.207569,
      "elevation": 7.8838954
    },
    {
      "latitude": 51.470844,
      "longitude": -0.207523,
      "elevation": 7.7743464
    },
    {
      "latitude": 51.470863,
      "longitude": -0.207481,
      "elevation": 7.866501
    },
    {
      "latitude": 51.470882,
      "longitude": -0.207442,
      "elevation": 7.971594
    },
    {
      "latitude": 51.470898,
      "longitude": -0.207404,
      "elevation": 8.237889
    },
    {
      "latitude": 51.47092,
      "longitude": -0.207367,
      "elevation": 8.233429
    },
    {
      "latitude": 51.470943,
      "longitude": -0.207331,
      "elevation": 8.383169
    },
    {
      "latitude": 51.470966,
      "longitude": -0.207297,
      "elevation": 8.382115
    },
    {
      "latitude": 51.47098,
      "longitude": -0.207257,
      "elevation": 8.54007
    },
    {
      "latitude": 51.470997,
      "longitude": -0.207208,
      "elevation": 8.699894
    },
    {
      "latitude": 51.471012,
      "longitude": -0.207163,
      "elevation": 8.857654
    },
    {
      "latitude": 51.47103,
      "longitude": -0.207125,
      "elevation": 8.699563
    },
    {
      "latitude": 51.471054,
      "longitude": -0.207091,
      "elevation": 8.8562975
    },
    {
      "latitude": 51.471073,
      "longitude": -0.207058,
      "elevation": 8.855738
    },
    {
      "latitude": 51.471092,
      "longitude": -0.207024,
      "elevation": 8.855235
    },
    {
      "latitude": 51.471107,
      "longitude": -0.20699,
      "elevation": 9.005946
    },
    {
      "latitude": 51.471123,
      "longitude": -0.206952,
      "elevation": 8.854431
    },
    {
      "latitude": 51.471138,
      "longitude": -0.20691,
      "elevation": 8.854086
    },
    {
      "latitude": 51.47115,
      "longitude": -0.206866,
      "elevation": 8.853822
    },
    {
      "latitude": 51.471165,
      "longitude": -0.20682,
      "elevation": 8.85374
    },
    {
      "latitude": 51.471184,
      "longitude": -0.206775,
      "elevation": 8.698539
    },
    {
      "latitude": 51.471203,
      "longitude": -0.206733,
      "elevation": 8.854456
    },
    {
      "latitude": 51.471226,
      "longitude": -0.206694,
      "elevation": 9.152091
    },
    {
      "latitude": 51.471252,
      "longitude": -0.206657,
      "elevation": 9.294426
    },
    {
      "latitude": 51.471275,
      "longitude": -0.206618,
      "elevation": 9.553983
    },
    {
      "latitude": 51.471294,
      "longitude": -0.206575,
      "elevation": 9.779559
    },
    {
      "latitude": 51.47131,
      "longitude": -0.206527,
      "elevation": 9.882507
    },
    {
      "latitude": 51.471325,
      "longitude": -0.206475,
      "elevation": 9.976768
    },
    {
      "latitude": 51.471336,
      "longitude": -0.20642,
      "elevation": 10.063533
    },
    {
      "latitude": 51.47135,
      "longitude": -0.206364,
      "elevation": 10.143188
    },
    {
      "latitude": 51.471367,
      "longitude": -0.20631,
      "elevation": 10.27417
    },
    {
      "latitude": 51.471382,
      "longitude": -0.206258,
      "elevation": 10.421592
    },
    {
      "latitude": 51.471405,
      "longitude": -0.20621,
      "elevation": 10.504826
    },
    {
      "latitude": 51.471428,
      "longitude": -0.206166,
      "elevation": 10.497286
    },
    {
      "latitude": 51.47145,
      "longitude": -0.206124,
      "elevation": 10.620453
    },
    {
      "latitude": 51.47147,
      "longitude": -0.206083,
      "elevation": 10.620131
    },
    {
      "latitude": 51.471485,
      "longitude": -0.206042,
      "elevation": 10.675405
    },
    {
      "latitude": 51.471497,
      "longitude": -0.206001,
      "elevation": 10.687226
    },
    {
      "latitude": 51.471504,
      "longitude": -0.20596,
      "elevation": 10.711552
    },
    {
      "latitude": 51.47151,
      "longitude": -0.205922,
      "elevation": 10.720274
    },
    {
      "latitude": 51.47152,
      "longitude": -0.205888,
      "elevation": 10.7438545
    },
    {
      "latitude": 51.471535,
      "longitude": -0.205857,
      "elevation": 10.744217
    },
    {
      "latitude": 51.47155,
      "longitude": -0.205827,
      "elevation": 10.768589
    },
    {
      "latitude": 51.47157,
      "longitude": -0.205798,
      "elevation": 10.856176
    },
    {
      "latitude": 51.47159,
      "longitude": -0.205769,
      "elevation": 10.933854
    },
    {
      "latitude": 51.471603,
      "longitude": -0.205742,
      "elevation": 11.014831
    },
    {
      "latitude": 51.47162,
      "longitude": -0.205714,
      "elevation": 11.076483
    },
    {
      "latitude": 51.471634,
      "longitude": -0.205686,
      "elevation": 11.128607
    },
    {
      "latitude": 51.47165,
      "longitude": -0.205657,
      "elevation": 11.182605
    },
    {
      "latitude": 51.47166,
      "longitude": -0.20563,
      "elevation": 11.234739
    },
    {
      "latitude": 51.471676,
      "longitude": -0.205604,
      "elevation": 11.266666
    },
    {
      "latitude": 51.471687,
      "longitude": -0.205577,
      "elevation": 11.290351
    },
    {
      "latitude": 51.4717,
      "longitude": -0.205549,
      "elevation": 11.314426
    },
    {
      "latitude": 51.471706,
      "longitude": -0.205518,
      "elevation": 11.340427
    },
    {
      "latitude": 51.471714,
      "longitude": -0.205483,
      "elevation": 11.370249
    },
    {
      "latitude": 51.47172,
      "longitude": -0.205445,
      "elevation": 11.401779
    },
    {
      "latitude": 51.471733,
      "longitude": -0.205402,
      "elevation": 11.435368
    },
    {
      "latitude": 51.471745,
      "longitude": -0.205355,
      "elevation": 11.467735
    },
    {
      "latitude": 51.471756,
      "longitude": -0.205302,
      "elevation": 11.497795
    },
    {
      "latitude": 51.47177,
      "longitude": -0.205248,
      "elevation": 11.520094
    },
    {
      "latitude": 51.47179,
      "longitude": -0.205197,
      "elevation": 11.533939
    },
    {
      "latitude": 51.47181,
      "longitude": -0.20515,
      "elevation": 11.537572
    },
    {
      "latitude": 51.471825,
      "longitude": -0.205105,
      "elevation": 11.534436
    },
    {
      "latitude": 51.47184,
      "longitude": -0.205058,
      "elevation": 11.534641
    },
    {
      "latitude": 51.47185,
      "longitude": -0.205009,
      "elevation": 11.53835
    },
    {
      "latitude": 51.471867,
      "longitude": -0.204958,
      "elevation": 11.503243
    },
    {
      "latitude": 51.47188,
      "longitude": -0.204907,
      "elevation": 11.465622
    },
    {
      "latitude": 51.471897,
      "longitude": -0.20486,
      "elevation": 11.430802
    },
    {
      "latitude": 51.471912,
      "longitude": -0.204824,
      "elevation": 11.393018
    },
    {
      "latitude": 51.471928,
      "longitude": -0.204791,
      "elevation": 11.357449
    },
    {
      "latitude": 51.471947,
      "longitude": -0.204755,
      "elevation": 11.310285
    },
    {
      "latitude": 51.47197,
      "longitude": -0.204711,
      "elevation": 11.260259
    },
    {
      "latitude": 51.47199,
      "longitude": -0.204666,
      "elevation": 11.210966
    },
    {
      "latitude": 51.472,
      "longitude": -0.204624,
      "elevation": 11.182602
    },
    {
      "latitude": 51.472015,
      "longitude": -0.204574,
      "elevation": 11.14463
    },
    {
      "latitude": 51.47204,
      "longitude": -0.204506,
      "elevation": 11.084314
    },
    {
      "latitude": 51.47205,
      "longitude": -0.204442,
      "elevation": 11.066661
    },
    {
      "latitude": 51.472054,
      "longitude": -0.204386,
      "elevation": 11.059135
    },
    {
      "latitude": 51.47206,
      "longitude": -0.204334,
      "elevation": 11.04555
    },
    {
      "latitude": 51.472073,
      "longitude": -0.204284,
      "elevation": 11.021503
    },
    {
      "latitude": 51.472084,
      "longitude": -0.204234,
      "elevation": 10.993683
    },
    {
      "latitude": 51.472095,
      "longitude": -0.204185,
      "elevation": 10.966763
    },
    {
      "latitude": 51.472107,
      "longitude": -0.204135,
      "elevation": 10.940845
    },
    {
      "latitude": 51.472115,
      "longitude": -0.204082,
      "elevation": 10.919295
    },
    {
      "latitude": 51.472122,
      "longitude": -0.204028,
      "elevation": 10.902868
    },
    {
      "latitude": 51.47213,
      "longitude": -0.203975,
      "elevation": 10.888778
    },
    {
      "latitude": 51.472137,
      "longitude": -0.203923,
      "elevation": 10.872441
    },
    {
      "latitude": 51.472145,
      "longitude": -0.203874,
      "elevation": 10.853432
    },
    {
      "latitude": 51.472157,
      "longitude": -0.203828,
      "elevation": 10.826893
    },
    {
      "latitude": 51.472164,
      "longitude": -0.203786,
      "elevation": 10.807526
    },
    {
      "latitude": 51.472168,
      "longitude": -0.203746,
      "elevation": 10.795066
    },
    {
      "latitude": 51.472176,
      "longitude": -0.203708,
      "elevation": 10.770431
    },
    {
      "latitude": 51.472183,
      "longitude": -0.203662,
      "elevation": 10.744673
    },
    {
      "latitude": 51.472195,
      "longitude": -0.203611,
      "elevation": 10.700617
    },
    {
      "latitude": 51.472202,
      "longitude": -0.203558,
      "elevation": 10.659632
    },
    {
      "latitude": 51.47221,
      "longitude": -0.203505,
      "elevation": 10.637026
    },
    {
      "latitude": 51.472214,
      "longitude": -0.20345,
      "elevation": 10.593632
    },
    {
      "latitude": 51.472214,
      "longitude": -0.203397,
      "elevation": 10.572915
    },
    {
      "latitude": 51.472218,
      "longitude": -0.203345,
      "elevation": 10.627766
    },
    {
      "latitude": 51.47222,
      "longitude": -0.203295,
      "elevation": 10.594412
    },
    {
      "latitude": 51.47223,
      "longitude": -0.203245,
      "elevation": 10.552431
    },
    {
      "latitude": 51.472237,
      "longitude": -0.203195,
      "elevation": 10.504932
    },
    {
      "latitude": 51.472244,
      "longitude": -0.203145,
      "elevation": 10.455075
    },
    {
      "latitude": 51.47225,
      "longitude": -0.203094,
      "elevation": 10.404755
    },
    {
      "latitude": 51.47226,
      "longitude": -0.203042,
      "elevation": 10.365215
    },
    {
      "latitude": 51.472267,
      "longitude": -0.20299,
      "elevation": 10.318264
    },
    {
      "latitude": 51.472275,
      "longitude": -0.202939,
      "elevation": 10.277238
    },
    {
      "latitude": 51.472282,
      "longitude": -0.202888,
      "elevation": 10.232635
    },
    {
      "latitude": 51.47229,
      "longitude": -0.202839,
      "elevation": 10.194474
    },
    {
      "latitude": 51.472298,
      "longitude": -0.20279,
      "elevation": 10.159206
    },
    {
      "latitude": 51.472305,
      "longitude": -0.202741,
      "elevation": 10.124126
    },
    {
      "latitude": 51.472313,
      "longitude": -0.202691,
      "elevation": 10.09279
    },
    {
      "latitude": 51.47232,
      "longitude": -0.20264,
      "elevation": 10.0617285
    },
    {
      "latitude": 51.472324,
      "longitude": -0.202586,
      "elevation": 10.0332985
    },
    {
      "latitude": 51.472324,
      "longitude": -0.202531,
      "elevation": 10.006976
    },
    {
      "latitude": 51.472324,
      "longitude": -0.202478,
      "elevation": 9.981598
    },
    {
      "latitude": 51.47232,
      "longitude": -0.202428,
      "elevation": 9.956023
    },
    {
      "latitude": 51.47232,
      "longitude": -0.202379,
      "elevation": 9.928486
    },
    {
      "latitude": 51.47233,
      "longitude": -0.202328,
      "elevation": 9.903437
    },
    {
      "latitude": 51.472336,
      "longitude": -0.202276,
      "elevation": 9.88355
    },
    {
      "latitude": 51.472347,
      "longitude": -0.202226,
      "elevation": 9.873549
    },
    {
      "latitude": 51.472363,
      "longitude": -0.202178,
      "elevation": 9.867447
    },
    {
      "latitude": 51.472378,
      "longitude": -0.202132,
      "elevation": 9.864256
    },
    {
      "latitude": 51.472393,
      "longitude": -0.202089,
      "elevation": 9.864592
    },
    {
      "latitude": 51.472404,
      "longitude": -0.202047,
      "elevation": 9.86958
    },
    {
      "latitude": 51.472416,
      "longitude": -0.202006,
      "elevation": 9.87636
    },
    {
      "latitude": 51.472427,
      "longitude": -0.201962,
      "elevation": 9.881309
    },
    {
      "latitude": 51.472435,
      "longitude": -0.201914,
      "elevation": 9.880917
    },
    {
      "latitude": 51.47244,
      "longitude": -0.201861,
      "elevation": 9.880544
    },
    {
      "latitude": 51.472443,
      "longitude": -0.201805,
      "elevation": 9.878888
    },
    {
      "latitude": 51.472446,
      "longitude": -0.20175,
      "elevation": 9.87866
    },
    {
      "latitude": 51.472454,
      "longitude": -0.201697,
      "elevation": 9.882253
    },
    {
      "latitude": 51.47246,
      "longitude": -0.20165,
      "elevation": 9.891385
    },
    {
      "latitude": 51.47247,
      "longitude": -0.20161,
      "elevation": 9.91521
    },
    {
      "latitude": 51.472485,
      "longitude": -0.201576,
      "elevation": 9.943568
    },
    {
      "latitude": 51.4725,
      "longitude": -0.201544,
      "elevation": 9.978997
    },
    {
      "latitude": 51.47251,
      "longitude": -0.201512,
      "elevation": 9.992864
    },
    {
      "latitude": 51.472527,
      "longitude": -0.201476,
      "elevation": 10.006465
    },
    {
      "latitude": 51.47254,
      "longitude": -0.201433,
      "elevation": 10.031502
    },
    {
      "latitude": 51.472553,
      "longitude": -0.201385,
      "elevation": 10.047434
    },
    {
      "latitude": 51.47256,
      "longitude": -0.201344,
      "elevation": 10.066648
    },
    {
      "latitude": 51.472565,
      "longitude": -0.201303,
      "elevation": 10.075631
    },
    {
      "latitude": 51.472576,
      "longitude": -0.201268,
      "elevation": 10.088783
    },
    {
      "latitude": 51.472588,
      "longitude": -0.201233,
      "elevation": 10.103131
    },
    {
      "latitude": 51.472603,
      "longitude": -0.201191,
      "elevation": 10.118497
    },
    {
      "latitude": 51.472614,
      "longitude": -0.201144,
      "elevation": 10.134367
    },
    {
      "latitude": 51.472626,
      "longitude": -0.201093,
      "elevation": 10.147736
    },
    {
      "latitude": 51.472633,
      "longitude": -0.201041,
      "elevation": 10.160921
    },
    {
      "latitude": 51.472645,
      "longitude": -0.20099,
      "elevation": 10.172719
    },
    {
      "latitude": 51.472652,
      "longitude": -0.20094,
      "elevation": 10.18328
    },
    {
      "latitude": 51.472664,
      "longitude": -0.200893,
      "elevation": 10.194064
    },
    {
      "latitude": 51.47267,
      "longitude": -0.200847,
      "elevation": 10.206275
    },
    {
      "latitude": 51.472683,
      "longitude": -0.200804,
      "elevation": 10.225744
    },
    {
      "latitude": 51.472694,
      "longitude": -0.200762,
      "elevation": 10.251788
    },
    {
      "latitude": 51.47271,
      "longitude": -0.200721,
      "elevation": 10.280067
    },
    {
      "latitude": 51.47272,
      "longitude": -0.20068,
      "elevation": 10.311528
    },
    {
      "latitude": 51.472736,
      "longitude": -0.200639,
      "elevation": 10.337868
    },
    {
      "latitude": 51.472755,
      "longitude": -0.200598,
      "elevation": 10.3734045
    },
    {
      "latitude": 51.47277,
      "longitude": -0.200552,
      "elevation": 10.41626
    },
    {
      "latitude": 51.472782,
      "longitude": -0.2005,
      "elevation": 10.463278
    },
    {
      "latitude": 51.472794,
      "longitude": -0.200448,
      "elevation": 10.505401
    },
    {
      "latitude": 51.4728,
      "longitude": -0.200398,
      "elevation": 10.535008
    },
    {
      "latitude": 51.47281,
      "longitude": -0.200349,
      "elevation": 10.557142
    },
    {
      "latitude": 51.472816,
      "longitude": -0.200299,
      "elevation": 10.519241
    },
    {
      "latitude": 51.472828,
      "longitude": -0.200251,
      "elevation": 10.555286
    },
    {
      "latitude": 51.472836,
      "longitude": -0.200202,
      "elevation": 10.571425
    },
    {
      "latitude": 51.472843,
      "longitude": -0.200153,
      "elevation": 10.581801
    },
    {
      "latitude": 51.47285,
      "longitude": -0.200104,
      "elevation": 10.639531
    },
    {
      "latitude": 51.47286,
      "longitude": -0.200052,
      "elevation": 10.699621
    },
    {
      "latitude": 51.472866,
      "longitude": -0.199999,
      "elevation": 10.716466
    },
    {
      "latitude": 51.472874,
      "longitude": -0.199944,
      "elevation": 10.709654
    },
    {
      "latitude": 51.47288,
      "longitude": -0.19989,
      "elevation": 10.741711
    },
    {
      "latitude": 51.47289,
      "longitude": -0.199836,
      "elevation": 10.711695
    },
    {
      "latitude": 51.472897,
      "longitude": -0.199783,
      "elevation": 10.70029
    },
    {
      "latitude": 51.472908,
      "longitude": -0.19973,
      "elevation": 10.614143
    },
    {
      "latitude": 51.472916,
      "longitude": -0.199678,
      "elevation": 10.655187
    },
    {
      "latitude": 51.472923,
      "longitude": -0.199627,
      "elevation": 10.709565
    },
    {
      "latitude": 51.47293,
      "longitude": -0.199575,
      "elevation": 10.712649
    },
    {
      "latitude": 51.472935,
      "longitude": -0.199523,
      "elevation": 10.68707
    },
    {
      "latitude": 51.472935,
      "longitude": -0.199472,
      "elevation": 10.6264925
    },
    {
      "latitude": 51.472935,
      "longitude": -0.19943,
      "elevation": 10.617393
    },
    {
      "latitude": 51.47294,
      "longitude": -0.1994,
      "elevation": 10.624576
    },
    {
      "latitude": 51.472946,
      "longitude": -0.199368,
      "elevation": 10.627565
    },
    {
      "latitude": 51.472954,
      "longitude": -0.19933,
      "elevation": 10.590268
    },
    {
      "latitude": 51.472958,
      "longitude": -0.199287,
      "elevation": 10.560585
    },
    {
      "latitude": 51.47296,
      "longitude": -0.199244,
      "elevation": 10.547345
    },
    {
      "latitude": 51.47296,
      "longitude": -0.199202,
      "elevation": 10.522221
    },
    {
      "latitude": 51.472965,
      "longitude": -0.199154,
      "elevation": 10.492003
    },
    {
      "latitude": 51.472973,
      "longitude": -0.199099,
      "elevation": 10.393783
    },
    {
      "latitude": 51.472977,
      "longitude": -0.199039,
      "elevation": 10.288782
    },
    {
      "latitude": 51.472977,
      "longitude": -0.19898,
      "elevation": 10.185724
    },
    {
      "latitude": 51.472973,
      "longitude": -0.198924,
      "elevation": 10.062345
    },
    {
      "latitude": 51.472965,
      "longitude": -0.198877,
      "elevation": 9.975003
    },
    {
      "latitude": 51.472965,
      "longitude": -0.198832,
      "elevation": 9.899288
    },
    {
      "latitude": 51.47297,
      "longitude": -0.198785,
      "elevation": 9.815428
    },
    {
      "latitude": 51.472973,
      "longitude": -0.198737,
      "elevation": 9.741726
    },
    {
      "latitude": 51.47298,
      "longitude": -0.198693,
      "elevation": 9.657305
    },
    {
      "latitude": 51.472984,
      "longitude": -0.198653,
      "elevation": 9.582001
    },
    {
      "latitude": 51.472996,
      "longitude": -0.198611,
      "elevation": 9.499628
    },
    {
      "latitude": 51.47301,
      "longitude": -0.198564,
      "elevation": 9.4005165
    },
    {
      "latitude": 51.473026,
      "longitude": -0.198519,
      "elevation": 9.305544
    },
    {
      "latitude": 51.473034,
      "longitude": -0.198481,
      "elevation": 9.22759
    },
    {
      "latitude": 51.473045,
      "longitude": -0.198437,
      "elevation": 9.112558
    },
    {
      "latitude": 51.47306,
      "longitude": -0.198388,
      "elevation": 8.993603
    },
    {
      "latitude": 51.473072,
      "longitude": -0.198339,
      "elevation": 8.934288
    },
    {
      "latitude": 51.47308,
      "longitude": -0.198292,
      "elevation": 8.923691
    },
    {
      "latitude": 51.47309,
      "longitude": -0.198249,
      "elevation": 8.923691
    },
    {
      "latitude": 51.473103,
      "longitude": -0.198209,
      "elevation": 8.910747
    },
    {
      "latitude": 51.473118,
      "longitude": -0.198174,
      "elevation": 8.910747
    },
    {
      "latitude": 51.47314,
      "longitude": -0.198145,
      "elevation": 8.895663
    },
    {
      "latitude": 51.473164,
      "longitude": -0.198116,
      "elevation": 8.878112
    },
    {
      "latitude": 51.473186,
      "longitude": -0.198082,
      "elevation": 8.878112
    },
    {
      "latitude": 51.473206,
      "longitude": -0.19804,
      "elevation": 8.857716
    },
    {
      "latitude": 51.47322,
      "longitude": -0.197994,
      "elevation": 8.857716
    },
    {
      "latitude": 51.47324,
      "longitude": -0.197949,
      "elevation": 8.857716
    },
    {
      "latitude": 51.473255,
      "longitude": -0.197904,
      "elevation": 8.834051
    },
    {
      "latitude": 51.473278,
      "longitude": -0.197859,
      "elevation": 8.834051
    },
    {
      "latitude": 51.4733,
      "longitude": -0.197814,
      "elevation": 8.834051
    },
    {
      "latitude": 51.473324,
      "longitude": -0.197771,
      "elevation": 8.806649
    },
    {
      "latitude": 51.473343,
      "longitude": -0.197736,
      "elevation": 8.702542
    },
    {
      "latitude": 51.473366,
      "longitude": -0.197709,
      "elevation": 8.395168
    },
    {
      "latitude": 51.473385,
      "longitude": -0.197686,
      "elevation": 7.852123
    },
    {
      "latitude": 51.473408,
      "longitude": -0.197658,
      "elevation": 7.987102
    },
    {
      "latitude": 51.473434,
      "longitude": -0.197618,
      "elevation": 8.116905
    },
    {
      "latitude": 51.473457,
      "longitude": -0.197575,
      "elevation": 8.124767
    },
    {
      "latitude": 51.473476,
      "longitude": -0.197539,
      "elevation": 7.8683815
    },
    {
      "latitude": 51.47349,
      "longitude": -0.197506,
      "elevation": 8.365769
    },
    {
      "latitude": 51.473507,
      "longitude": -0.197469,
      "elevation": 8.384774
    },
    {
      "latitude": 51.473522,
      "longitude": -0.197424,
      "elevation": 8.407899
    },
    {
      "latitude": 51.473545,
      "longitude": -0.197377,
      "elevation": 8.431143
    },
    {
      "latitude": 51.47357,
      "longitude": -0.197334,
      "elevation": 8.570259
    },
    {
      "latitude": 51.473602,
      "longitude": -0.197296,
      "elevation": 8.987026
    },
    {
      "latitude": 51.473633,
      "longitude": -0.197258,
      "elevation": 9.176672
    },
    {
      "latitude": 51.473656,
      "longitude": -0.19722,
      "elevation": 9.393919
    },
    {
      "latitude": 51.47367,
      "longitude": -0.197182,
      "elevation": 9.48618
    },
    {
      "latitude": 51.473682,
      "longitude": -0.197145,
      "elevation": 9.608837
    },
    {
      "latitude": 51.47369,
      "longitude": -0.197108,
      "elevation": 9.651557
    },
    {
      "latitude": 51.4737,
      "longitude": -0.197071,
      "elevation": 9.6963825
    },
    {
      "latitude": 51.473717,
      "longitude": -0.197034,
      "elevation": 9.815949
    },
    {
      "latitude": 51.47374,
      "longitude": -0.196999,
      "elevation": 9.8360405
    },
    {
      "latitude": 51.47377,
      "longitude": -0.196964,
      "elevation": 9.893924
    },
    {
      "latitude": 51.4738,
      "longitude": -0.19693,
      "elevation": 10.026512
    },
    {
      "latitude": 51.473827,
      "longitude": -0.196896,
      "elevation": 9.897924
    },
    {
      "latitude": 51.47385,
      "longitude": -0.19686,
      "elevation": 9.51234
    },
    {
      "latitude": 51.47387,
      "longitude": -0.196825,
      "elevation": 9.005359
    },
    {
      "latitude": 51.473892,
      "longitude": -0.196791,
      "elevation": 8.539999
    },
    {
      "latitude": 51.473915,
      "longitude": -0.196757,
      "elevation": 8.380751
    },
    {
      "latitude": 51.47394,
      "longitude": -0.196723,
      "elevation": 7.934796
    },
    {
      "latitude": 51.473965,
      "longitude": -0.196685,
      "elevation": 7.6935797
    },
    {
      "latitude": 51.473988,
      "longitude": -0.196647,
      "elevation": 7.499658
    },
    {
      "latitude": 51.47401,
      "longitude": -0.19661,
      "elevation": 7.42304
    },
    {
      "latitude": 51.47403,
      "longitude": -0.196573,
      "elevation": 7.7230253
    },
    {
      "latitude": 51.474052,
      "longitude": -0.19653,
      "elevation": 7.968232
    },
    {
      "latitude": 51.474075,
      "longitude": -0.196479,
      "elevation": 7.8516335
    },
    {
      "latitude": 51.474094,
      "longitude": -0.196433,
      "elevation": 7.747994
    },
    {
      "latitude": 51.474113,
      "longitude": -0.196401,
      "elevation": 7.487152
    },
    {
      "latitude": 51.474133,
      "longitude": -0.196378,
      "elevation": 7.428945
    },
    {
      "latitude": 51.474148,
      "longitude": -0.196352,
      "elevation": 7.508907
    },
    {
      "latitude": 51.47416,
      "longitude": -0.196318,
      "elevation": 7.592741
    },
    {
      "latitude": 51.47417,
      "longitude": -0.196277,
      "elevation": 7.8826528
    },
    {
      "latitude": 51.474186,
      "longitude": -0.196234,
      "elevation": 8.119242
    },
    {
      "latitude": 51.474205,
      "longitude": -0.196191,
      "elevation": 7.869624
    },
    {
      "latitude": 51.474228,
      "longitude": -0.196148,
      "elevation": 7.7522383
    },
    {
      "latitude": 51.47425,
      "longitude": -0.196105,
      "elevation": 7.64171
    },
    {
      "latitude": 51.47427,
      "longitude": -0.196063,
      "elevation": 7.6323195
    },
    {
      "latitude": 51.474285,
      "longitude": -0.196021,
      "elevation": 7.530517
    },
    {
      "latitude": 51.4743,
      "longitude": -0.195983,
      "elevation": 7.619094
    },
    {
      "latitude": 51.47431,
      "longitude": -0.195951,
      "elevation": 7.6141987
    },
    {
      "latitude": 51.47432,
      "longitude": -0.195926,
      "elevation": 7.6102433
    },
    {
      "latitude": 51.47433,
      "longitude": -0.195901,
      "elevation": 7.829899
    },
    {
      "latitude": 51.474346,
      "longitude": -0.19587,
      "elevation": 7.8254237
    },
    {
      "latitude": 51.474365,
      "longitude": -0.195836,
      "elevation": 7.590314
    },
    {
      "latitude": 51.474384,
      "longitude": -0.195801,
      "elevation": 7.5728345
    },
    {
      "latitude": 51.474403,
      "longitude": -0.195769,
      "elevation": 7.18895
    },
    {
      "latitude": 51.474422,
      "longitude": -0.195737,
      "elevation": 7.0923886
    },
    {
      "latitude": 51.474438,
      "longitude": -0.195705,
      "elevation": 6.848789
    },
    {
      "latitude": 51.474457,
      "longitude": -0.195674,
      "elevation": 6.9170465
    },
    {
      "latitude": 51.474476,
      "longitude": -0.195646,
      "elevation": 7.1896596
    },
    {
      "latitude": 51.4745,
      "longitude": -0.195612,
      "elevation": 7.500446
    },
    {
      "latitude": 51.474525,
      "longitude": -0.195573,
      "elevation": 8.062992
    },
    {
      "latitude": 51.474552,
      "longitude": -0.19553,
      "elevation": 8.696198
    },
    {
      "latitude": 51.47458,
      "longitude": -0.195486,
      "elevation": 8.69451
    },
    {
      "latitude": 51.474606,
      "longitude": -0.195442,
      "elevation": 8.692626
    },
    {
      "latitude": 51.47463,
      "longitude": -0.195402,
      "elevation": 8.838509
    },
    {
      "latitude": 51.47465,
      "longitude": -0.195364,
      "elevation": 8.974157
    },
    {
      "latitude": 51.474678,
      "longitude": -0.195329,
      "elevation": 9.098341
    },
    {
      "latitude": 51.4747,
      "longitude": -0.195295,
      "elevation": 9.416609
    },
    {
      "latitude": 51.474728,
      "longitude": -0.195263,
      "elevation": 9.406534
    },
    {
      "latitude": 51.47476,
      "longitude": -0.19523,
      "elevation": 9.39674
    },
    {
      "latitude": 51.474792,
      "longitude": -0.195195,
      "elevation": 9.54767
    },
    {
      "latitude": 51.474827,
      "longitude": -0.195159,
      "elevation": 9.285891
    },
    {
      "latitude": 51.474865,
      "longitude": -0.195123,
      "elevation": 8.945066
    },
    {
      "latitude": 51.474903,
      "longitude": -0.195087,
      "elevation": 8.2192545
    },
    {
      "latitude": 51.474937,
      "longitude": -0.195053,
      "elevation": 8.527571
    },
    {
      "latitude": 51.47497,
      "longitude": -0.195022,
      "elevation": 8.940079
    },
    {
      "latitude": 51.475002,
      "longitude": -0.194991,
      "elevation": 9.437256
    },
    {
      "latitude": 51.475033,
      "longitude": -0.194961,
      "elevation": 9.58171
    },
    {
      "latitude": 51.47506,
      "longitude": -0.19493,
      "elevation": 9.580474
    },
    {
      "latitude": 51.475086,
      "longitude": -0.194897,
      "elevation": 9.569943
    },
    {
      "latitude": 51.47511,
      "longitude": -0.194863,
      "elevation": 9.291897
    },
    {
      "latitude": 51.475132,
      "longitude": -0.194831,
      "elevation": 9.122681
    },
    {
      "latitude": 51.475155,
      "longitude": -0.194802,
      "elevation": 8.930836
    },
    {
      "latitude": 51.475174,
      "longitude": -0.194775,
      "elevation": 8.99523
    },
    {
      "latitude": 51.475197,
      "longitude": -0.19475,
      "elevation": 8.884276
    },
    {
      "latitude": 51.475224,
      "longitude": -0.194723,
      "elevation": 8.999733
    },
    {
      "latitude": 51.475254,
      "longitude": -0.194695,
      "elevation": 8.957731
    },
    {
      "latitude": 51.475285,
      "longitude": -0.194667,
      "elevation": 8.914265
    },
    {
      "latitude": 51.47531,
      "longitude": -0.19464,
      "elevation": 8.921184
    },
    {
      "latitude": 51.47534,
      "longitude": -0.194612,
      "elevation": 9.012181
    },
    {
      "latitude": 51.475372,
      "longitude": -0.194583,
      "elevation": 9.008097
    },
    {
      "latitude": 51.4754,
      "longitude": -0.194554,
      "elevation": 8.972174
    },
    {
      "latitude": 51.47542,
      "longitude": -0.194524,
      "elevation": 8.929926
    },
    {
      "latitude": 51.47545,
      "longitude": -0.194492,
      "elevation": 8.882938
    },
    {
      "latitude": 51.475475,
      "longitude": -0.194459,
      "elevation": 8.827513
    },
    {
      "latitude": 51.47551,
      "longitude": -0.194423,
      "elevation": 8.758786
    },
    {
      "latitude": 51.475536,
      "longitude": -0.194389,
      "elevation": 8.704212
    },
    {
      "latitude": 51.475567,
      "longitude": -0.194357,
      "elevation": 8.626542
    },
    {
      "latitude": 51.475594,
      "longitude": -0.194325,
      "elevation": 8.551691
    },
    {
      "latitude": 51.475613,
      "longitude": -0.194294,
      "elevation": 8.517742
    },
    {
      "latitude": 51.47563,
      "longitude": -0.194259,
      "elevation": 8.429483
    },
    {
      "latitude": 51.47566,
      "longitude": -0.19422,
      "elevation": 8.353809
    },
    {
      "latitude": 51.475677,
      "longitude": -0.194181,
      "elevation": 8.265001
    },
    {
      "latitude": 51.4757,
      "longitude": -0.194143,
      "elevation": 8.201857
    },
    {
      "latitude": 51.475716,
      "longitude": -0.194106,
      "elevation": 8.195153
    },
    {
      "latitude": 51.47573,
      "longitude": -0.19407,
      "elevation": 8.192632
    },
    {
      "latitude": 51.475746,
      "longitude": -0.194036,
      "elevation": 8.1124735
    },
    {
      "latitude": 51.47576,
      "longitude": -0.194003,
      "elevation": 8.077295
    },
    {
      "latitude": 51.47578,
      "longitude": -0.193969,
      "elevation": 8.038386
    },
    {
      "latitude": 51.4758,
      "longitude": -0.193931,
      "elevation": 7.8105397
    },
    {
      "latitude": 51.475822,
      "longitude": -0.193889,
      "elevation": 7.737988
    },
    {
      "latitude": 51.475845,
      "longitude": -0.193849,
      "elevation": 7.5678997
    },
    {
      "latitude": 51.47586,
      "longitude": -0.193816,
      "elevation": 7.351527
    },
    {
      "latitude": 51.47588,
      "longitude": -0.193787,
      "elevation": 7.083493
    },
    {
      "latitude": 51.475895,
      "longitude": -0.193755,
      "elevation": 6.619989
    },
    {
      "latitude": 51.475918,
      "longitude": -0.193716,
      "elevation": 6.6200013
    },
    {
      "latitude": 51.475945,
      "longitude": -0.193673,
      "elevation": 6.4615436
    },
    {
      "latitude": 51.47597,
      "longitude": -0.19363,
      "elevation": 6.4635415
    },
    {
      "latitude": 51.476,
      "longitude": -0.193591,
      "elevation": 6.4665413
    },
    {
      "latitude": 51.47603,
      "longitude": -0.193557,
      "elevation": 6.6234226
    },
    {
      "latitude": 51.476055,
      "longitude": -0.193529,
      "elevation": 6.475133
    },
    {
      "latitude": 51.476086,
      "longitude": -0.1935,
      "elevation": 6.629053
    },
    {
      "latitude": 51.476112,
      "longitude": -0.193465,
      "elevation": 6.7851562
    },
    {
      "latitude": 51.47614,
      "longitude": -0.193425,
      "elevation": 6.942653
    },
    {
      "latitude": 51.476162,
      "longitude": -0.193386,
      "elevation": 6.793631
    },
    {
      "latitude": 51.47618,
      "longitude": -0.193356,
      "elevation": 6.655916
    },
    {
      "latitude": 51.4762,
      "longitude": -0.193329,
      "elevation": 6.6628895
    },
    {
      "latitude": 51.476223,
      "longitude": -0.193299,
      "elevation": 6.664501
    },
    {
      "latitude": 51.47625,
      "longitude": -0.193265,
      "elevation": 6.8048205
    },
    {
      "latitude": 51.476273,
      "longitude": -0.193231,
      "elevation": 6.805121
    },
    {
      "latitude": 51.47629,
      "longitude": -0.1932,
      "elevation": 6.6663485
    },
    {
      "latitude": 51.47632,
      "longitude": -0.193173,
      "elevation": 6.8059926
    },
    {
      "latitude": 51.47634,
      "longitude": -0.193146,
      "elevation": 6.952282
    },
    {
      "latitude": 51.476364,
      "longitude": -0.193117,
      "elevation": 7.1042743
    },
    {
      "latitude": 51.476387,
      "longitude": -0.193087,
      "elevation": 7.1041255
    },
    {
      "latitude": 51.47641,
      "longitude": -0.193057,
      "elevation": 7.4200063
    },
    {
      "latitude": 51.476433,
      "longitude": -0.193027,
      "elevation": 7.5798316
    },
    {
      "latitude": 51.47645,
      "longitude": -0.192998,
      "elevation": 7.892278
    },
    {
      "latitude": 51.476475,
      "longitude": -0.192969,
      "elevation": 8.181797
    },
    {
      "latitude": 51.476498,
      "longitude": -0.192938,
      "elevation": 8.179785
    },
    {
      "latitude": 51.47652,
      "longitude": -0.192905,
      "elevation": 8.0371475
    },
    {
      "latitude": 51.476543,
      "longitude": -0.192871,
      "elevation": 8.034919
    },
    {
      "latitude": 51.476566,
      "longitude": -0.192837,
      "elevation": 8.169989
    },
    {
      "latitude": 51.47659,
      "longitude": -0.192802,
      "elevation": 8.410666
    },
    {
      "latitude": 51.47661,
      "longitude": -0.192766,
      "elevation": 8.401494
    },
    {
      "latitude": 51.47663,
      "longitude": -0.19273,
      "elevation": 8.495409
    },
    {
      "latitude": 51.47665,
      "longitude": -0.192692,
      "elevation": 8.480685
    },
    {
      "latitude": 51.476665,
      "longitude": -0.192653,
      "elevation": 8.364131
    },
    {
      "latitude": 51.476685,
      "longitude": -0.192609,
      "elevation": 8.660172
    },
    {
      "latitude": 51.476704,
      "longitude": -0.192561,
      "elevation": 8.546154
    },
    {
      "latitude": 51.476723,
      "longitude": -0.192523,
      "elevation": 8.5059595
    },
    {
      "latitude": 51.476746,
      "longitude": -0.192491,
      "elevation": 8.398987
    },
    {
      "latitude": 51.476765,
      "longitude": -0.192453,
      "elevation": 8.34131
    },
    {
      "latitude": 51.476784,
      "longitude": -0.192409,
      "elevation": 8.277637
    },
    {
      "latitude": 51.476807,
      "longitude": -0.192361,
      "elevation": 8.087756
    },
    {
      "latitude": 51.476826,
      "longitude": -0.192312,
      "elevation": 8.031773
    },
    {
      "latitude": 51.47685,
      "longitude": -0.192263,
      "elevation": 7.978239
    },
    {
      "latitude": 51.47687,
      "longitude": -0.192217,
      "elevation": 7.984917
    },
    {
      "latitude": 51.476894,
      "longitude": -0.192173,
      "elevation": 8.024814
    },
    {
      "latitude": 51.476913,
      "longitude": -0.19213,
      "elevation": 7.983278
    },
    {
      "latitude": 51.47693,
      "longitude": -0.192089,
      "elevation": 7.871349
    },
    {
      "latitude": 51.476944,
      "longitude": -0.192051,
      "elevation": 7.8831987
    },
    {
      "latitude": 51.47696,
      "longitude": -0.192018,
      "elevation": 7.7307324
    },
    {
      "latitude": 51.476982,
      "longitude": -0.191991,
      "elevation": 7.7244315
    },
    {
      "latitude": 51.477005,
      "longitude": -0.191967,
      "elevation": 7.7254653
    },
    {
      "latitude": 51.47703,
      "longitude": -0.191944,
      "elevation": 7.673486
    },
    {
      "latitude": 51.477055,
      "longitude": -0.191919,
      "elevation": 7.6142
    },
    {
      "latitude": 51.47708,
      "longitude": -0.1919,
      "elevation": 7.692965
    },
    {
      "latitude": 51.477108,
      "longitude": -0.191894,
      "elevation": 7.7146096
    },
    {
      "latitude": 51.477135,
      "longitude": -0.191893,
      "elevation": 7.855802
    },
    {
      "latitude": 51.47716,
      "longitude": -0.191888,
      "elevation": 7.9501414
    },
    {
      "latitude": 51.47718,
      "longitude": -0.191877,
      "elevation": 8.027666
    },
    {
      "latitude": 51.477196,
      "longitude": -0.191864,
      "elevation": 8.0932865
    },
    {
      "latitude": 51.477207,
      "longitude": -0.191849,
      "elevation": 8.147736
    },
    {
      "latitude": 51.477215,
      "longitude": -0.191834,
      "elevation": 8.190629
    },
    {
      "latitude": 51.47722,
      "longitude": -0.191821,
      "elevation": 8.224177
    },
    {
      "latitude": 51.477222,
      "longitude": -0.191804,
      "elevation": 8.227273
    },
    {
      "latitude": 51.47723,
      "longitude": -0.191755,
      "elevation": 8.148631
    },
    {
      "latitude": 51.477238,
      "longitude": -0.191699,
      "elevation": 8.131591
    },
    {
      "latitude": 51.47724,
      "longitude": -0.191643,
      "elevation": 8.2069025
    },
    {
      "latitude": 51.477245,
      "longitude": -0.191588,
      "elevation": 8.208898
    },
    {
      "latitude": 51.477238,
      "longitude": -0.191535,
      "elevation": 8.223774
    },
    {
      "latitude": 51.477234,
      "longitude": -0.191488,
      "elevation": 8.215552
    },
    {
      "latitude": 51.47724,
      "longitude": -0.191448,
      "elevation": 8.202909
    },
    {
      "latitude": 51.477257,
      "longitude": -0.191409,
      "elevation": 8.232769
    },
    {
      "latitude": 51.47728,
      "longitude": -0.191369,
      "elevation": 8.278154
    },
    {
      "latitude": 51.4773,
      "longitude": -0.191331,
      "elevation": 8.313324
    },
    {
      "latitude": 51.47731,
      "longitude": -0.191295,
      "elevation": 8.342389
    },
    {
      "latitude": 51.47733,
      "longitude": -0.191259,
      "elevation": 8.34015
    },
    {
      "latitude": 51.47735,
      "longitude": -0.191224,
      "elevation": 8.33484
    },
    {
      "latitude": 51.47737,
      "longitude": -0.191192,
      "elevation": 8.324045
    },
    {
      "latitude": 51.477394,
      "longitude": -0.191166,
      "elevation": 8.232975
    },
    {
      "latitude": 51.47742,
      "longitude": -0.19114,
      "elevation": 8.334803
    },
    {
      "latitude": 51.477444,
      "longitude": -0.19111,
      "elevation": 8.294236
    },
    {
      "latitude": 51.477467,
      "longitude": -0.191076,
      "elevation": 8.236124
    },
    {
      "latitude": 51.47749,
      "longitude": -0.191039,
      "elevation": 8.052245
    },
    {
      "latitude": 51.477512,
      "longitude": -0.191001,
      "elevation": 7.9398904
    },
    {
      "latitude": 51.47753,
      "longitude": -0.190963,
      "elevation": 7.9398904
    },
    {
      "latitude": 51.477554,
      "longitude": -0.19093,
      "elevation": 7.8106427
    },
    {
      "latitude": 51.477573,
      "longitude": -0.190897,
      "elevation": 7.48149
    },
    {
      "latitude": 51.477592,
      "longitude": -0.190863,
      "elevation": 6.48149
    },
    {
      "latitude": 51.47761,
      "longitude": -0.190832,
      "elevation": 6.2918434
    },
    {
      "latitude": 51.477627,
      "longitude": -0.190802,
      "elevation": 6.584797
    },
    {
      "latitude": 51.47763,
      "longitude": -0.19077,
      "elevation": 6.900004
    },
    {
      "latitude": 51.477627,
      "longitude": -0.190734,
      "elevation": 7.059651
    },
    {
      "latitude": 51.477615,
      "longitude": -0.190696,
      "elevation": 7.2161026
    },
    {
      "latitude": 51.477604,
      "longitude": -0.190656,
      "elevation": 7.36536
    },
    {
      "latitude": 51.477596,
      "longitude": -0.190613,
      "elevation": 7.3613877
    },
    {
      "latitude": 51.47759,
      "longitude": -0.190569,
      "elevation": 7.749834
    },
    {
      "latitude": 51.47759,
      "longitude": -0.190524,
      "elevation": 7.736648
    },
    {
      "latitude": 51.4776,
      "longitude": -0.19048,
      "elevation": 7.7246428
    },
    {
      "latitude": 51.477627,
      "longitude": -0.190437,
      "elevation": 7.6002574
    },
    {
      "latitude": 51.477654,
      "longitude": -0.190393,
      "elevation": 7.706346
    },
    {
      "latitude": 51.477673,
      "longitude": -0.190346,
      "elevation": 7.888911
    },
    {
      "latitude": 51.477688,
      "longitude": -0.190299,
      "elevation": 8.144925
    },
    {
      "latitude": 51.477703,
      "longitude": -0.190253,
      "elevation": 8.307662
    },
    {
      "latitude": 51.47772,
      "longitude": -0.190211,
      "elevation": 8.31053
    },
    {
      "latitude": 51.477734,
      "longitude": -0.190171,
      "elevation": 8.3132925
    },
    {
      "latitude": 51.477757,
      "longitude": -0.190133,
      "elevation": 8.332864
    },
    {
      "latitude": 51.477776,
      "longitude": -0.190097,
      "elevation": 8.310725
    },
    {
      "latitude": 51.4778,
      "longitude": -0.190063,
      "elevation": 8.272705
    },
    {
      "latitude": 51.477818,
      "longitude": -0.190028,
      "elevation": 8.22282
    },
    {
      "latitude": 51.47784,
      "longitude": -0.189993,
      "elevation": 8.083248
    },
    {
      "latitude": 51.477863,
      "longitude": -0.189958,
      "elevation": 8.002129
    },
    {
      "latitude": 51.477886,
      "longitude": -0.189922,
      "elevation": 7.8774023
    },
    {
      "latitude": 51.477905,
      "longitude": -0.189885,
      "elevation": 7.7030134
    },
    {
      "latitude": 51.47793,
      "longitude": -0.189849,
      "elevation": 7.601475
    },
    {
      "latitude": 51.477947,
      "longitude": -0.189812,
      "elevation": 7.4841385
    },
    {
      "latitude": 51.477966,
      "longitude": -0.189776,
      "elevation": 7.619573
    },
    {
      "latitude": 51.477985,
      "longitude": -0.189739,
      "elevation": 7.495868
    },
    {
      "latitude": 51.478004,
      "longitude": -0.189702,
      "elevation": 7.633548
    },
    {
      "latitude": 51.47802,
      "longitude": -0.189664,
      "elevation": 7.5049286
    },
    {
      "latitude": 51.47804,
      "longitude": -0.189626,
      "elevation": 7.364741
    },
    {
      "latitude": 51.47806,
      "longitude": -0.189586,
      "elevation": 7.059055
    },
    {
      "latitude": 51.47808,
      "longitude": -0.189546,
      "elevation": 7.059357
    },
    {
      "latitude": 51.478104,
      "longitude": -0.189507,
      "elevation": 7.3702583
    },
    {
      "latitude": 51.478127,
      "longitude": -0.189468,
      "elevation": 7.371514
    },
    {
      "latitude": 51.478146,
      "longitude": -0.189432,
      "elevation": 7.5216584
    },
    {
      "latitude": 51.47817,
      "longitude": -0.189399,
      "elevation": 7.52302
    },
    {
      "latitude": 51.47819,
      "longitude": -0.189366,
      "elevation": 7.66784
    },
    {
      "latitude": 51.478214,
      "longitude": -0.189331,
      "elevation": 8.0516405
    },
    {
      "latitude": 51.478237,
      "longitude": -0.189292,
      "elevation": 8.28597
    },
    {
      "latitude": 51.478264,
      "longitude": -0.189252,
      "elevation": 7.28597
    },
    {
      "latitude": 51.478287,
      "longitude": -0.189212,
      "elevation": 7.375387
    },
    {
      "latitude": 51.478313,
      "longitude": -0.189175,
      "elevation": 7.5272317
    },
    {
      "latitude": 51.478336,
      "longitude": -0.189139,
      "elevation": 7.375641
    },
    {
      "latitude": 51.478363,
      "longitude": -0.189107,
      "elevation": 7.376594
    },
    {
      "latitude": 51.478394,
      "longitude": -0.189078,
      "elevation": 7.06
    },
    {
      "latitude": 51.478416,
      "longitude": -0.189053,
      "elevation": 6.9005404
    },
    {
      "latitude": 51.47844,
      "longitude": -0.189031,
      "elevation": 6.7440367
    },
    {
      "latitude": 51.47846,
      "longitude": -0.189008,
      "elevation": 6.9009085
    },
    {
      "latitude": 51.478477,
      "longitude": -0.188979,
      "elevation": 6.901044
    },
    {
      "latitude": 51.478493,
      "longitude": -0.18894,
      "elevation": 7.060042
    },
    {
      "latitude": 51.47851,
      "longitude": -0.188897,
      "elevation": 6.9012065
    },
    {
      "latitude": 51.47853,
      "longitude": -0.188856,
      "elevation": 6.745568
    },
    {
      "latitude": 51.47855,
      "longitude": -0.188819,
      "elevation": 6.74574
    },
    {
      "latitude": 51.478573,
      "longitude": -0.188783,
      "elevation": 6.7458363
    },
    {
      "latitude": 51.478592,
      "longitude": -0.188749,
      "elevation": 6.745873
    },
    {
      "latitude": 51.478615,
      "longitude": -0.188715,
      "elevation": 6.5952344
    },
    {
      "latitude": 51.478634,
      "longitude": -0.18868,
      "elevation": 6.3142815
    },
    {
      "latitude": 51.47865,
      "longitude": -0.188645,
      "elevation": 6.066643
    },
    {
      "latitude": 51.47867,
      "longitude": -0.188611,
      "elevation": 6.1832857
    },
    {
      "latitude": 51.478687,
      "longitude": -0.188581,
      "elevation": 6.181471
    },
    {
      "latitude": 51.478706,
      "longitude": -0.188554,
      "elevation": 5.9496083
    },
    {
      "latitude": 51.47873,
      "longitude": -0.188533,
      "elevation": 5.947913
    },
    {
      "latitude": 51.478752,
      "longitude": -0.188512,
      "elevation": 5.945865
    },
    {
      "latitude": 51.478775,
      "longitude": -0.188487,
      "elevation": 5.7488275
    },
    {
      "latitude": 51.478798,
      "longitude": -0.188457,
      "elevation": 5.937501
    },
    {
      "latitude": 51.47882,
      "longitude": -0.188434,
      "elevation": 5.830161
    },
    {
      "latitude": 51.47884,
      "longitude": -0.188429,
      "elevation": 5.651999
    },
    {
      "latitude": 51.47886,
      "longitude": -0.188441,
      "elevation": 5.3237734
    },
    {
      "latitude": 51.478878,
      "longitude": -0.188467,
      "elevation": 5.30875
    },
    {
      "latitude": 51.4789,
      "longitude": -0.188502,
      "elevation": 5.307175
    },
    {
      "latitude": 51.47892,
      "longitude": -0.188543,
      "elevation": 5.434473
    },
    {
      "latitude": 51.478935,
      "longitude": -0.188587,
      "elevation": 5.6049547
    },
    {
      "latitude": 51.47895,
      "longitude": -0.188631,
      "elevation": 5.691877
    },
    {
      "latitude": 51.47897,
      "longitude": -0.188674,
      "elevation": 5.66658
    },
    {
      "latitude": 51.478996,
      "longitude": -0.188712,
      "elevation": 6.043999
    },
    {
      "latitude": 51.479027,
      "longitude": -0.188747,
      "elevation": 6.158794
    },
    {
      "latitude": 51.479057,
      "longitude": -0.188777,
      "elevation": 6.2775555
    },
    {
      "latitude": 51.479088,
      "longitude": -0.188804,
      "elevation": 6.2949834
    },
    {
      "latitude": 51.479115,
      "longitude": -0.188831,
      "elevation": 5.9960556
    },
    {
      "latitude": 51.47914,
      "longitude": -0.188858,
      "elevation": 5.879086
    },
    {
      "latitude": 51.479164,
      "longitude": -0.188889,
      "elevation": 6.1235113
    },
    {
      "latitude": 51.479187,
      "longitude": -0.188925,
      "elevation": 6.292169
    },
    {
      "latitude": 51.479206,
      "longitude": -0.188965,
      "elevation": 6.488896
    },
    {
      "latitude": 51.47923,
      "longitude": -0.189007,
      "elevation": 6.50967
    },
    {
      "latitude": 51.47925,
      "longitude": -0.189051,
      "elevation": 6.6266384
    },
    {
      "latitude": 51.47928,
      "longitude": -0.189094,
      "elevation": 6.978529
    },
    {
      "latitude": 51.4793,
      "longitude": -0.189133,
      "elevation": 7.116131
    },
    {
      "latitude": 51.479324,
      "longitude": -0.189171,
      "elevation": 7.2572794
    },
    {
      "latitude": 51.479347,
      "longitude": -0.189208,
      "elevation": 7.2572794
    },
    {
      "latitude": 51.47937,
      "longitude": -0.189247,
      "elevation": 7.2572794
    },
    {
      "latitude": 51.479393,
      "longitude": -0.189282,
      "elevation": 7.547943
    },
    {
      "latitude": 51.479424,
      "longitude": -0.18931,
      "elevation": 7.70223
    },
    {
      "latitude": 51.47945,
      "longitude": -0.189336,
      "elevation": 8.179516
    },
    {
      "latitude": 51.47948,
      "longitude": -0.189367,
      "elevation": 8.637041
    },
    {
      "latitude": 51.479507,
      "longitude": -0.189406,
      "elevation": 9.030719
    },
    {
      "latitude": 51.479534,
      "longitude": -0.189445,
      "elevation": 9.14334
    },
    {
      "latitude": 51.479565,
      "longitude": -0.189476,
      "elevation": 9.246131
    },
    {
      "latitude": 51.47959,
      "longitude": -0.189502,
      "elevation": 9.422788
    },
    {
      "latitude": 51.479614,
      "longitude": -0.189533,
      "elevation": 9.622039
    },
    {
      "latitude": 51.479633,
      "longitude": -0.189574,
      "elevation": 9.718253
    },
    {
      "latitude": 51.479645,
      "longitude": -0.18962,
      "elevation": 9.757384
    },
    {
      "latitude": 51.47966,
      "longitude": -0.189663,
      "elevation": 9.791386
    },
    {
      "latitude": 51.479675,
      "longitude": -0.189702,
      "elevation": 9.820849
    },
    {
      "latitude": 51.47969,
      "longitude": -0.189734,
      "elevation": 9.791386
    },
    {
      "latitude": 51.479713,
      "longitude": -0.189759,
      "elevation": 9.791386
    },
    {
      "latitude": 51.479736,
      "longitude": -0.189787,
      "elevation": 9.622039
    },
    {
      "latitude": 51.47976,
      "longitude": -0.189818,
      "elevation": 9.673359
    },
    {
      "latitude": 51.479782,
      "longitude": -0.189848,
      "elevation": 9.718253
    },
    {
      "latitude": 51.4798,
      "longitude": -0.189875,
      "elevation": 9.757384
    },
    {
      "latitude": 51.479828,
      "longitude": -0.189887,
      "elevation": 9.868295
    },
    {
      "latitude": 51.47985,
      "longitude": -0.189864,
      "elevation": 9.84632
    },
    {
      "latitude": 51.47987,
      "longitude": -0.189833,
      "elevation": 9.868295
    },
    {
      "latitude": 51.47989,
      "longitude": -0.189803,
      "elevation": 9.820849
    },
    {
      "latitude": 51.479908,
      "longitude": -0.189774,
      "elevation": 9.84632
    },
    {
      "latitude": 51.479923,
      "longitude": -0.189749,
      "elevation": 9.820849
    },
    {
      "latitude": 51.479946,
      "longitude": -0.189727,
      "elevation": 9.84632
    },
    {
      "latitude": 51.479965,
      "longitude": -0.189709,
      "elevation": 9.84632
    },
    {
      "latitude": 51.47999,
      "longitude": -0.189696,
      "elevation": 9.84632
    },
    {
      "latitude": 51.480007,
      "longitude": -0.189689,
      "elevation": 9.867389
    },
    {
      "latitude": 51.48003,
      "longitude": -0.189687,
      "elevation": 9.992413
    },
    {
      "latitude": 51.480053,
      "longitude": -0.189691,
      "elevation": 10.1492
    },
    {
      "latitude": 51.480225,
      "longitude": -0.189533,
      "elevation": 11.322626
    },
    {
      "latitude": 51.48026,
      "longitude": -0.189517,
      "elevation": 11.433879
    },
    {
      "latitude": 51.48029,
      "longitude": -0.189493,
      "elevation": 11.43425
    },
    {
      "latitude": 51.480316,
      "longitude": -0.189462,
      "elevation": 11.312499
    },
    {
      "latitude": 51.480343,
      "longitude": -0.189426,
      "elevation": 11.358655
    },
    {
      "latitude": 51.480366,
      "longitude": -0.189388,
      "elevation": 11.391864
    },
    {
      "latitude": 51.480385,
      "longitude": -0.189348,
      "elevation": 11.502806
    },
    {
      "latitude": 51.480404,
      "longitude": -0.189307,
      "elevation": 11.518604
    },
    {
      "latitude": 51.48042,
      "longitude": -0.189266,
      "elevation": 11.608334
    },
    {
      "latitude": 51.480434,
      "longitude": -0.189226,
      "elevation": 11.61006
    },
    {
      "latitude": 51.48045,
      "longitude": -0.189187,
      "elevation": 11.68558
    },
    {
      "latitude": 51.48046,
      "longitude": -0.18915,
      "elevation": 11.677507
    },
    {
      "latitude": 51.480476,
      "longitude": -0.189115,
      "elevation": 11.726362
    },
    {
      "latitude": 51.480488,
      "longitude": -0.189083,
      "elevation": 11.648378
    },
    {
      "latitude": 51.4805,
      "longitude": -0.189053,
      "elevation": 11.696543
    },
    {
      "latitude": 51.48051,
      "longitude": -0.189026,
      "elevation": 11.681881
    },
    {
      "latitude": 51.480522,
      "longitude": -0.189002,
      "elevation": 11.668413
    },
    {
      "latitude": 51.48053,
      "longitude": -0.188981,
      "elevation": 11.708743
    },
    {
      "latitude": 51.480537,
      "longitude": -0.188964,
      "elevation": 11.745178
    },
    {
      "latitude": 51.480545,
      "longitude": -0.188951,
      "elevation": 11.776373
    },
    {
      "latitude": 51.480694,
      "longitude": -0.188696,
      "elevation": 7.9878197
    },
    {
      "latitude": 51.480713,
      "longitude": -0.188665,
      "elevation": 7.9309196
    },
    {
      "latitude": 51.48073,
      "longitude": -0.188636,
      "elevation": 7.903512
    },
    {
      "latitude": 51.48075,
      "longitude": -0.188606,
      "elevation": 7.8537073
    },
    {
      "latitude": 51.480774,
      "longitude": -0.188577,
      "elevation": 7.828277
    },
    {
      "latitude": 51.480797,
      "longitude": -0.188548,
      "elevation": 7.8260484
    },
    {
      "latitude": 51.48082,
      "longitude": -0.188519,
      "elevation": 7.8283544
    },
    {
      "latitude": 51.480843,
      "longitude": -0.188489,
      "elevation": 7.7646194
    },
    {
      "latitude": 51.48087,
      "longitude": -0.188458,
      "elevation": 7.657542
    },
    {
      "latitude": 51.480892,
      "longitude": -0.188427,
      "elevation": 7.5131717
    },
    {
      "latitude": 51.48092,
      "longitude": -0.188395,
      "elevation": 7.4024405
    },
    {
      "latitude": 51.48094,
      "longitude": -0.188365,
      "elevation": 7.3502226
    },
    {
      "latitude": 51.48097,
      "longitude": -0.188336,
      "elevation": 7.3224607
    },
    {
      "latitude": 51.48099,
      "longitude": -0.18831,
      "elevation": 7.372966
    },
    {
      "latitude": 51.481014,
      "longitude": -0.188284,
      "elevation": 7.3582253
    },
    {
      "latitude": 51.481037,
      "longitude": -0.188258,
      "elevation": 7.5236025
    },
    {
      "latitude": 51.481064,
      "longitude": -0.18823,
      "elevation": 7.328455
    },
    {
      "latitude": 51.48109,
      "longitude": -0.188198,
      "elevation": 7.500338
    },
    {
      "latitude": 51.48112,
      "longitude": -0.188163,
      "elevation": 7.4886746
    },
    {
      "latitude": 51.481148,
      "longitude": -0.188125,
      "elevation": 7.712312
    },
    {
      "latitude": 51.481174,
      "longitude": -0.188086,
      "elevation": 7.8388443
    },
    {
      "latitude": 51.481197,
      "longitude": -0.188046,
      "elevation": 7.7000537
    },
    {
      "latitude": 51.481224,
      "longitude": -0.188006,
      "elevation": 7.5671787
    },
    {
      "latitude": 51.481247,
      "longitude": -0.187967,
      "elevation": 7.560907
    },
    {
      "latitude": 51.48127,
      "longitude": -0.187929,
      "elevation": 7.5546603
    },
    {
      "latitude": 51.481297,
      "longitude": -0.187893,
      "elevation": 7.4256
    },
    {
      "latitude": 51.48132,
      "longitude": -0.18786,
      "elevation": 7.4179606
    },
    {
      "latitude": 51.481346,
      "longitude": -0.187828,
      "elevation": 7.410658
    },
    {
      "latitude": 51.481373,
      "longitude": -0.187796,
      "elevation": 7.284406
    },
    {
      "latitude": 51.481396,
      "longitude": -0.187766,
      "elevation": 7.396795
    },
    {
      "latitude": 51.481422,
      "longitude": -0.187736,
      "elevation": 7.390254
    },
    {
      "latitude": 51.481445,
      "longitude": -0.187706,
      "elevation": 7.259864
    },
    {
      "latitude": 51.481472,
      "longitude": -0.187676,
      "elevation": 7.2521877
    },
    {
      "latitude": 51.4815,
      "longitude": -0.187645,
      "elevation": 7.126594
    },
    {
      "latitude": 51.481525,
      "longitude": -0.187614,
      "elevation": 7.007044
    },
    {
      "latitude": 51.48155,
      "longitude": -0.187584,
      "elevation": 6.8008194
    },
    {
      "latitude": 51.48158,
      "longitude": -0.187557,
      "elevation": 6.6239433
    },
    {
      "latitude": 51.481606,
      "longitude": -0.187533,
      "elevation": 6.6050267
    },
    {
      "latitude": 51.481636,
      "longitude": -0.187511,
      "elevation": 6.5142627
    },
    {
      "latitude": 51.481667,
      "longitude": -0.18749,
      "elevation": 6.3134
    },
    {
      "latitude": 51.481697,
      "longitude": -0.187468,
      "elevation": 6.152537
    },
    {
      "latitude": 51.481728,
      "longitude": -0.187445,
      "elevation": 6.331973
    },
    {
      "latitude": 51.481754,
      "longitude": -0.187421,
      "elevation": 6.4490323
    },
    {
      "latitude": 51.481785,
      "longitude": -0.187396,
      "elevation": 6.523295
    },
    {
      "latitude": 51.48181,
      "longitude": -0.187372,
      "elevation": 6.536938
    },
    {
      "latitude": 51.48184,
      "longitude": -0.187349,
      "elevation": 6.6216273
    },
    {
      "latitude": 51.48187,
      "longitude": -0.187327,
      "elevation": 6.5739512
    },
    {
      "latitude": 51.4819,
      "longitude": -0.187306,
      "elevation": 6.6618686
    },
    {
      "latitude": 51.481926,
      "longitude": -0.187287,
      "elevation": 6.6853642
    },
    {
      "latitude": 51.481953,
      "longitude": -0.187268,
      "elevation": 6.5512276
    },
    {
      "latitude": 51.48198,
      "longitude": -0.187249,
      "elevation": 6.511203
    },
    {
      "latitude": 51.48201,
      "longitude": -0.187228,
      "elevation": 6.457954
    },
    {
      "latitude": 51.482037,
      "longitude": -0.187206,
      "elevation": 6.503291
    },
    {
      "latitude": 51.482063,
      "longitude": -0.187179,
      "elevation": 6.5376425
    },
    {
      "latitude": 51.48209,
      "longitude": -0.18715,
      "elevation": 6.604196
    },
    {
      "latitude": 51.482113,
      "longitude": -0.18712,
      "elevation": 6.6444306
    },
    {
      "latitude": 51.48214,
      "longitude": -0.187089,
      "elevation": 6.7142053
    },
    {
      "latitude": 51.482162,
      "longitude": -0.18706,
      "elevation": 6.8012404
    },
    {
      "latitude": 51.482185,
      "longitude": -0.187031,
      "elevation": 6.8981285
    },
    {
      "latitude": 51.482212,
      "longitude": -0.187003,
      "elevation": 6.986087
    },
    {
      "latitude": 51.482243,
      "longitude": -0.186977,
      "elevation": 7.0624537
    },
    {
      "latitude": 51.482273,
      "longitude": -0.186953,
      "elevation": 7.252241
    },
    {
      "latitude": 51.482307,
      "longitude": -0.186929,
      "elevation": 7.306897
    },
    {
      "latitude": 51.482334,
      "longitude": -0.186906,
      "elevation": 7.3853855
    },
    {
      "latitude": 51.482357,
      "longitude": -0.186881,
      "elevation": 7.488534
    },
    {
      "latitude": 51.482384,
      "longitude": -0.186854,
      "elevation": 7.527497
    },
    {
      "latitude": 51.482407,
      "longitude": -0.186825,
      "elevation": 7.6346545
    },
    {
      "latitude": 51.48243,
      "longitude": -0.186794,
      "elevation": 7.7136035
    },
    {
      "latitude": 51.482452,
      "longitude": -0.186763,
      "elevation": 7.845272
    },
    {
      "latitude": 51.48248,
      "longitude": -0.186733,
      "elevation": 7.947189
    },
    {
      "latitude": 51.482502,
      "longitude": -0.186704,
      "elevation": 8.082258
    },
    {
      "latitude": 51.48253,
      "longitude": -0.186677,
      "elevation": 8.180041
    },
    {
      "latitude": 51.48255,
      "longitude": -0.186653,
      "elevation": 8.242136
    },
    {
      "latitude": 51.48258,
      "longitude": -0.186633,
      "elevation": 8.242391
    },
    {
      "latitude": 51.482605,
      "longitude": -0.186614,
      "elevation": 8.293183
    },
    {
      "latitude": 51.482628,
      "longitude": -0.186593,
      "elevation": 8.295068
    },
    {
      "latitude": 51.482655,
      "longitude": -0.186569,
      "elevation": 8.284679
    },
    {
      "latitude": 51.482677,
      "longitude": -0.186538,
      "elevation": 8.283474
    },
    {
      "latitude": 51.4827,
      "longitude": -0.186505,
      "elevation": 8.301356
    },
    {
      "latitude": 51.48273,
      "longitude": -0.186471,
      "elevation": 8.331903
    },
    {
      "latitude": 51.482754,
      "longitude": -0.186438,
      "elevation": 8.353283
    },
    {
      "latitude": 51.48278,
      "longitude": -0.186406,
      "elevation": 8.375181
    },
    {
      "latitude": 51.482803,
      "longitude": -0.186378,
      "elevation": 8.40288
    },
    {
      "latitude": 51.482826,
      "longitude": -0.186354,
      "elevation": 8.42518
    },
    {
      "latitude": 51.482853,
      "longitude": -0.186337,
      "elevation": 8.455418
    },
    {
      "latitude": 51.482883,
      "longitude": -0.186329,
      "elevation": 8.493107
    },
    {
      "latitude": 51.48291,
      "longitude": -0.186334,
      "elevation": 8.536939
    },
    {
      "latitude": 51.48293,
      "longitude": -0.186352,
      "elevation": 8.601597
    },
    {
      "latitude": 51.48295,
      "longitude": -0.186378,
      "elevation": 8.671705
    },
    {
      "latitude": 51.482967,
      "longitude": -0.186408,
      "elevation": 8.690582
    },
    {
      "latitude": 51.482986,
      "longitude": -0.186439,
      "elevation": 8.70846
    },
    {
      "latitude": 51.483,
      "longitude": -0.186473,
      "elevation": 8.799991
    },
    {
      "latitude": 51.483025,
      "longitude": -0.18651,
      "elevation": 8.851004
    },
    {
      "latitude": 51.483044,
      "longitude": -0.186549,
      "elevation": 8.8719
    },
    {
      "latitude": 51.48307,
      "longitude": -0.18659,
      "elevation": 9.125919
    },
    {
      "latitude": 51.483093,
      "longitude": -0.186629,
      "elevation": 9.209793
    },
    {
      "latitude": 51.48312,
      "longitude": -0.186664,
      "elevation": 9.107169
    },
    {
      "latitude": 51.483147,
      "longitude": -0.186695,
      "elevation": 9.122183
    },
    {
      "latitude": 51.48317,
      "longitude": -0.186724,
      "elevation": 9.324444
    },
    {
      "latitude": 51.483192,
      "longitude": -0.186756,
      "elevation": 9.412786
    },
    {
      "latitude": 51.483208,
      "longitude": -0.186794,
      "elevation": 9.344064
    },
    {
      "latitude": 51.48322,
      "longitude": -0.18684,
      "elevation": 9.510676
    },
    {
      "latitude": 51.483234,
      "longitude": -0.186889,
      "elevation": 9.431665
    },
    {
      "latitude": 51.48325,
      "longitude": -0.186933,
      "elevation": 9.442099
    },
    {
      "latitude": 51.48327,
      "longitude": -0.186969,
      "elevation": 9.261013
    },
    {
      "latitude": 51.483284,
      "longitude": -0.186996,
      "elevation": 9.183226
    },
    {
      "latitude": 51.4833,
      "longitude": -0.187023,
      "elevation": 9.243052
    },
    {
      "latitude": 51.483315,
      "longitude": -0.187055,
      "elevation": 9.31041
    },
    {
      "latitude": 51.483334,
      "longitude": -0.187092,
      "elevation": 9.444955
    },
    {
      "latitude": 51.483353,
      "longitude": -0.187132,
      "elevation": 9.779699
    },
    {
      "latitude": 51.483368,
      "longitude": -0.187174,
      "elevation": 10.002163
    },
    {
      "latitude": 51.483383,
      "longitude": -0.187218,
      "elevation": 9.902978
    },
    {
      "latitude": 51.483395,
      "longitude": -0.187264,
      "elevation": 9.816714
    },
    {
      "latitude": 51.483402,
      "longitude": -0.187311,
      "elevation": 9.826766
    },
    {
      "latitude": 51.48341,
      "longitude": -0.187359,
      "elevation": 10.033615
    },
    {
      "latitude": 51.483418,
      "longitude": -0.187408,
      "elevation": 10.274065
    },
    {
      "latitude": 51.483425,
      "longitude": -0.187457,
      "elevation": 10.4080515
    },
    {
      "latitude": 51.48343,
      "longitude": -0.187508,
      "elevation": 10.41095
    },
    {
      "latitude": 51.483437,
      "longitude": -0.187558,
      "elevation": 10.285516
    },
    {
      "latitude": 51.48344,
      "longitude": -0.18761,
      "elevation": 10.415917
    },
    {
      "latitude": 51.483448,
      "longitude": -0.187664,
      "elevation": 10.069515
    },
    {
      "latitude": 51.483456,
      "longitude": -0.187718,
      "elevation": 9.978694
    },
    {
      "latitude": 51.48346,
      "longitude": -0.187771,
      "elevation": 10.081041
    },
    {
      "latitude": 51.483467,
      "longitude": -0.187819,
      "elevation": 9.994402
    },
    {
      "latitude": 51.483475,
      "longitude": -0.187865,
      "elevation": 9.918428
    },
    {
      "latitude": 51.483482,
      "longitude": -0.187913,
      "elevation": 9.786698
    },
    {
      "latitude": 51.48349,
      "longitude": -0.18796,
      "elevation": 9.692003
    },
    {
      "latitude": 51.4835,
      "longitude": -0.188005,
      "elevation": 9.714242
    },
    {
      "latitude": 51.483524,
      "longitude": -0.188045,
      "elevation": 9.713728
    },
    {
      "latitude": 51.48348,
      "longitude": -0.188038,
      "elevation": 9.36497
    },
    {
      "latitude": 51.483456,
      "longitude": -0.188075,
      "elevation": 9.309822
    },
    {
      "latitude": 51.483437,
      "longitude": -0.188115,
      "elevation": 9.260194
    },
    {
      "latitude": 51.483414,
      "longitude": -0.188157,
      "elevation": 9.208366
    },
    {
      "latitude": 51.483395,
      "longitude": -0.188202,
      "elevation": 9.160972
    },
    {
      "latitude": 51.483376,
      "longitude": -0.188248,
      "elevation": 9.118321
    },
    {
      "latitude": 51.483356,
      "longitude": -0.188295,
      "elevation": 9.073462
    },
    {
      "latitude": 51.48334,
      "longitude": -0.188344,
      "elevation": 9.027163
    },
    {
      "latitude": 51.483326,
      "longitude": -0.188394,
      "elevation": 8.940474
    },
    {
      "latitude": 51.48331,
      "longitude": -0.188445,
      "elevation": 8.8588915
    },
    {
      "latitude": 51.4833,
      "longitude": -0.188496,
      "elevation": 8.792587
    },
    {
      "latitude": 51.4833,
      "longitude": -0.188548,
      "elevation": 8.752423
    },
    {
      "latitude": 51.483307,
      "longitude": -0.1886,
      "elevation": 8.735769
    },
    {
      "latitude": 51.48333,
      "longitude": -0.188653,
      "elevation": 8.7372265
    },
    {
      "latitude": 51.483356,
      "longitude": -0.188702,
      "elevation": 8.76125
    },
    {
      "latitude": 51.48337,
      "longitude": -0.188745,
      "elevation": 8.763941
    },
    {
      "latitude": 51.483387,
      "longitude": -0.188792,
      "elevation": 8.763188
    },
    {
      "latitude": 51.4834,
      "longitude": -0.188844,
      "elevation": 8.760687
    },
    {
      "latitude": 51.483406,
      "longitude": -0.188897,
      "elevation": 8.764886
    },
    {
      "latitude": 51.48341,
      "longitude": -0.18895,
      "elevation": 8.852016
    },
    {
      "latitude": 51.48341,
      "longitude": -0.189002,
      "elevation": 8.897906
    },
    {
      "latitude": 51.483414,
      "longitude": -0.189053,
      "elevation": 8.964807
    },
    {
      "latitude": 51.48342,
      "longitude": -0.189103,
      "elevation": 8.83867
    },
    {
      "latitude": 51.483433,
      "longitude": -0.18915,
      "elevation": 8.919202
    },
    {
      "latitude": 51.48345,
      "longitude": -0.189193,
      "elevation": 8.909097
    },
    {
      "latitude": 51.483475,
      "longitude": -0.189232,
      "elevation": 9.0230465
    },
    {
      "latitude": 51.4835,
      "longitude": -0.189268,
      "elevation": 8.897554
    },
    {
      "latitude": 51.483532,
      "longitude": -0.189302,
      "elevation": 8.7775
    },
    {
      "latitude": 51.48356,
      "longitude": -0.189338,
      "elevation": 9.005275
    },
    {
      "latitude": 51.483585,
      "longitude": -0.189374,
      "elevation": 8.871404
    },
    {
      "latitude": 51.483612,
      "longitude": -0.189407,
      "elevation": 8.532865
    },
    {
      "latitude": 51.483635,
      "longitude": -0.189438,
      "elevation": 8.338978
    },
    {
      "latitude": 51.48366,
      "longitude": -0.189468,
      "elevation": 8.314684
    },
    {
      "latitude": 51.48369,
      "longitude": -0.189498,
      "elevation": 8.137165
    },
    {
      "latitude": 51.48372,
      "longitude": -0.189531,
      "elevation": 8.175382
    },
    {
      "latitude": 51.48375,
      "longitude": -0.189564,
      "elevation": 8.139939
    },
    {
      "latitude": 51.48378,
      "longitude": -0.189597,
      "elevation": 8.104264
    },
    {
      "latitude": 51.483807,
      "longitude": -0.189627,
      "elevation": 8.275336
    },
    {
      "latitude": 51.483833,
      "longitude": -0.189656,
      "elevation": 8.252769
    },
    {
      "latitude": 51.483864,
      "longitude": -0.189683,
      "elevation": 8.232537
    },
    {
      "latitude": 51.48389,
      "longitude": -0.189711,
      "elevation": 8.091659
    },
    {
      "latitude": 51.483917,
      "longitude": -0.18974,
      "elevation": 7.951125
    },
    {
      "latitude": 51.48394,
      "longitude": -0.189769,
      "elevation": 7.707758
    },
    {
      "latitude": 51.483967,
      "longitude": -0.189799,
      "elevation": 7.78139
    },
    {
      "latitude": 51.483994,
      "longitude": -0.189829,
      "elevation": 7.879788
    },
    {
      "latitude": 51.48402,
      "longitude": -0.189857,
      "elevation": 7.7304983
    },
    {
      "latitude": 51.484047,
      "longitude": -0.189884,
      "elevation": 7.993292
    },
    {
      "latitude": 51.484074,
      "longitude": -0.18991,
      "elevation": 8.300124
    },
    {
      "latitude": 51.4841,
      "longitude": -0.189935,
      "elevation": 8.3
    },
    {
      "latitude": 51.484127,
      "longitude": -0.189961,
      "elevation": 8.299871
    },
    {
      "latitude": 51.484154,
      "longitude": -0.189987,
      "elevation": 8.139963
    },
    {
      "latitude": 51.48418,
      "longitude": -0.190015,
      "elevation": 8.139522
    },
    {
      "latitude": 51.484207,
      "longitude": -0.190045,
      "elevation": 8.13863
    },
    {
      "latitude": 51.484234,
      "longitude": -0.190076,
      "elevation": 8.136962
    },
    {
      "latitude": 51.48426,
      "longitude": -0.190104,
      "elevation": 8.134657
    },
    {
      "latitude": 51.484287,
      "longitude": -0.19013,
      "elevation": 7.8197474
    },
    {
      "latitude": 51.48431,
      "longitude": -0.190156,
      "elevation": 7.975929
    },
    {
      "latitude": 51.484337,
      "longitude": -0.190182,
      "elevation": 7.818357
    },
    {
      "latitude": 51.484364,
      "longitude": -0.190212,
      "elevation": 7.659441
    },
    {
      "latitude": 51.484386,
      "longitude": -0.190243,
      "elevation": 7.6583858
    },
    {
      "latitude": 51.484413,
      "longitude": -0.190273,
      "elevation": 7.6566243
    },
    {
      "latitude": 51.484444,
      "longitude": -0.1903,
      "elevation": 7.33994
    },
    {
      "latitude": 51.48447,
      "longitude": -0.190326,
      "elevation": 7.1800003
    },
    {
      "latitude": 51.484497,
      "longitude": -0.190353,
      "elevation": 7.339196
    },
    {
      "latitude": 51.484528,
      "longitude": -0.190381,
      "elevation": 7.338177
    },
    {
      "latitude": 51.484554,
      "longitude": -0.190411,
      "elevation": 7.179375
    },
    {
      "latitude": 51.48458,
      "longitude": -0.190441,
      "elevation": 7.3334227
    },
    {
      "latitude": 51.484608,
      "longitude": -0.190471,
      "elevation": 7.1765537
    },
    {
      "latitude": 51.484634,
      "longitude": -0.190501,
      "elevation": 7.0184774
    },
    {
      "latitude": 51.484657,
      "longitude": -0.190529,
      "elevation": 7.01694
    },
    {
      "latitude": 51.484684,
      "longitude": -0.190558,
      "elevation": 6.8587546
    },
    {
      "latitude": 51.48471,
      "longitude": -0.190586,
      "elevation": 6.6996894
    },
    {
      "latitude": 51.484737,
      "longitude": -0.190614,
      "elevation": 6.699058
    },
    {
      "latitude": 51.484764,
      "longitude": -0.190642,
      "elevation": 6.6978917
    },
    {
      "latitude": 51.48479,
      "longitude": -0.19067,
      "elevation": 6.5393076
    },
    {
      "latitude": 51.484818,
      "longitude": -0.190697,
      "elevation": 6.220012
    },
    {
      "latitude": 51.484844,
      "longitude": -0.190725,
      "elevation": 5.9022927
    },
    {
      "latitude": 51.48487,
      "longitude": -0.190753,
      "elevation": 5.9010673
    },
    {
      "latitude": 51.484898,
      "longitude": -0.190781,
      "elevation": 5.90038
    },
    {
      "latitude": 51.484924,
      "longitude": -0.190809,
      "elevation": 5.9000773
    },
    {
      "latitude": 51.48495,
      "longitude": -0.190837,
      "elevation": 6.0598273
    },
    {
      "latitude": 51.484978,
      "longitude": -0.190866,
      "elevation": 6.2171745
    },
    {
      "latitude": 51.485004,
      "longitude": -0.190894,
      "elevation": 6.2163744
    },
    {
      "latitude": 51.48503,
      "longitude": -0.190922,
      "elevation": 6.2164125
    },
    {
      "latitude": 51.485058,
      "longitude": -0.19095,
      "elevation": 6.36932
    },
    {
      "latitude": 51.485085,
      "longitude": -0.190977,
      "elevation": 6.3698006
    },
    {
      "latitude": 51.48511,
      "longitude": -0.191004,
      "elevation": 6.3703895
    },
    {
      "latitude": 51.485138,
      "longitude": -0.19103,
      "elevation": 6.371045
    },
    {
      "latitude": 51.485165,
      "longitude": -0.191057,
      "elevation": 6.3716593
    },
    {
      "latitude": 51.48519,
      "longitude": -0.191085,
      "elevation": 6.521199
    },
    {
      "latitude": 51.485218,
      "longitude": -0.191115,
      "elevation": 6.664836
    },
    {
      "latitude": 51.485245,
      "longitude": -0.191146,
      "elevation": 6.666076
    },
    {
      "latitude": 51.48527,
      "longitude": -0.191177,
      "elevation": 6.8037467
    },
    {
      "latitude": 51.4853,
      "longitude": -0.191205,
      "elevation": 6.9360123
    },
    {
      "latitude": 51.485325,
      "longitude": -0.19123,
      "elevation": 7.2745805
    },
    {
      "latitude": 51.485348,
      "longitude": -0.191253,
      "elevation": 7.3797665
    },
    {
      "latitude": 51.485374,
      "longitude": -0.191278,
      "elevation": 7.391081
    },
    {
      "latitude": 51.485397,
      "longitude": -0.191304,
      "elevation": 7.4872556
    },
    {
      "latitude": 51.485416,
      "longitude": -0.191331,
      "elevation": 7.5749493
    },
    {
      "latitude": 51.48544,
      "longitude": -0.191359,
      "elevation": 7.50719
    },
    {
      "latitude": 51.485462,
      "longitude": -0.191387,
      "elevation": 7.327051
    },
    {
      "latitude": 51.48549,
      "longitude": -0.191414,
      "elevation": 7.225988
    },
    {
      "latitude": 51.48551,
      "longitude": -0.191441,
      "elevation": 7.112172
    },
    {
      "latitude": 51.48554,
      "longitude": -0.191468,
      "elevation": 7.2459
    },
    {
      "latitude": 51.485565,
      "longitude": -0.191494,
      "elevation": 7.128633
    },
    {
      "latitude": 51.48559,
      "longitude": -0.191521,
      "elevation": 6.9966974
    },
    {
      "latitude": 51.48562,
      "longitude": -0.191548,
      "elevation": 6.8524303
    },
    {
      "latitude": 51.485645,
      "longitude": -0.191575,
      "elevation": 6.5399523
    },
    {
      "latitude": 51.485672,
      "longitude": -0.191604,
      "elevation": 6.6993885
    },
    {
      "latitude": 51.4857,
      "longitude": -0.191633,
      "elevation": 6.857685
    },
    {
      "latitude": 51.48572,
      "longitude": -0.191662,
      "elevation": 6.8585777
    },
    {
      "latitude": 51.485744,
      "longitude": -0.191691,
      "elevation": 6.699993
    },
    {
      "latitude": 51.48577,
      "longitude": -0.19172,
      "elevation": 6.7000003
    },
    {
      "latitude": 51.485798,
      "longitude": -0.191749,
      "elevation": 6.8599324
    },
    {
      "latitude": 51.48582,
      "longitude": -0.191777,
      "elevation": 7.019401
    },
    {
      "latitude": 51.485847,
      "longitude": -0.191804,
      "elevation": 7.0196114
    },
    {
      "latitude": 51.485874,
      "longitude": -0.191832,
      "elevation": 7.177048
    },
    {
      "latitude": 51.4859,
      "longitude": -0.191859,
      "elevation": 7.3304486
    },
    {
      "latitude": 51.485928,
      "longitude": -0.191887,
      "elevation": 7.750072
    },
    {
      "latitude": 51.485954,
      "longitude": -0.191915,
      "elevation": 7.749583
    },
    {
      "latitude": 51.485977,
      "longitude": -0.191945,
      "elevation": 7.7485976
    },
    {
      "latitude": 51.486004,
      "longitude": -0.191974,
      "elevation": 7.869653
    },
    {
      "latitude": 51.48603,
      "longitude": -0.192001,
      "elevation": 7.8693323
    },
    {
      "latitude": 51.486057,
      "longitude": -0.192025,
      "elevation": 7.870293
    },
    {
      "latitude": 51.486084,
      "longitude": -0.192048,
      "elevation": 7.7488446
    },
    {
      "latitude": 51.48611,
      "longitude": -0.192073,
      "elevation": 7.9843836
    },
    {
      "latitude": 51.486134,
      "longitude": -0.192102,
      "elevation": 7.9824233
    },
    {
      "latitude": 51.48616,
      "longitude": -0.192135,
      "elevation": 7.86772
    },
    {
      "latitude": 51.48619,
      "longitude": -0.192172,
      "elevation": 7.9768605
    },
    {
      "latitude": 51.486217,
      "longitude": -0.192203,
      "elevation": 7.864784
    },
    {
      "latitude": 51.486244,
      "longitude": -0.192229,
      "elevation": 7.9768605
    },
    {
      "latitude": 51.486275,
      "longitude": -0.192254,
      "elevation": 7.9780617
    },
    {
      "latitude": 51.4863,
      "longitude": -0.192281,
      "elevation": 8.079397
    },
    {
      "latitude": 51.48633,
      "longitude": -0.192311,
      "elevation": 8.077973
    },
    {
      "latitude": 51.486355,
      "longitude": -0.192342,
      "elevation": 7.9744434
    },
    {
      "latitude": 51.486378,
      "longitude": -0.192374,
      "elevation": 7.972006
    },
    {
      "latitude": 51.486404,
      "longitude": -0.192405,
      "elevation": 7.9699597
    },
    {
      "latitude": 51.48643,
      "longitude": -0.192436,
      "elevation": 7.967486
    },
    {
      "latitude": 51.486458,
      "longitude": -0.192466,
      "elevation": 8.235999
    },
    {
      "latitude": 51.48648,
      "longitude": -0.192496,
      "elevation": 8.303652
    },
    {
      "latitude": 51.486504,
      "longitude": -0.192525,
      "elevation": 8.314118
    },
    {
      "latitude": 51.486526,
      "longitude": -0.192556,
      "elevation": 8.50011
    },
    {
      "latitude": 51.48655,
      "longitude": -0.192586,
      "elevation": 8.601668
    },
    {
      "latitude": 51.486576,
      "longitude": -0.192616,
      "elevation": 8.58372
    },
    {
      "latitude": 51.4866,
      "longitude": -0.192644,
      "elevation": 8.648033
    },
    {
      "latitude": 51.486626,
      "longitude": -0.192671,
      "elevation": 8.7439
    },
    {
      "latitude": 51.486652,
      "longitude": -0.192696,
      "elevation": 8.826493
    },
    {
      "latitude": 51.486675,
      "longitude": -0.192721,
      "elevation": 8.876233
    },
    {
      "latitude": 51.4867,
      "longitude": -0.192744,
      "elevation": 9.00632
    },
    {
      "latitude": 51.486732,
      "longitude": -0.192769,
      "elevation": 9.072439
    },
    {
      "latitude": 51.486763,
      "longitude": -0.192792,
      "elevation": 8.8938265
    },
    {
      "latitude": 51.48679,
      "longitude": -0.192817,
      "elevation": 8.959469
    },
    {
      "latitude": 51.486816,
      "longitude": -0.192845,
      "elevation": 9.100609
    },
    {
      "latitude": 51.486843,
      "longitude": -0.192875,
      "elevation": 9.388775
    },
    {
      "latitude": 51.48687,
      "longitude": -0.192905,
      "elevation": 9.463666
    },
    {
      "latitude": 51.486897,
      "longitude": -0.192936,
      "elevation": 9.6093025
    },
    {
      "latitude": 51.486923,
      "longitude": -0.192966,
      "elevation": 9.7547245
    },
    {
      "latitude": 51.486954,
      "longitude": -0.192996,
      "elevation": 9.897139
    },
    {
      "latitude": 51.486977,
      "longitude": -0.193025,
      "elevation": 9.967412
    },
    {
      "latitude": 51.487,
      "longitude": -0.193055,
      "elevation": 10.025212
    },
    {
      "latitude": 51.487022,
      "longitude": -0.193084,
      "elevation": 10.07649
    },
    {
      "latitude": 51.487045,
      "longitude": -0.193112,
      "elevation": 10.212903
    },
    {
      "latitude": 51.48707,
      "longitude": -0.19314,
      "elevation": 10.423666
    },
    {
      "latitude": 51.487095,
      "longitude": -0.193167,
      "elevation": 10.558389
    },
    {
      "latitude": 51.487118,
      "longitude": -0.193195,
      "elevation": 10.692462
    },
    {
      "latitude": 51.48714,
      "longitude": -0.193225,
      "elevation": 10.820125
    },
    {
      "latitude": 51.48716,
      "longitude": -0.193255,
      "elevation": 10.943899
    },
    {
      "latitude": 51.487183,
      "longitude": -0.193286,
      "elevation": 11.007765
    },
    {
      "latitude": 51.487206,
      "longitude": -0.193316,
      "elevation": 11.197744
    },
    {
      "latitude": 51.48723,
      "longitude": -0.193346,
      "elevation": 11.318181
    },
    {
      "latitude": 51.487255,
      "longitude": -0.193375,
      "elevation": 11.427493
    },
    {
      "latitude": 51.487278,
      "longitude": -0.193403,
      "elevation": 11.485908
    },
    {
      "latitude": 51.487305,
      "longitude": -0.19343,
      "elevation": 11.543047
    },
    {
      "latitude": 51.487328,
      "longitude": -0.193456,
      "elevation": 11.653597
    },
    {
      "latitude": 51.48735,
      "longitude": -0.193481,
      "elevation": 11.644229
    },
    {
      "latitude": 51.487373,
      "longitude": -0.193506,
      "elevation": 11.756256
    },
    {
      "latitude": 51.487396,
      "longitude": -0.19353,
      "elevation": 11.864071
    },
    {
      "latitude": 51.48742,
      "longitude": -0.193554,
      "elevation": 11.915272
    },
    {
      "latitude": 51.487442,
      "longitude": -0.193578,
      "elevation": 11.897336
    },
    {
      "latitude": 51.48747,
      "longitude": -0.193603,
      "elevation": 11.858283
    },
    {
      "latitude": 51.48749,
      "longitude": -0.193629,
      "elevation": 12.067356
    },
    {
      "latitude": 51.48752,
      "longitude": -0.193655,
      "elevation": 12.149896
    },
    {
      "latitude": 51.487545,
      "longitude": -0.193679,
      "elevation": 12.213298
    },
    {
      "latitude": 51.48757,
      "longitude": -0.193701,
      "elevation": 12.272187
    },
    {
      "latitude": 51.4876,
      "longitude": -0.193721,
      "elevation": 12.328149
    },
    {
      "latitude": 51.48762,
      "longitude": -0.193743,
      "elevation": 12.377752
    },
    {
      "latitude": 51.487644,
      "longitude": -0.193771,
      "elevation": 12.420015
    },
    {
      "latitude": 51.487667,
      "longitude": -0.193803,
      "elevation": 12.487271
    },
    {
      "latitude": 51.487694,
      "longitude": -0.193835,
      "elevation": 12.54428
    },
    {
      "latitude": 51.48772,
      "longitude": -0.193862,
      "elevation": 12.639058
    },
    {
      "latitude": 51.48775,
      "longitude": -0.193889,
      "elevation": 12.686955
    },
    {
      "latitude": 51.487778,
      "longitude": -0.193916,
      "elevation": 12.719398
    },
    {
      "latitude": 51.4878,
      "longitude": -0.193942,
      "elevation": 12.762977
    },
    {
      "latitude": 51.48782,
      "longitude": -0.193966,
      "elevation": 12.793444
    },
    {
      "latitude": 51.487827,
      "longitude": -0.193986,
      "elevation": 12.808358
    },
    {
      "latitude": 51.487843,
      "longitude": -0.194005,
      "elevation": 12.835685
    },
    {
      "latitude": 51.487858,
      "longitude": -0.19402,
      "elevation": 12.866281
    },
    {
      "latitude": 51.48786,
      "longitude": -0.194038,
      "elevation": 12.870184
    },
    {
      "latitude": 51.48786,
      "longitude": -0.194063,
      "elevation": 12.860226
    },
    {
      "latitude": 51.48785,
      "longitude": -0.194094,
      "elevation": 12.8381
    },
    {
      "latitude": 51.487843,
      "longitude": -0.194129,
      "elevation": 12.805861
    },
    {
      "latitude": 51.48783,
      "longitude": -0.194169,
      "elevation": 12.776282
    },
    {
      "latitude": 51.487827,
      "longitude": -0.194213,
      "elevation": 12.747806
    },
    {
      "latitude": 51.48783,
      "longitude": -0.194259,
      "elevation": 12.715275
    },
    {
      "latitude": 51.487835,
      "longitude": -0.194306,
      "elevation": 12.696664
    },
    {
      "latitude": 51.487843,
      "longitude": -0.194352,
      "elevation": 12.67446
    },
    {
      "latitude": 51.487846,
      "longitude": -0.194395,
      "elevation": 12.611571
    },
    {
      "latitude": 51.487846,
      "longitude": -0.194436,
      "elevation": 12.576763
    },
    {
      "latitude": 51.487843,
      "longitude": -0.194476,
      "elevation": 12.5278845
    },
    {
      "latitude": 51.48783,
      "longitude": -0.194517,
      "elevation": 12.42379
    },
    {
      "latitude": 51.487823,
      "longitude": -0.194558,
      "elevation": 12.39059
    },
    {
      "latitude": 51.48781,
      "longitude": -0.194598,
      "elevation": 12.34717
    },
    {
      "latitude": 51.487797,
      "longitude": -0.194637,
      "elevation": 12.260809
    },
    {
      "latitude": 51.48778,
      "longitude": -0.194676,
      "elevation": 12.207998
    },
    {
      "latitude": 51.487766,
      "longitude": -0.194718,
      "elevation": 12.106987
    },
    {
      "latitude": 51.487747,
      "longitude": -0.194763,
      "elevation": 12.078253
    },
    {
      "latitude": 51.487732,
      "longitude": -0.194812,
      "elevation": 11.92826
    },
    {
      "latitude": 51.48772,
      "longitude": -0.194864,
      "elevation": 11.417454
    },
    {
      "latitude": 51.487713,
      "longitude": -0.194918,
      "elevation": 10.95276
    },
    {
      "latitude": 51.487705,
      "longitude": -0.194972,
      "elevation": 10.811588
    },
    {
      "latitude": 51.4877,
      "longitude": -0.195026,
      "elevation": 10.668446
    },
    {
      "latitude": 51.487694,
      "longitude": -0.195079,
      "elevation": 10.520822
    },
    {
      "latitude": 51.48768,
      "longitude": -0.195129,
      "elevation": 10.513083
    },
    {
      "latitude": 51.487663,
      "longitude": -0.195175,
      "elevation": 10.500259
    },
    {
      "latitude": 51.487644,
      "longitude": -0.195216,
      "elevation": 10.478519
    },
    {
      "latitude": 51.48762,
      "longitude": -0.195255,
      "elevation": 10.319945
    },
    {
      "latitude": 51.4876,
      "longitude": -0.195294,
      "elevation": 10.024959
    },
    {
      "latitude": 51.48758,
      "longitude": -0.195336,
      "elevation": 9.572166
    },
    {
      "latitude": 51.487556,
      "longitude": -0.195381,
      "elevation": 9.257505
    },
    {
      "latitude": 51.487537,
      "longitude": -0.195428,
      "elevation": 8.9395895
    },
    {
      "latitude": 51.487522,
      "longitude": -0.195476,
      "elevation": 8.460171
    },
    {
      "latitude": 51.487503,
      "longitude": -0.195523,
      "elevation": 8.61916
    },
    {
      "latitude": 51.487488,
      "longitude": -0.19557,
      "elevation": 8.459474
    },
    {
      "latitude": 51.48747,
      "longitude": -0.195614,
      "elevation": 8.299827
    },
    {
      "latitude": 51.487453,
      "longitude": -0.195658,
      "elevation": 8.299041
    },
    {
      "latitude": 51.487434,
      "longitude": -0.195699,
      "elevation": 8.139677
    },
    {
      "latitude": 51.48742,
      "longitude": -0.19574,
      "elevation": 8.294586
    },
    {
      "latitude": 51.487404,
      "longitude": -0.195781,
      "elevation": 8.579227
    },
    {
      "latitude": 51.48739,
      "longitude": -0.195824,
      "elevation": 8.813221
    },
    {
      "latitude": 51.487373,
      "longitude": -0.195868,
      "elevation": 8.910153
    },
    {
      "latitude": 51.487362,
      "longitude": -0.195914,
      "elevation": 9.160958
    },
    {
      "latitude": 51.487347,
      "longitude": -0.195958,
      "elevation": 9.215938
    },
    {
      "latitude": 51.48733,
      "longitude": -0.196,
      "elevation": 9.25872
    },
    {
      "latitude": 51.487316,
      "longitude": -0.196041,
      "elevation": 9.293181
    },
    {
      "latitude": 51.487297,
      "longitude": -0.196082,
      "elevation": 9.319221
    },
    {
      "latitude": 51.48728,
      "longitude": -0.196123,
      "elevation": 9.304335
    },
    {
      "latitude": 51.487267,
      "longitude": -0.196164,
      "elevation": 9.247841
    },
    {
      "latitude": 51.487247,
      "longitude": -0.196205,
      "elevation": 9.2362795
    },
    {
      "latitude": 51.487232,
      "longitude": -0.196247,
      "elevation": 9.266767
    },
    {
      "latitude": 51.487217,
      "longitude": -0.196289,
      "elevation": 9.322754
    },
    {
      "latitude": 51.4872,
      "longitude": -0.196331,
      "elevation": 9.313258
    },
    {
      "latitude": 51.487183,
      "longitude": -0.196373,
      "elevation": 9.275833
    },
    {
      "latitude": 51.487167,
      "longitude": -0.196414,
      "elevation": 9.235591
    },
    {
      "latitude": 51.48715,
      "longitude": -0.196455,
      "elevation": 9.229894
    },
    {
      "latitude": 51.48713,
      "longitude": -0.196497,
      "elevation": 9.186531
    },
    {
      "latitude": 51.48711,
      "longitude": -0.19654,
      "elevation": 9.184088
    },
    {
      "latitude": 51.48709,
      "longitude": -0.196585,
      "elevation": 9.22378
    },
    {
      "latitude": 51.487076,
      "longitude": -0.196631,
      "elevation": 9.18858
    },
    {
      "latitude": 51.487057,
      "longitude": -0.196676,
      "elevation": 9.204787
    },
    {
      "latitude": 51.487038,
      "longitude": -0.196718,
      "elevation": 9.155087
    },
    {
      "latitude": 51.48702,
      "longitude": -0.196756,
      "elevation": 8.971099
    },
    {
      "latitude": 51.487003,
      "longitude": -0.196793,
      "elevation": 8.995764
    },
    {
      "latitude": 51.486988,
      "longitude": -0.196832,
      "elevation": 8.813234
    },
    {
      "latitude": 51.486977,
      "longitude": -0.196877,
      "elevation": 8.833139
    },
    {
      "latitude": 51.48696,
      "longitude": -0.196926,
      "elevation": 8.725233
    },
    {
      "latitude": 51.486946,
      "longitude": -0.196977,
      "elevation": 8.868299
    },
    {
      "latitude": 51.486927,
      "longitude": -0.197027,
      "elevation": 8.879232
    },
    {
      "latitude": 51.486904,
      "longitude": -0.197075,
      "elevation": 8.749696
    },
    {
      "latitude": 51.48688,
      "longitude": -0.197122,
      "elevation": 8.892219
    },
    {
      "latitude": 51.486866,
      "longitude": -0.197166,
      "elevation": 9.152057
    },
    {
      "latitude": 51.48685,
      "longitude": -0.197208,
      "elevation": 9.381705
    },
    {
      "latitude": 51.48684,
      "longitude": -0.197249,
      "elevation": 9.578185
    },
    {
      "latitude": 51.48682,
      "longitude": -0.197289,
      "elevation": 9.66736
    },
    {
      "latitude": 51.486805,
      "longitude": -0.197329,
      "elevation": 9.592354
    },
    {
      "latitude": 51.486786,
      "longitude": -0.197369,
      "elevation": 9.505176
    },
    {
      "latitude": 51.48677,
      "longitude": -0.197408,
      "elevation": 9.596717
    },
    {
      "latitude": 51.48675,
      "longitude": -0.197444,
      "elevation": 9.675075
    },
    {
      "latitude": 51.486736,
      "longitude": -0.197475,
      "elevation": 9.740056
    },
    {
      "latitude": 51.486717,
      "longitude": -0.197503,
      "elevation": 9.7228365
    },
    {
      "latitude": 51.486702,
      "longitude": -0.197542,
      "elevation": 9.550437
    },
    {
      "latitude": 51.48669,
      "longitude": -0.197604,
      "elevation": 9.527958
    },
    {
      "latitude": 51.486675,
      "longitude": -0.197661,
      "elevation": 9.50225
    },
    {
      "latitude": 51.486664,
      "longitude": -0.197709,
      "elevation": 9.4006815
    },
    {
      "latitude": 51.486645,
      "longitude": -0.197755,
      "elevation": 9.470098
    },
    {
      "latitude": 51.48663,
      "longitude": -0.197803,
      "elevation": 9.107233
    },
    {
      "latitude": 51.486614,
      "longitude": -0.197853,
      "elevation": 8.869167
    },
    {
      "latitude": 51.486603,
      "longitude": -0.197906,
      "elevation": 8.449813
    },
    {
      "latitude": 51.486588,
      "longitude": -0.197959,
      "elevation": 8.449693
    },
    {
      "latitude": 51.486576,
      "longitude": -0.198011,
      "elevation": 8.296689
    },
    {
      "latitude": 51.48656,
      "longitude": -0.19806,
      "elevation": 8.1395
    },
    {
      "latitude": 51.486546,
      "longitude": -0.198107,
      "elevation": 8.139516
    },
    {
      "latitude": 51.486526,
      "longitude": -0.198151,
      "elevation": 7.9799995
    },
    {
      "latitude": 51.486515,
      "longitude": -0.198195,
      "elevation": 7.6624494
    },
    {
      "latitude": 51.4865,
      "longitude": -0.198238,
      "elevation": 7.5088573
    },
    {
      "latitude": 51.48649,
      "longitude": -0.19828,
      "elevation": 7.3615932
    },
    {
      "latitude": 51.486477,
      "longitude": -0.198322,
      "elevation": 7.222589
    },
    {
      "latitude": 51.486465,
      "longitude": -0.198364,
      "elevation": 7.101668
    },
    {
      "latitude": 51.486454,
      "longitude": -0.198406,
      "elevation": 7.000172
    },
    {
      "latitude": 51.486443,
      "longitude": -0.198448,
      "elevation": 7.130455
    },
    {
      "latitude": 51.48643,
      "longitude": -0.198491,
      "elevation": 7.392234
    },
    {
      "latitude": 51.486416,
      "longitude": -0.198537,
      "elevation": 7.5355635
    },
    {
      "latitude": 51.486397,
      "longitude": -0.198587,
      "elevation": 7.4099674
    },
    {
      "latitude": 51.48638,
      "longitude": -0.198639,
      "elevation": 7.299196
    },
    {
      "latitude": 51.486374,
      "longitude": -0.19869,
      "elevation": 7.2052965
    },
    {
      "latitude": 51.486362,
      "longitude": -0.198738,
      "elevation": 7.2194266
    },
    {
      "latitude": 51.486355,
      "longitude": -0.198786,
      "elevation": 6.913319
    },
    {
      "latitude": 51.486343,
      "longitude": -0.198832,
      "elevation": 6.7778153
    },
    {
      "latitude": 51.486332,
      "longitude": -0.198879,
      "elevation": 6.754202
    },
    {
      "latitude": 51.48632,
      "longitude": -0.198926,
      "elevation": 6.704822
    },
    {
      "latitude": 51.48631,
      "longitude": -0.198974,
      "elevation": 6.6892934
    },
    {
      "latitude": 51.486294,
      "longitude": -0.199023,
      "elevation": 6.6892643
    },
    {
      "latitude": 51.48628,
      "longitude": -0.199073,
      "elevation": 6.7088747
    },
    {
      "latitude": 51.486263,
      "longitude": -0.199123,
      "elevation": 6.6965814
    },
    {
      "latitude": 51.48625,
      "longitude": -0.199173,
      "elevation": 6.746816
    },
    {
      "latitude": 51.486237,
      "longitude": -0.199222,
      "elevation": 6.7488017
    },
    {
      "latitude": 51.48622,
      "longitude": -0.199269,
      "elevation": 6.75182
    },
    {
      "latitude": 51.48621,
      "longitude": -0.199314,
      "elevation": 6.831881
    },
    {
      "latitude": 51.4862,
      "longitude": -0.19936,
      "elevation": 6.884494
    },
    {
      "latitude": 51.48619,
      "longitude": -0.199408,
      "elevation": 7.0096455
    },
    {
      "latitude": 51.48618,
      "longitude": -0.19946,
      "elevation": 7.170884
    },
    {
      "latitude": 51.48617,
      "longitude": -0.199512,
      "elevation": 7.3642573
    },
    {
      "latitude": 51.48616,
      "longitude": -0.19956,
      "elevation": 7.3590846
    },
    {
      "latitude": 51.48614,
      "longitude": -0.1996,
      "elevation": 6.8687963
    },
    {
      "latitude": 51.486122,
      "longitude": -0.199641,
      "elevation": 6.777813
    },
    {
      "latitude": 51.48611,
      "longitude": -0.199689,
      "elevation": 6.810754
    },
    {
      "latitude": 51.4861,
      "longitude": -0.199734,
      "elevation": 6.7449985
    },
    {
      "latitude": 51.486088,
      "longitude": -0.199778,
      "elevation": 6.7843075
    },
    {
      "latitude": 51.486073,
      "longitude": -0.199823,
      "elevation": 6.8202553
    },
    {
      "latitude": 51.486057,
      "longitude": -0.199866,
      "elevation": 7.0537977
    },
    {
      "latitude": 51.48605,
      "longitude": -0.199908,
      "elevation": 7.2684994
    },
    {
      "latitude": 51.486046,
      "longitude": -0.19995,
      "elevation": 7.5319567
    },
    {
      "latitude": 51.486046,
      "longitude": -0.199994,
      "elevation": 7.6779184
    },
    {
      "latitude": 51.486046,
      "longitude": -0.200036,
      "elevation": 7.981812
    },
    {
      "latitude": 51.48605,
      "longitude": -0.200076,
      "elevation": 8.615727
    },
    {
      "latitude": 51.48605,
      "longitude": -0.200114,
      "elevation": 9.048792
    },
    {
      "latitude": 51.48605,
      "longitude": -0.200152,
      "elevation": 9.397801
    },
    {
      "latitude": 51.486046,
      "longitude": -0.200191,
      "elevation": 9.47875
    },
    {
      "latitude": 51.486042,
      "longitude": -0.200232,
      "elevation": 9.458242
    },
    {
      "latitude": 51.486034,
      "longitude": -0.200276,
      "elevation": 9.577197
    },
    {
      "latitude": 51.486027,
      "longitude": -0.200324,
      "elevation": 9.466456
    },
    {
      "latitude": 51.486015,
      "longitude": -0.200374,
      "elevation": 9.417023
    },
    {
      "latitude": 51.486,
      "longitude": -0.200423,
      "elevation": 9.423183
    },
    {
      "latitude": 51.48599,
      "longitude": -0.200471,
      "elevation": 9.418611
    },
    {
      "latitude": 51.485973,
      "longitude": -0.200518,
      "elevation": 9.357261
    },
    {
      "latitude": 51.485962,
      "longitude": -0.200566,
      "elevation": 9.255051
    },
    {
      "latitude": 51.485947,
      "longitude": -0.200616,
      "elevation": 9.041239
    },
    {
      "latitude": 51.48593,
      "longitude": -0.200666,
      "elevation": 8.992909
    },
    {
      "latitude": 51.48592,
      "longitude": -0.200716,
      "elevation": 9.0054655
    },
    {
      "latitude": 51.48591,
      "longitude": -0.200764,
      "elevation": 9.117004
    },
    {
      "latitude": 51.485905,
      "longitude": -0.200811,
      "elevation": 9.149381
    },
    {
      "latitude": 51.485897,
      "longitude": -0.200857,
      "elevation": 9.190725
    },
    {
      "latitude": 51.48589,
      "longitude": -0.200903,
      "elevation": 9.171886
    },
    {
      "latitude": 51.485886,
      "longitude": -0.200948,
      "elevation": 9.148628
    },
    {
      "latitude": 51.48588,
      "longitude": -0.200988,
      "elevation": 9.133459
    },
    {
      "latitude": 51.48588,
      "longitude": -0.201023,
      "elevation": 9.134868
    },
    {
      "latitude": 51.48588,
      "longitude": -0.201062,
      "elevation": 9.123117
    },
    {
      "latitude": 51.48588,
      "longitude": -0.20111,
      "elevation": 9.094375
    },
    {
      "latitude": 51.48587,
      "longitude": -0.20116,
      "elevation": 9.06742
    },
    {
      "latitude": 51.485855,
      "longitude": -0.201209,
      "elevation": 9.014965
    },
    {
      "latitude": 51.48584,
      "longitude": -0.201259,
      "elevation": 8.919964
    },
    {
      "latitude": 51.48583,
      "longitude": -0.201311,
      "elevation": 8.948524
    },
    {
      "latitude": 51.485817,
      "longitude": -0.20136,
      "elevation": 8.948524
    },
    {
      "latitude": 51.485806,
      "longitude": -0.201405,
      "elevation": 8.939728
    },
    {
      "latitude": 51.485794,
      "longitude": -0.201452,
      "elevation": 8.956052
    },
    {
      "latitude": 51.48578,
      "longitude": -0.201499,
      "elevation": 8.967991
    },
    {
      "latitude": 51.48576,
      "longitude": -0.201543,
      "elevation": 8.967991
    },
    {
      "latitude": 51.485737,
      "longitude": -0.201581,
      "elevation": 8.948524
    },
    {
      "latitude": 51.485718,
      "longitude": -0.201621,
      "elevation": 8.929455
    },
    {
      "latitude": 51.4857,
      "longitude": -0.201666,
      "elevation": 8.868295
    },
    {
      "latitude": 51.485687,
      "longitude": -0.201714,
      "elevation": 8.745536
    },
    {
      "latitude": 51.485676,
      "longitude": -0.201763,
      "elevation": 8.697495
    },
    {
      "latitude": 51.485664,
      "longitude": -0.201811,
      "elevation": 8.587175
    },
    {
      "latitude": 51.485653,
      "longitude": -0.201856,
      "elevation": 8.545054
    },
    {
      "latitude": 51.485645,
      "longitude": -0.201901,
      "elevation": 8.46719
    },
    {
      "latitude": 51.485638,
      "longitude": -0.201945,
      "elevation": 8.343534
    },
    {
      "latitude": 51.485626,
      "longitude": -0.20199,
      "elevation": 8.34755
    },
    {
      "latitude": 51.485615,
      "longitude": -0.202034,
      "elevation": 8.267012
    },
    {
      "latitude": 51.485603,
      "longitude": -0.202077,
      "elevation": 8.267795
    },
    {
      "latitude": 51.48559,
      "longitude": -0.202118,
      "elevation": 8.101001
    },
    {
      "latitude": 51.485584,
      "longitude": -0.202155,
      "elevation": 7.956171
    },
    {
      "latitude": 51.485283,
      "longitude": -0.202569,
      "elevation": 7.99975
    },
    {
      "latitude": 51.48528,
      "longitude": -0.202563,
      "elevation": 7.999845
    },
    {
      "latitude": 51.48528,
      "longitude": -0.202563,
      "elevation": 7.9998875
    },
    {
      "latitude": 51.485283,
      "longitude": -0.202568,
      "elevation": 7.9999304
    },
    {
      "latitude": 51.48529,
      "longitude": -0.202579,
      "elevation": 7.9999633
    },
    {
      "latitude": 51.4853,
      "longitude": -0.202593,
      "elevation": 7.9999685
    },
    {
      "latitude": 51.48531,
      "longitude": -0.20261,
      "elevation": 7.9999685
    },
    {
      "latitude": 51.485317,
      "longitude": -0.202629,
      "elevation": 7.9999733
    },
    {
      "latitude": 51.485325,
      "longitude": -0.202649,
      "elevation": 7.9999495
    },
    {
      "latitude": 51.48533,
      "longitude": -0.20267,
      "elevation": 7.9999495
    },
    {
      "latitude": 51.485325,
      "longitude": -0.202692,
      "elevation": 7.999957
    },
    {
      "latitude": 51.48531,
      "longitude": -0.202716,
      "elevation": 7.999941
    },
    {
      "latitude": 51.485294,
      "longitude": -0.20274,
      "elevation": 7.999941
    },
    {
      "latitude": 51.485283,
      "longitude": -0.202768,
      "elevation": 7.999904
    },
    {
      "latitude": 51.485264,
      "longitude": -0.202816,
      "elevation": 7.99975
    },
    {
      "latitude": 51.48525,
      "longitude": -0.20287,
      "elevation": 7.99975
    },
    {
      "latitude": 51.485226,
      "longitude": -0.202911,
      "elevation": 7.9994435
    },
    {
      "latitude": 51.485203,
      "longitude": -0.202945,
      "elevation": 7.9991007
    },
    {
      "latitude": 51.485176,
      "longitude": -0.202982,
      "elevation": 7.9987617
    },
    {
      "latitude": 51.48515,
      "longitude": -0.203024,
      "elevation": 7.9967675
    },
    {
      "latitude": 51.485123,
      "longitude": -0.203068,
      "elevation": 7.996207
    },
    {
      "latitude": 51.4851,
      "longitude": -0.203112,
      "elevation": 7.9947786
    },
    {
      "latitude": 51.48508,
      "longitude": -0.203155,
      "elevation": 7.993874
    },
    {
      "latitude": 51.48506,
      "longitude": -0.203197,
      "elevation": 7.993874
    },
    {
      "latitude": 51.48504,
      "longitude": -0.203238,
      "elevation": 7.993874
    },
    {
      "latitude": 51.48502,
      "longitude": -0.203276,
      "elevation": 7.9915686
    },
    {
      "latitude": 51.484997,
      "longitude": -0.203313,
      "elevation": 7.9899435
    },
    {
      "latitude": 51.484974,
      "longitude": -0.203351,
      "elevation": 8.010094
    },
    {
      "latitude": 51.484955,
      "longitude": -0.203394,
      "elevation": 8.025916
    },
    {
      "latitude": 51.48494,
      "longitude": -0.203445,
      "elevation": 8.030269
    },
    {
      "latitude": 51.48493,
      "longitude": -0.203491,
      "elevation": 8.024736
    },
    {
      "latitude": 51.484917,
      "longitude": -0.203536,
      "elevation": 8.015892
    },
    {
      "latitude": 51.4849,
      "longitude": -0.203582,
      "elevation": 7.985379
    },
    {
      "latitude": 51.484886,
      "longitude": -0.203628,
      "elevation": 7.953727
    },
    {
      "latitude": 51.484875,
      "longitude": -0.203675,
      "elevation": 7.904992
    },
    {
      "latitude": 51.484863,
      "longitude": -0.203722,
      "elevation": 7.9042964
    },
    {
      "latitude": 51.484848,
      "longitude": -0.203767,
      "elevation": 7.9040413
    },
    {
      "latitude": 51.48483,
      "longitude": -0.203809,
      "elevation": 7.9527435
    },
    {
      "latitude": 51.48481,
      "longitude": -0.203849,
      "elevation": 7.9517365
    },
    {
      "latitude": 51.484795,
      "longitude": -0.203888,
      "elevation": 7.9483895
    },
    {
      "latitude": 51.484776,
      "longitude": -0.203927,
      "elevation": 7.9207554
    },
    {
      "latitude": 51.48476,
      "longitude": -0.203968,
      "elevation": 7.8236217
    },
    {
      "latitude": 51.484745,
      "longitude": -0.204011,
      "elevation": 7.775991
    },
    {
      "latitude": 51.48473,
      "longitude": -0.204056,
      "elevation": 7.765575
    },
    {
      "latitude": 51.484715,
      "longitude": -0.204102,
      "elevation": 7.753361
    },
    {
      "latitude": 51.4847,
      "longitude": -0.204148,
      "elevation": 7.696648
    },
    {
      "latitude": 51.484688,
      "longitude": -0.204195,
      "elevation": 7.586398
    },
    {
      "latitude": 51.484673,
      "longitude": -0.204243,
      "elevation": 7.64208
    },
    {
      "latitude": 51.484657,
      "longitude": -0.204289,
      "elevation": 7.64208
    },
    {
      "latitude": 51.484646,
      "longitude": -0.204336,
      "elevation": 7.64208
    },
    {
      "latitude": 51.48463,
      "longitude": -0.204381,
      "elevation": 7.7335677
    },
    {
      "latitude": 51.48461,
      "longitude": -0.204425,
      "elevation": 7.7707033
    },
    {
      "latitude": 51.484596,
      "longitude": -0.20447,
      "elevation": 7.7335677
    },
    {
      "latitude": 51.484585,
      "longitude": -0.204514,
      "elevation": 7.7707033
    },
    {
      "latitude": 51.48457,
      "longitude": -0.204561,
      "elevation": 7.830841
    },
    {
      "latitude": 51.484554,
      "longitude": -0.204611,
      "elevation": 7.7707033
    },
    {
      "latitude": 51.484543,
      "longitude": -0.204663,
      "elevation": 7.7335677
    },
    {
      "latitude": 51.48453,
      "longitude": -0.204718,
      "elevation": 7.7707033
    },
    {
      "latitude": 51.484524,
      "longitude": -0.204774,
      "elevation": 7.6909113
    },
    {
      "latitude": 51.48452,
      "longitude": -0.204829,
      "elevation": 7.7707033
    },
    {
      "latitude": 51.484516,
      "longitude": -0.204881,
      "elevation": 7.802936
    },
    {
      "latitude": 51.48452,
      "longitude": -0.204929,
      "elevation": 7.802936
    },
    {
      "latitude": 51.48452,
      "longitude": -0.204972,
      "elevation": 7.875726
    },
    {
      "latitude": 51.484516,
      "longitude": -0.205009,
      "elevation": 7.889564
    },
    {
      "latitude": 51.484505,
      "longitude": -0.205041,
      "elevation": 7.903714
    },
    {
      "latitude": 51.48449,
      "longitude": -0.205078,
      "elevation": 7.888482
    },
    {
      "latitude": 51.484474,
      "longitude": -0.205129,
      "elevation": 7.8798623
    },
    {
      "latitude": 51.48446,
      "longitude": -0.205189,
      "elevation": 7.8758535
    },
    {
      "latitude": 51.48444,
      "longitude": -0.205251,
      "elevation": 7.8633027
    },
    {
      "latitude": 51.484425,
      "longitude": -0.205307,
      "elevation": 7.8593
    },
    {
      "latitude": 51.484413,
      "longitude": -0.205358,
      "elevation": 7.846424
    },
    {
      "latitude": 51.48441,
      "longitude": -0.205408,
      "elevation": 7.8385773
    },
    {
      "latitude": 51.484406,
      "longitude": -0.205457,
      "elevation": 7.8205
    },
    {
      "latitude": 51.484398,
      "longitude": -0.205504,
      "elevation": 7.8186064
    },
    {
      "latitude": 51.484383,
      "longitude": -0.205547,
      "elevation": 7.8110757
    },
    {
      "latitude": 51.484367,
      "longitude": -0.205588,
      "elevation": 7.8086376
    },
    {
      "latitude": 51.484352,
      "longitude": -0.205631,
      "elevation": 7.788783
    },
    {
      "latitude": 51.484344,
      "longitude": -0.205677,
      "elevation": 7.7614527
    },
    {
      "latitude": 51.484337,
      "longitude": -0.205724,
      "elevation": 7.702081
    },
    {
      "latitude": 51.484325,
      "longitude": -0.205772,
      "elevation": 7.702604
    },
    {
      "latitude": 51.484314,
      "longitude": -0.205821,
      "elevation": 7.704281
    },
    {
      "latitude": 51.484303,
      "longitude": -0.205872,
      "elevation": 7.713615
    },
    {
      "latitude": 51.48429,
      "longitude": -0.205923,
      "elevation": 7.7422132
    },
    {
      "latitude": 51.484283,
      "longitude": -0.205975,
      "elevation": 7.734699
    },
    {
      "latitude": 51.484272,
      "longitude": -0.206027,
      "elevation": 7.803742
    },
    {
      "latitude": 51.484264,
      "longitude": -0.206078,
      "elevation": 7.8474646
    },
    {
      "latitude": 51.484253,
      "longitude": -0.20613,
      "elevation": 7.8633432
    },
    {
      "latitude": 51.484245,
      "longitude": -0.206181,
      "elevation": 7.8682656
    },
    {
      "latitude": 51.484238,
      "longitude": -0.206232,
      "elevation": 7.884253
    },
    {
      "latitude": 51.484226,
      "longitude": -0.206282,
      "elevation": 7.8890495
    },
    {
      "latitude": 51.48422,
      "longitude": -0.206331,
      "elevation": 7.9051485
    },
    {
      "latitude": 51.484207,
      "longitude": -0.206381,
      "elevation": 7.9030614
    },
    {
      "latitude": 51.4842,
      "longitude": -0.20643,
      "elevation": 7.8960605
    },
    {
      "latitude": 51.48419,
      "longitude": -0.206478,
      "elevation": 7.895177
    },
    {
      "latitude": 51.48418,
      "longitude": -0.206527,
      "elevation": 7.9062815
    },
    {
      "latitude": 51.48417,
      "longitude": -0.206574,
      "elevation": 7.9053392
    },
    {
      "latitude": 51.484158,
      "longitude": -0.206622,
      "elevation": 7.9875355
    },
    {
      "latitude": 51.484146,
      "longitude": -0.20667,
      "elevation": 8.003325
    },
    {
      "latitude": 51.484135,
      "longitude": -0.206719,
      "elevation": 7.9619246
    },
    {
      "latitude": 51.484123,
      "longitude": -0.20677,
      "elevation": 7.911175
    },
    {
      "latitude": 51.484116,
      "longitude": -0.206823,
      "elevation": 7.861208
    },
    {
      "latitude": 51.484108,
      "longitude": -0.206874,
      "elevation": 7.813322
    },
    {
      "latitude": 51.484097,
      "longitude": -0.206923,
      "elevation": 7.76906
    },
    {
      "latitude": 51.484085,
      "longitude": -0.206968,
      "elevation": 7.728727
    },
    {
      "latitude": 51.48407,
      "longitude": -0.207007,
      "elevation": 7.702233
    },
    {
      "latitude": 51.484055,
      "longitude": -0.207046,
      "elevation": 7.674779
    },
    {
      "latitude": 51.48404,
      "longitude": -0.207088,
      "elevation": 7.641834
    },
    {
      "latitude": 51.484024,
      "longitude": -0.207132,
      "elevation": 7.6061063
    },
    {
      "latitude": 51.48401,
      "longitude": -0.207179,
      "elevation": 7.566812
    },
    {
      "latitude": 51.483994,
      "longitude": -0.207226,
      "elevation": 7.528583
    },
    {
      "latitude": 51.48398,
      "longitude": -0.207274,
      "elevation": 7.4908586
    },
    {
      "latitude": 51.483967,
      "longitude": -0.207321,
      "elevation": 7.451898
    },
    {
      "latitude": 51.48395,
      "longitude": -0.207367,
      "elevation": 7.4130983
    },
    {
      "latitude": 51.483936,
      "longitude": -0.207411,
      "elevation": 7.3761578
    },
    {
      "latitude": 51.48392,
      "longitude": -0.207454,
      "elevation": 7.3365273
    },
    {
      "latitude": 51.48391,
      "longitude": -0.207497,
      "elevation": 7.3059473
    },
    {
      "latitude": 51.483894,
      "longitude": -0.207541,
      "elevation": 7.315251
    },
    {
      "latitude": 51.483883,
      "longitude": -0.207587,
      "elevation": 7.3278365
    },
    {
      "latitude": 51.483875,
      "longitude": -0.207633,
      "elevation": 7.3396997
    },
    {
      "latitude": 51.483864,
      "longitude": -0.207678,
      "elevation": 7.346009
    },
    {
      "latitude": 51.483856,
      "longitude": -0.207719,
      "elevation": 7.353844
    },
    {
      "latitude": 51.483845,
      "longitude": -0.207756,
      "elevation": 7.360767
    },
    {
      "latitude": 51.48383,
      "longitude": -0.20779,
      "elevation": 7.37829
    },
    {
      "latitude": 51.48381,
      "longitude": -0.207821,
      "elevation": 7.4079742
    },
    {
      "latitude": 51.483788,
      "longitude": -0.207852,
      "elevation": 7.433841
    },
    {
      "latitude": 51.48377,
      "longitude": -0.207885,
      "elevation": 7.454884
    },
    {
      "latitude": 51.48375,
      "longitude": -0.207922,
      "elevation": 7.4641895
    },
    {
      "latitude": 51.483738,
      "longitude": -0.207962,
      "elevation": 7.472063
    },
    {
      "latitude": 51.483727,
      "longitude": -0.208005,
      "elevation": 7.4594746
    },
    {
      "latitude": 51.48372,
      "longitude": -0.208049,
      "elevation": 7.4311633
    },
    {
      "latitude": 51.483707,
      "longitude": -0.208095,
      "elevation": 7.442962
    },
    {
      "latitude": 51.483696,
      "longitude": -0.208143,
      "elevation": 7.436066
    },
    {
      "latitude": 51.483685,
      "longitude": -0.208191,
      "elevation": 7.4486437
    },
    {
      "latitude": 51.483673,
      "longitude": -0.20824,
      "elevation": 7.460151
    },
    {
      "latitude": 51.48366,
      "longitude": -0.208288,
      "elevation": 7.448092
    },
    {
      "latitude": 51.48365,
      "longitude": -0.208335,
      "elevation": 7.366857
    },
    {
      "latitude": 51.483643,
      "longitude": -0.20838,
      "elevation": 7.3004246
    },
    {
      "latitude": 51.483635,
      "longitude": -0.208426,
      "elevation": 7.2652993
    },
    {
      "latitude": 51.483624,
      "longitude": -0.208474,
      "elevation": 7.341569
    },
    {
      "latitude": 51.483612,
      "longitude": -0.208524,
      "elevation": 7.5330787
    },
    {
      "latitude": 51.483597,
      "longitude": -0.208575,
      "elevation": 7.590758
    },
    {
      "latitude": 51.48358,
      "longitude": -0.208624,
      "elevation": 7.6667
    },
    {
      "latitude": 51.483562,
      "longitude": -0.208673,
      "elevation": 7.712228
    },
    {
      "latitude": 51.483547,
      "longitude": -0.208721,
      "elevation": 7.735819
    },
    {
      "latitude": 51.48353,
      "longitude": -0.208767,
      "elevation": 7.7754693
    },
    {
      "latitude": 51.483513,
      "longitude": -0.208813,
      "elevation": 7.795236
    },
    {
      "latitude": 51.483494,
      "longitude": -0.208857,
      "elevation": 7.812029
    },
    {
      "latitude": 51.48348,
      "longitude": -0.208901,
      "elevation": 7.826876
    },
    {
      "latitude": 51.48346,
      "longitude": -0.208944,
      "elevation": 7.796415
    },
    {
      "latitude": 51.483444,
      "longitude": -0.208987,
      "elevation": 7.8067875
    },
    {
      "latitude": 51.48343,
      "longitude": -0.209029,
      "elevation": 7.787494
    },
    {
      "latitude": 51.483414,
      "longitude": -0.209071,
      "elevation": 7.7940073
    },
    {
      "latitude": 51.4834,
      "longitude": -0.209113,
      "elevation": 7.766723
    },
    {
      "latitude": 51.483383,
      "longitude": -0.209154,
      "elevation": 7.802185
    },
    {
      "latitude": 51.48337,
      "longitude": -0.209195,
      "elevation": 7.830841
    },
    {
      "latitude": 51.483356,
      "longitude": -0.209236,
      "elevation": 7.802936
    },
    {
      "latitude": 51.48334,
      "longitude": -0.209276,
      "elevation": 7.802936
    },
    {
      "latitude": 51.48333,
      "longitude": -0.209317,
      "elevation": 7.835982
    },
    {
      "latitude": 51.483315,
      "longitude": -0.20936,
      "elevation": 7.7527494
    },
    {
      "latitude": 51.483303,
      "longitude": -0.209407,
      "elevation": 7.7252526
    },
    {
      "latitude": 51.48329,
      "longitude": -0.209454,
      "elevation": 7.4877954
    },
    {
      "latitude": 51.48328,
      "longitude": -0.2095,
      "elevation": 7.4122896
    },
    {
      "latitude": 51.483273,
      "longitude": -0.209545,
      "elevation": 7.50619
    },
    {
      "latitude": 51.483265,
      "longitude": -0.209589,
      "elevation": 7.5923653
    },
    {
      "latitude": 51.483257,
      "longitude": -0.209634,
      "elevation": 7.7344522
    },
    {
      "latitude": 51.48325,
      "longitude": -0.209679,
      "elevation": 7.801771
    },
    {
      "latitude": 51.483242,
      "longitude": -0.209723,
      "elevation": 7.9469404
    },
    {
      "latitude": 51.483234,
      "longitude": -0.209768,
      "elevation": 8.001167
    },
    {
      "latitude": 51.483223,
      "longitude": -0.209816,
      "elevation": 8.051968
    },
    {
      "latitude": 51.483215,
      "longitude": -0.209868,
      "elevation": 8.044531
    },
    {
      "latitude": 51.483204,
      "longitude": -0.20992,
      "elevation": 8.06964
    },
    {
      "latitude": 51.483192,
      "longitude": -0.20997,
      "elevation": 7.9693027
    },
    {
      "latitude": 51.48318,
      "longitude": -0.21002,
      "elevation": 7.933538
    },
    {
      "latitude": 51.483166,
      "longitude": -0.210068,
      "elevation": 7.9453917
    },
    {
      "latitude": 51.483154,
      "longitude": -0.210117,
      "elevation": 8.012346
    },
    {
      "latitude": 51.483147,
      "longitude": -0.210168,
      "elevation": 8.068784
    },
    {
      "latitude": 51.483143,
      "longitude": -0.210219,
      "elevation": 7.887923
    },
    {
      "latitude": 51.48314,
      "longitude": -0.210273,
      "elevation": 7.723647
    },
    {
      "latitude": 51.48314,
      "longitude": -0.210326,
      "elevation": 7.5217576
    },
    {
      "latitude": 51.48314,
      "longitude": -0.21038,
      "elevation": 7.2842474
    },
    {
      "latitude": 51.48314,
      "longitude": -0.210433,
      "elevation": 7.151497
    },
    {
      "latitude": 51.48314,
      "longitude": -0.210484,
      "elevation": 7.2782598
    },
    {
      "latitude": 51.483135,
      "longitude": -0.210536,
      "elevation": 7.010388
    },
    {
      "latitude": 51.483135,
      "longitude": -0.210589,
      "elevation": 6.864881
    },
    {
      "latitude": 51.48313,
      "longitude": -0.210646,
      "elevation": 7.0072823
    },
    {
      "latitude": 51.48313,
      "longitude": -0.210702,
      "elevation": 7.2662344
    },
    {
      "latitude": 51.483128,
      "longitude": -0.210754,
      "elevation": 7.48598
    },
    {
      "latitude": 51.48312,
      "longitude": -0.210804,
      "elevation": 7.5789857
    },
    {
      "latitude": 51.483112,
      "longitude": -0.210855,
      "elevation": 7.578203
    },
    {
      "latitude": 51.48311,
      "longitude": -0.210909,
      "elevation": 7.4847684
    },
    {
      "latitude": 51.483105,
      "longitude": -0.210965,
      "elevation": 7.583364
    },
    {
      "latitude": 51.4831,
      "longitude": -0.211017,
      "elevation": 7.671933
    },
    {
      "latitude": 51.483097,
      "longitude": -0.211066,
      "elevation": 7.586435
    },
    {
      "latitude": 51.483097,
      "longitude": -0.211113,
      "elevation": 7.3837094
    },
    {
      "latitude": 51.483093,
      "longitude": -0.211159,
      "elevation": 7.4913554
    },
    {
      "latitude": 51.483093,
      "longitude": -0.211205,
      "elevation": 7.3851542
    },
    {
      "latitude": 51.48309,
      "longitude": -0.211252,
      "elevation": 7.3858733
    },
    {
      "latitude": 51.48309,
      "longitude": -0.2113,
      "elevation": 7.38659
    },
    {
      "latitude": 51.483086,
      "longitude": -0.211347,
      "elevation": 7.143441
    },
    {
      "latitude": 51.48308,
      "longitude": -0.211393,
      "elevation": 7.2711387
    },
    {
      "latitude": 51.483074,
      "longitude": -0.211437,
      "elevation": 7.272821
    },
    {
      "latitude": 51.483067,
      "longitude": -0.211478,
      "elevation": 7.1474257
    },
    {
      "latitude": 51.48305,
      "longitude": -0.211519,
      "elevation": 6.8669977
    },
    {
      "latitude": 51.48304,
      "longitude": -0.211561,
      "elevation": 7.0139556
    },
    {
      "latitude": 51.483032,
      "longitude": -0.211607,
      "elevation": 6.7161746
    },
    {
      "latitude": 51.48303,
      "longitude": -0.211653,
      "elevation": 6.716398
    },
    {
      "latitude": 51.483025,
      "longitude": -0.211697,
      "elevation": 6.5594516
    },
    {
      "latitude": 51.483013,
      "longitude": -0.211746,
      "elevation": 6.3999996
    },
    {
      "latitude": 51.482998,
      "longitude": -0.211804,
      "elevation": 6.4
    },
    {
      "latitude": 51.48299,
      "longitude": -0.211859,
      "elevation": 6.5597367
    },
    {
      "latitude": 51.482986,
      "longitude": -0.21191,
      "elevation": 6.7176986
    },
    {
      "latitude": 51.482983,
      "longitude": -0.211961,
      "elevation": 6.7178054
    },
    {
      "latitude": 51.482975,
      "longitude": -0.21201,
      "elevation": 6.872557
    },
    {
      "latitude": 51.482964,
      "longitude": -0.212056,
      "elevation": 6.5598674
    },
    {
      "latitude": 51.482952,
      "longitude": -0.212098,
      "elevation": 6.400017
    },
    {
      "latitude": 51.482937,
      "longitude": -0.212138,
      "elevation": 6.0850797
    },
    {
      "latitude": 51.482925,
      "longitude": -0.212178,
      "elevation": 6.0856485
    },
    {
      "latitude": 51.482914,
      "longitude": -0.212219,
      "elevation": 6.086205
    },
    {
      "latitude": 51.482903,
      "longitude": -0.212261,
      "elevation": 5.793957
    },
    {
      "latitude": 51.482895,
      "longitude": -0.212303,
      "elevation": 5.938097
    },
    {
      "latitude": 51.482876,
      "longitude": -0.212349,
      "elevation": 5.665071
    },
    {
      "latitude": 51.482857,
      "longitude": -0.212399,
      "elevation": 5.5476947
    },
    {
      "latitude": 51.482838,
      "longitude": -0.212449,
      "elevation": 5.3399715
    },
    {
      "latitude": 51.48283,
      "longitude": -0.212494,
      "elevation": 5.4446144
    },
    {
      "latitude": 51.482822,
      "longitude": -0.212539,
      "elevation": 5.808313
    },
    {
      "latitude": 51.48281,
      "longitude": -0.212587,
      "elevation": 5.9478874
    },
    {
      "latitude": 51.482803,
      "longitude": -0.212637,
      "elevation": 6.094012
    },
    {
      "latitude": 51.482796,
      "longitude": -0.212689,
      "elevation": 6.2454867
    },
    {
      "latitude": 51.482796,
      "longitude": -0.212737,
      "elevation": 6.245535
    },
    {
      "latitude": 51.4828,
      "longitude": -0.212782,
      "elevation": 6.4011455
    },
    {
      "latitude": 51.482807,
      "longitude": -0.212824,
      "elevation": 6.4010296
    },
    {
      "latitude": 51.482807,
      "longitude": -0.212868,
      "elevation": 6.5600305
    },
    {
      "latitude": 51.4828,
      "longitude": -0.212913,
      "elevation": 6.8788376
    },
    {
      "latitude": 51.48279,
      "longitude": -0.212959,
      "elevation": 7.186686
    },
    {
      "latitude": 51.482777,
      "longitude": -0.213005,
      "elevation": 7.035755
    },
    {
      "latitude": 51.482765,
      "longitude": -0.213052,
      "elevation": 7.036225
    },
    {
      "latitude": 51.482758,
      "longitude": -0.213098,
      "elevation": 6.879455
    },
    {
      "latitude": 51.482746,
      "longitude": -0.213144,
      "elevation": 6.879544
    },
    {
      "latitude": 51.482735,
      "longitude": -0.213192,
      "elevation": 6.8796544
    },
    {
      "latitude": 51.482716,
      "longitude": -0.213243,
      "elevation": 6.8797755
    },
    {
      "latitude": 51.482697,
      "longitude": -0.213294,
      "elevation": 7.038254
    },
    {
      "latitude": 51.48268,
      "longitude": -0.213347,
      "elevation": 6.879882
    },
    {
      "latitude": 51.482674,
      "longitude": -0.2134,
      "elevation": 6.7200003
    },
    {
      "latitude": 51.482666,
      "longitude": -0.213453,
      "elevation": 6.879392
    },
    {
      "latitude": 51.482662,
      "longitude": -0.213504,
      "elevation": 6.8788633
    },
    {
      "latitude": 51.48266,
      "longitude": -0.213554,
      "elevation": 6.7198405
    },
    {
      "latitude": 51.482655,
      "longitude": -0.213602,
      "elevation": 6.719603
    },
    {
      "latitude": 51.482655,
      "longitude": -0.21365,
      "elevation": 6.559987
    },
    {
      "latitude": 51.48265,
      "longitude": -0.213702,
      "elevation": 6.718487
    },
    {
      "latitude": 51.48265,
      "longitude": -0.21376,
      "elevation": 6.7173157
    },
    {
      "latitude": 51.482647,
      "longitude": -0.213819,
      "elevation": 7.013101
    },
    {
      "latitude": 51.482643,
      "longitude": -0.213874,
      "elevation": 7.0067267
    },
    {
      "latitude": 51.48264,
      "longitude": -0.213925,
      "elevation": 7.2562847
    },
    {
      "latitude": 51.48263,
      "longitude": -0.213971,
      "elevation": 7.4572306
    },
    {
      "latitude": 51.482624,
      "longitude": -0.214013,
      "elevation": 7.4409947
    },
    {
      "latitude": 51.482613,
      "longitude": -0.214053,
      "elevation": 7.4245195
    },
    {
      "latitude": 51.4826,
      "longitude": -0.214097,
      "elevation": 7.311286
    },
    {
      "latitude": 51.482594,
      "longitude": -0.214143,
      "elevation": 7.2923756
    },
    {
      "latitude": 51.482594,
      "longitude": -0.214188,
      "elevation": 7.586398
    },
    {
      "latitude": 51.482597,
      "longitude": -0.214233,
      "elevation": 7.830841
    },
    {
      "latitude": 51.48261,
      "longitude": -0.214277,
      "elevation": 7.875726
    },
    {
      "latitude": 51.48262,
      "longitude": -0.214324,
      "elevation": 7.893612
    },
    {
      "latitude": 51.48263,
      "longitude": -0.214373,
      "elevation": 7.9221797
    },
    {
      "latitude": 51.482643,
      "longitude": -0.214423,
      "elevation": 7.893612
    },
    {
      "latitude": 51.482655,
      "longitude": -0.214472,
      "elevation": 7.875726
    },
    {
      "latitude": 51.482674,
      "longitude": -0.214519,
      "elevation": 7.908984
    },
    {
      "latitude": 51.482693,
      "longitude": -0.214565,
      "elevation": 7.9221797
    },
    {
      "latitude": 51.482716,
      "longitude": -0.214609,
      "elevation": 7.9334946
    },
    {
      "latitude": 51.48274,
      "longitude": -0.214652,
      "elevation": 7.943188
    },
    {
      "latitude": 51.482758,
      "longitude": -0.214696,
      "elevation": 7.9221797
    },
    {
      "latitude": 51.482773,
      "longitude": -0.214741,
      "elevation": 7.9221797
    },
    {
      "latitude": 51.48279,
      "longitude": -0.214787,
      "elevation": 7.7707033
    },
    {
      "latitude": 51.482803,
      "longitude": -0.214837,
      "elevation": 7.7335677
    },
    {
      "latitude": 51.482815,
      "longitude": -0.214891,
      "elevation": 7.6909113
    },
    {
      "latitude": 51.482826,
      "longitude": -0.21494,
      "elevation": 7.523188
    },
    {
      "latitude": 51.48284,
      "longitude": -0.21498,
      "elevation": 7.3716183
    },
    {
      "latitude": 51.482857,
      "longitude": -0.215019,
      "elevation": 7.382247
    },
    {
      "latitude": 51.482876,
      "longitude": -0.215061,
      "elevation": 7.4050665
    },
    {
      "latitude": 51.48289,
      "longitude": -0.215103,
      "elevation": 7.330048
    },
    {
      "latitude": 51.482906,
      "longitude": -0.215147,
      "elevation": 7.62039
    },
    {
      "latitude": 51.482925,
      "longitude": -0.215191,
      "elevation": 7.722552
    },
    {
      "latitude": 51.48295,
      "longitude": -0.215236,
      "elevation": 7.821628
    },
    {
      "latitude": 51.482967,
      "longitude": -0.215282,
      "elevation": 7.8538065
    },
    {
      "latitude": 51.482986,
      "longitude": -0.215329,
      "elevation": 7.810239
    },
    {
      "latitude": 51.482998,
      "longitude": -0.215377,
      "elevation": 7.750667
    },
    {
      "latitude": 51.483,
      "longitude": -0.215428,
      "elevation": 8.087371
    },
    {
      "latitude": 51.483,
      "longitude": -0.215479,
      "elevation": 8.124698
    },
    {
      "latitude": 51.48301,
      "longitude": -0.215526,
      "elevation": 7.5933776
    },
    {
      "latitude": 51.48302,
      "longitude": -0.215567,
      "elevation": 6.87934
    },
    {
      "latitude": 51.483036,
      "longitude": -0.215601,
      "elevation": 6.1011014
    },
    {
      "latitude": 51.48305,
      "longitude": -0.215634,
      "elevation": 5.603541
    },
    {
      "latitude": 51.483067,
      "longitude": -0.215674,
      "elevation": 5.521477
    },
    {
      "latitude": 51.483074,
      "longitude": -0.215719,
      "elevation": 5.5443974
    },
    {
      "latitude": 51.483086,
      "longitude": -0.215767,
      "elevation": 5.661868
    },
    {
      "latitude": 51.483097,
      "longitude": -0.215816,
      "elevation": 5.6858063
    },
    {
      "latitude": 51.483112,
      "longitude": -0.215862,
      "elevation": 5.794633
    },
    {
      "latitude": 51.483124,
      "longitude": -0.215904,
      "elevation": 5.7037907
    },
    {
      "latitude": 51.483135,
      "longitude": -0.215943,
      "elevation": 5.622687
    },
    {
      "latitude": 51.48315,
      "longitude": -0.215983,
      "elevation": 5.550937
    },
    {
      "latitude": 51.48317,
      "longitude": -0.216027,
      "elevation": 5.6299367
    },
    {
      "latitude": 51.48319,
      "longitude": -0.216074,
      "elevation": 5.913642
    },
    {
      "latitude": 51.4832,
      "longitude": -0.216122,
      "elevation": 5.915169
    },
    {
      "latitude": 51.483208,
      "longitude": -0.21617,
      "elevation": 5.813977
    },
    {
      "latitude": 51.483215,
      "longitude": -0.216217,
      "elevation": 5.7229867
    },
    {
      "latitude": 51.48322,
      "longitude": -0.216263,
      "elevation": 5.6420374
    },
    {
      "latitude": 51.483227,
      "longitude": -0.216309,
      "elevation": 5.6437364
    },
    {
      "latitude": 51.483234,
      "longitude": -0.216356,
      "elevation": 5.5713277
    },
    {
      "latitude": 51.48324,
      "longitude": -0.216403,
      "elevation": 5.573315
    },
    {
      "latitude": 51.48324,
      "longitude": -0.216448,
      "elevation": 5.576356
    },
    {
      "latitude": 51.483246,
      "longitude": -0.216492,
      "elevation": 5.511009
    },
    {
      "latitude": 51.483253,
      "longitude": -0.216536,
      "elevation": 5.4513526
    },
    {
      "latitude": 51.48326,
      "longitude": -0.21658,
      "elevation": 5.3998795
    },
    {
      "latitude": 51.483265,
      "longitude": -0.216624,
      "elevation": 5.317275
    },
    {
      "latitude": 51.48327,
      "longitude": -0.216666,
      "elevation": 5.283355
    },
    {
      "latitude": 51.483273,
      "longitude": -0.216706,
      "elevation": 5.316739
    },
    {
      "latitude": 51.48328,
      "longitude": -0.216743,
      "elevation": 5.345118
    },
    {
      "latitude": 51.48329,
      "longitude": -0.216777,
      "elevation": 5.36678
    },
    {
      "latitude": 51.48331,
      "longitude": -0.21681,
      "elevation": 5.3835955
    },
    {
      "latitude": 51.483322,
      "longitude": -0.216842,
      "elevation": 5.4298983
    },
    {
      "latitude": 51.483337,
      "longitude": -0.216877,
      "elevation": 5.484617
    },
    {
      "latitude": 51.483345,
      "longitude": -0.216916,
      "elevation": 5.511312
    },
    {
      "latitude": 51.483345,
      "longitude": -0.216964,
      "elevation": 5.4992213
    },
    {
      "latitude": 51.483337,
      "longitude": -0.217021,
      "elevation": 5.5640264
    },
    {
      "latitude": 51.48334,
      "longitude": -0.217079,
      "elevation": 5.6451945
    },
    {
      "latitude": 51.483345,
      "longitude": -0.217132,
      "elevation": 5.781421
    },
    {
      "latitude": 51.48335,
      "longitude": -0.217182,
      "elevation": 5.903277
    },
    {
      "latitude": 51.48335,
      "longitude": -0.217228,
      "elevation": 5.9394197
    },
    {
      "latitude": 51.483356,
      "longitude": -0.217274,
      "elevation": 5.9698567
    },
    {
      "latitude": 51.483364,
      "longitude": -0.217318,
      "elevation": 6.0871305
    },
    {
      "latitude": 51.48338,
      "longitude": -0.217364,
      "elevation": 6.2957325
    },
    {
      "latitude": 51.483395,
      "longitude": -0.217411,
      "elevation": 6.4759493
    },
    {
      "latitude": 51.48341,
      "longitude": -0.21746,
      "elevation": 6.4839525
    },
    {
      "latitude": 51.48342,
      "longitude": -0.217511,
      "elevation": 6.697439
    },
    {
      "latitude": 51.483433,
      "longitude": -0.217564,
      "elevation": 6.345051
    },
    {
      "latitude": 51.48344,
      "longitude": -0.217618,
      "elevation": 6.2978153
    },
    {
      "latitude": 51.483448,
      "longitude": -0.217675,
      "elevation": 6.3886676
    },
    {
      "latitude": 51.48345,
      "longitude": -0.217732,
      "elevation": 6.565882
    },
    {
      "latitude": 51.48345,
      "longitude": -0.217791,
      "elevation": 6.874011
    },
    {
      "latitude": 51.483456,
      "longitude": -0.217849,
      "elevation": 7.120719
    },
    {
      "latitude": 51.48346,
      "longitude": -0.217908,
      "elevation": 7.536637
    },
    {
      "latitude": 51.483467,
      "longitude": -0.217965,
      "elevation": 7.8424773
    },
    {
      "latitude": 51.483475,
      "longitude": -0.218021,
      "elevation": 8.477816
    },
    {
      "latitude": 51.483482,
      "longitude": -0.218075,
      "elevation": 8.926312
    },
    {
      "latitude": 51.48349,
      "longitude": -0.218127,
      "elevation": 9.1934805
    },
    {
      "latitude": 51.483498,
      "longitude": -0.218175,
      "elevation": 9.771706
    },
    {
      "latitude": 51.4835,
      "longitude": -0.218221,
      "elevation": 10.007366
    },
    {
      "latitude": 51.483505,
      "longitude": -0.218266,
      "elevation": 10.135615
    },
    {
      "latitude": 51.483505,
      "longitude": -0.218315,
      "elevation": 10.137128
    },
    {
      "latitude": 51.483505,
      "longitude": -0.218368,
      "elevation": 10.131702
    },
    {
      "latitude": 51.48351,
      "longitude": -0.218423,
      "elevation": 10.148044
    },
    {
      "latitude": 51.483513,
      "longitude": -0.218474,
      "elevation": 10.082551
    },
    {
      "latitude": 51.48352,
      "longitude": -0.218521,
      "elevation": 10.0837145
    },
    {
      "latitude": 51.483524,
      "longitude": -0.218566,
      "elevation": 10.087341
    },
    {
      "latitude": 51.48353,
      "longitude": -0.218612,
      "elevation": 10.07317
    },
    {
      "latitude": 51.48353,
      "longitude": -0.218658,
      "elevation": 10.047173
    },
    {
      "latitude": 51.483536,
      "longitude": -0.218704,
      "elevation": 10.015369
    },
    {
      "latitude": 51.483543,
      "longitude": -0.218751,
      "elevation": 9.976014
    },
    {
      "latitude": 51.483547,
      "longitude": -0.218798,
      "elevation": 9.942759
    },
    {
      "latitude": 51.483547,
      "longitude": -0.218845,
      "elevation": 9.918913
    },
    {
      "latitude": 51.483547,
      "longitude": -0.218894,
      "elevation": 9.895904
    },
    {
      "latitude": 51.483547,
      "longitude": -0.218944,
      "elevation": 9.868323
    },
    {
      "latitude": 51.48355,
      "longitude": -0.218996,
      "elevation": 9.835325
    },
    {
      "latitude": 51.483555,
      "longitude": -0.219047,
      "elevation": 9.8003
    },
    {
      "latitude": 51.48356,
      "longitude": -0.219098,
      "elevation": 9.764113
    },
    {
      "latitude": 51.483566,
      "longitude": -0.219148,
      "elevation": 9.726985
    },
    {
      "latitude": 51.483578,
      "longitude": -0.219196,
      "elevation": 9.681716
    },
    {
      "latitude": 51.483585,
      "longitude": -0.219242,
      "elevation": 9.631926
    },
    {
      "latitude": 51.4836,
      "longitude": -0.219288,
      "elevation": 9.581376
    },
    {
      "latitude": 51.483612,
      "longitude": -0.219332,
      "elevation": 9.533986
    },
    {
      "latitude": 51.483624,
      "longitude": -0.219376,
      "elevation": 9.486934
    },
    {
      "latitude": 51.48364,
      "longitude": -0.219418,
      "elevation": 9.443344
    },
    {
      "latitude": 51.48365,
      "longitude": -0.219455,
      "elevation": 9.403761
    },
    {
      "latitude": 51.483673,
      "longitude": -0.219483,
      "elevation": 9.36823
    },
    {
      "latitude": 51.483704,
      "longitude": -0.219505,
      "elevation": 9.330478
    },
    {
      "latitude": 51.483738,
      "longitude": -0.219527,
      "elevation": 9.292643
    },
    {
      "latitude": 51.483765,
      "longitude": -0.219553,
      "elevation": 9.25982
    },
    {
      "latitude": 51.483784,
      "longitude": -0.219581,
      "elevation": 9.230861
    },
    {
      "latitude": 51.483803,
      "longitude": -0.219612,
      "elevation": 9.202595
    },
    {
      "latitude": 51.48383,
      "longitude": -0.219644,
      "elevation": 9.173528
    },
    {
      "latitude": 51.483852,
      "longitude": -0.219678,
      "elevation": 9.145343
    },
    {
      "latitude": 51.48388,
      "longitude": -0.219714,
      "elevation": 9.118789
    },
    {
      "latitude": 51.483906,
      "longitude": -0.219749,
      "elevation": 9.094845
    },
    {
      "latitude": 51.483932,
      "longitude": -0.219777,
      "elevation": 9.074968
    },
    {
      "latitude": 51.483967,
      "longitude": -0.219796,
      "elevation": 9.058614
    },
    {
      "latitude": 51.484005,
      "longitude": -0.219808,
      "elevation": 9.044668
    },
    {
      "latitude": 51.484047,
      "longitude": -0.219817,
      "elevation": 9.031238
    },
    {
      "latitude": 51.484093,
      "longitude": -0.219823,
      "elevation": 9.019258
    },
    {
      "latitude": 51.484127,
      "longitude": -0.219831,
      "elevation": 9.009872
    },
    {
      "latitude": 51.48415,
      "longitude": -0.21984,
      "elevation": 9.004043
    },
    {
      "latitude": 51.48417,
      "longitude": -0.219851,
      "elevation": 9.005568
    },
    {
      "latitude": 51.48419,
      "longitude": -0.219861,
      "elevation": 9.058359
    },
    {
      "latitude": 51.484215,
      "longitude": -0.21987,
      "elevation": 9.115957
    },
    {
      "latitude": 51.484238,
      "longitude": -0.219877,
      "elevation": 9.168747
    },
    {
      "latitude": 51.484257,
      "longitude": -0.219882,
      "elevation": 9.211945
    },
    {
      "latitude": 51.484276,
      "longitude": -0.219887,
      "elevation": 9.257558
    },
    {
      "latitude": 51.4843,
      "longitude": -0.219897,
      "elevation": 9.315162
    },
    {
      "latitude": 51.484325,
      "longitude": -0.219908,
      "elevation": 9.382375
    },
    {
      "latitude": 51.484352,
      "longitude": -0.219917,
      "elevation": 9.44953
    },
    {
      "latitude": 51.48438,
      "longitude": -0.219923,
      "elevation": 9.507006
    },
    {
      "latitude": 51.484398,
      "longitude": -0.219926,
      "elevation": 9.5574255
    },
    {
      "latitude": 51.484413,
      "longitude": -0.219932,
      "elevation": 9.595788
    },
    {
      "latitude": 51.48443,
      "longitude": -0.21994,
      "elevation": 9.62938
    },
    {
      "latitude": 51.484444,
      "longitude": -0.219949,
      "elevation": 9.660607
    },
    {
      "latitude": 51.48446,
      "longitude": -0.219958,
      "elevation": 9.698999
    },
    {
      "latitude": 51.484478,
      "longitude": -0.219965,
      "elevation": 9.747047
    },
    {
      "latitude": 51.484505,
      "longitude": -0.21997,
      "elevation": 9.809482
    },
    {
      "latitude": 51.484535,
      "longitude": -0.219974,
      "elevation": 9.883892
    },
    {
      "latitude": 51.48457,
      "longitude": -0.219979,
      "elevation": 9.970314
    },
    {
      "latitude": 51.484608,
      "longitude": -0.219985,
      "elevation": 10.061532
    },
    {
      "latitude": 51.48465,
      "longitude": -0.219995,
      "elevation": 10.155136
    },
    {
      "latitude": 51.484688,
      "longitude": -0.220008,
      "elevation": 10.242755
    },
    {
      "latitude": 51.48473,
      "longitude": -0.220025,
      "elevation": 10.326937
    },
    {
      "latitude": 51.48477,
      "longitude": -0.220042,
      "elevation": 10.418491
    },
    {
      "latitude": 51.48482,
      "longitude": -0.220056,
      "elevation": 10.5153
    },
    {
      "latitude": 51.48485,
      "longitude": -0.220059,
      "elevation": 10.584255
    },
    {
      "latitude": 51.484882,
      "longitude": -0.22007,
      "elevation": 10.644673
    },
    {
      "latitude": 51.484917,
      "longitude": -0.220086,
      "elevation": 10.703246
    },
    {
      "latitude": 51.484943,
      "longitude": -0.220098,
      "elevation": 10.755818
    },
    {
      "latitude": 51.48497,
      "longitude": -0.220103,
      "elevation": 10.8087845
    },
    {
      "latitude": 51.484993,
      "longitude": -0.220105,
      "elevation": 10.858191
    },
    {
      "latitude": 51.485016,
      "longitude": -0.220109,
      "elevation": 10.88834
    },
    {
      "latitude": 51.48504,
      "longitude": -0.220114,
      "elevation": 10.908729
    },
    {
      "latitude": 51.48506,
      "longitude": -0.220121,
      "elevation": 10.927927
    },
    {
      "latitude": 51.485085,
      "longitude": -0.22013,
      "elevation": 10.944726
    },
    {
      "latitude": 51.485107,
      "longitude": -0.220139,
      "elevation": 10.961525
    },
    {
      "latitude": 51.48513,
      "longitude": -0.220149,
      "elevation": 10.978334
    },
    {
      "latitude": 51.485157,
      "longitude": -0.220161,
      "elevation": 10.995133
    },
    {
      "latitude": 51.485184,
      "longitude": -0.220172,
      "elevation": 11.013132
    },
    {
      "latitude": 51.48521,
      "longitude": -0.220184,
      "elevation": 11.032341
    },
    {
      "latitude": 51.48524,
      "longitude": -0.220197,
      "elevation": 11.052763
    },
    {
      "latitude": 51.48527,
      "longitude": -0.220209,
      "elevation": 11.07678
    },
    {
      "latitude": 51.485306,
      "longitude": -0.220223,
      "elevation": 11.100785
    },
    {
      "latitude": 51.485344,
      "longitude": -0.220239,
      "elevation": 11.125992
    },
    {
      "latitude": 51.485382,
      "longitude": -0.220258,
      "elevation": 11.149992
    },
    {
      "latitude": 51.485416,
      "longitude": -0.220274,
      "elevation": 11.169197
    },
    {
      "latitude": 51.485435,
      "longitude": -0.220281,
      "elevation": 11.187169
    },
    {
      "latitude": 51.485466,
      "longitude": -0.220285,
      "elevation": 11.215917
    },
    {
      "latitude": 51.485497,
      "longitude": -0.220303,
      "elevation": 11.23384
    },
    {
      "latitude": 51.48553,
      "longitude": -0.220324,
      "elevation": 11.248238
    },
    {
      "latitude": 51.485565,
      "longitude": -0.220344,
      "elevation": 11.26386
    },
    {
      "latitude": 51.485596,
      "longitude": -0.220363,
      "elevation": 11.280657
    },
    {
      "latitude": 51.48563,
      "longitude": -0.220381,
      "elevation": 11.297455
    },
    {
      "latitude": 51.48566,
      "longitude": -0.2204,
      "elevation": 11.310627
    },
    {
      "latitude": 51.485687,
      "longitude": -0.22042,
      "elevation": 11.319026
    },
    {
      "latitude": 51.485706,
      "longitude": -0.220444,
      "elevation": 11.316627
    },
    {
      "latitude": 51.485725,
      "longitude": -0.220471,
      "elevation": 11.303475
    },
    {
      "latitude": 51.485737,
      "longitude": -0.2205,
      "elevation": 11.285496
    },
    {
      "latitude": 51.485752,
      "longitude": -0.220525,
      "elevation": 11.273512
    },
    {
      "latitude": 51.48577,
      "longitude": -0.220547,
      "elevation": 11.269925
    },
    {
      "latitude": 51.485794,
      "longitude": -0.220565,
      "elevation": 11.273537
    },
    {
      "latitude": 51.485813,
      "longitude": -0.220583,
      "elevation": 11.278345
    },
    {
      "latitude": 51.48584,
      "longitude": -0.220601,
      "elevation": 11.309735
    },
    {
      "latitude": 51.485867,
      "longitude": -0.220617,
      "elevation": 11.4474945
    },
    {
      "latitude": 51.485905,
      "longitude": -0.220631,
      "elevation": 11.623008
    },
    {
      "latitude": 51.485943,
      "longitude": -0.220646,
      "elevation": 11.815499
    },
    {
      "latitude": 51.48599,
      "longitude": -0.220662,
      "elevation": 12.018674
    },
    {
      "latitude": 51.48603,
      "longitude": -0.220678,
      "elevation": 12.223123
    },
    {
      "latitude": 51.486076,
      "longitude": -0.220694,
      "elevation": 12.42365
    },
    {
      "latitude": 51.48612,
      "longitude": -0.22071,
      "elevation": 12.6200285
    },
    {
      "latitude": 51.486164,
      "longitude": -0.220723,
      "elevation": 12.818988
    },
    {
      "latitude": 51.486206,
      "longitude": -0.220734,
      "elevation": 13.008841
    },
    {
      "latitude": 51.486244,
      "longitude": -0.220744,
      "elevation": 13.188414
    },
    {
      "latitude": 51.486282,
      "longitude": -0.220754,
      "elevation": 13.360854
    },
    {
      "latitude": 51.48632,
      "longitude": -0.220766,
      "elevation": 13.510804
    },
    {
      "latitude": 51.486355,
      "longitude": -0.22078,
      "elevation": 13.642952
    },
    {
      "latitude": 51.486385,
      "longitude": -0.220798,
      "elevation": 13.751191
    },
    {
      "latitude": 51.48642,
      "longitude": -0.220818,
      "elevation": 13.859926
    },
    {
      "latitude": 51.486458,
      "longitude": -0.220839,
      "elevation": 13.987288
    },
    {
      "latitude": 51.486504,
      "longitude": -0.22086,
      "elevation": 14.14631
    },
    {
      "latitude": 51.486553,
      "longitude": -0.220878,
      "elevation": 14.31076
    },
    {
      "latitude": 51.48659,
      "longitude": -0.220893,
      "elevation": 14.445908
    },
    {
      "latitude": 51.486626,
      "longitude": -0.220906,
      "elevation": 14.5469
    },
    {
      "latitude": 51.486652,
      "longitude": -0.220921,
      "elevation": 14.619509
    },
    {
      "latitude": 51.486687,
      "longitude": -0.220939,
      "elevation": 14.51795
    },
    {
      "latitude": 51.48672,
      "longitude": -0.220958,
      "elevation": 14.254455
    },
    {
      "latitude": 51.486755,
      "longitude": -0.220973,
      "elevation": 14.015098
    },
    {
      "latitude": 51.48679,
      "longitude": -0.220987,
      "elevation": 13.788672
    },
    {
      "latitude": 51.48682,
      "longitude": -0.221001,
      "elevation": 13.582186
    },
    {
      "latitude": 51.48685,
      "longitude": -0.221019,
      "elevation": 13.378648
    },
    {
      "latitude": 51.486874,
      "longitude": -0.221043,
      "elevation": 13.1839
    },
    {
      "latitude": 51.486897,
      "longitude": -0.221068,
      "elevation": 13.006702
    },
    {
      "latitude": 51.486916,
      "longitude": -0.221095,
      "elevation": 12.843845
    },
    {
      "latitude": 51.48693,
      "longitude": -0.221127,
      "elevation": 12.68741
    },
    {
      "latitude": 51.48695,
      "longitude": -0.221158,
      "elevation": 12.533187
    },
    {
      "latitude": 51.486965,
      "longitude": -0.221197,
      "elevation": 12.369492
    },
    {
      "latitude": 51.48698,
      "longitude": -0.221242,
      "elevation": 12.197734
    },
    {
      "latitude": 51.487,
      "longitude": -0.22128,
      "elevation": 12.031128
    },
    {
      "latitude": 51.487022,
      "longitude": -0.221307,
      "elevation": 11.881989
    },
    {
      "latitude": 51.48705,
      "longitude": -0.221328,
      "elevation": 11.746093
    },
    {
      "latitude": 51.48707,
      "longitude": -0.221353,
      "elevation": 11.614666
    },
    {
      "latitude": 51.48709,
      "longitude": -0.221381,
      "elevation": 11.486339
    },
    {
      "latitude": 51.48711,
      "longitude": -0.221414,
      "elevation": 11.35471
    },
    {
      "latitude": 51.487137,
      "longitude": -0.221449,
      "elevation": 11.219216
    },
    {
      "latitude": 51.487164,
      "longitude": -0.221487,
      "elevation": 11.073542
    },
    {
      "latitude": 51.487194,
      "longitude": -0.221525,
      "elevation": 10.924684
    },
    {
      "latitude": 51.487225,
      "longitude": -0.221563,
      "elevation": 10.786004
    },
    {
      "latitude": 51.48725,
      "longitude": -0.221598,
      "elevation": 10.67416
    },
    {
      "latitude": 51.48727,
      "longitude": -0.221629,
      "elevation": 10.591988
    },
    {
      "latitude": 51.48728,
      "longitude": -0.221658,
      "elevation": 10.528924
    },
    {
      "latitude": 51.487297,
      "longitude": -0.22169,
      "elevation": 10.459199
    },
    {
      "latitude": 51.48731,
      "longitude": -0.221723,
      "elevation": 10.388399
    },
    {
      "latitude": 51.487324,
      "longitude": -0.221759,
      "elevation": 10.309199
    },
    {
      "latitude": 51.48734,
      "longitude": -0.221795,
      "elevation": 10.23
    },
    {
      "latitude": 51.48736,
      "longitude": -0.221832,
      "elevation": 10.1448
    },
    {
      "latitude": 51.487373,
      "longitude": -0.221869,
      "elevation": 10.0571995
    },
    {
      "latitude": 51.487396,
      "longitude": -0.221906,
      "elevation": 9.9648
    },
    {
      "latitude": 51.487415,
      "longitude": -0.221942,
      "elevation": 9.8736
    },
    {
      "latitude": 51.48744,
      "longitude": -0.221978,
      "elevation": 9.777599
    },
    {
      "latitude": 51.48746,
      "longitude": -0.222013,
      "elevation": 9.680398
    },
    {
      "latitude": 51.487484,
      "longitude": -0.222047,
      "elevation": 9.579597
    },
    {
      "latitude": 51.48751,
      "longitude": -0.22208,
      "elevation": 9.527997
    },
    {
      "latitude": 51.487537,
      "longitude": -0.222112,
      "elevation": 9.554398
    },
    {
      "latitude": 51.487564,
      "longitude": -0.222144,
      "elevation": 9.580797
    },
    {
      "latitude": 51.487595,
      "longitude": -0.222176,
      "elevation": 9.611998
    },
    {
      "latitude": 51.48762,
      "longitude": -0.222207,
      "elevation": 9.646797
    },
    {
      "latitude": 51.48765,
      "longitude": -0.222237,
      "elevation": 9.6827965
    },
    {
      "latitude": 51.487682,
      "longitude": -0.222264,
      "elevation": 9.724791
    },
    {
      "latitude": 51.487713,
      "longitude": -0.222288,
      "elevation": 9.765588
    },
    {
      "latitude": 51.48774,
      "longitude": -0.222306,
      "elevation": 9.81119
    },
    {
      "latitude": 51.487766,
      "longitude": -0.222319,
      "elevation": 9.860392
    },
    {
      "latitude": 51.4878,
      "longitude": -0.222333,
      "elevation": 9.917995
    },
    {
      "latitude": 51.48784,
      "longitude": -0.222353,
      "elevation": 9.989996
    },
    {
      "latitude": 51.48789,
      "longitude": -0.222381,
      "elevation": 10.071598
    },
    {
      "latitude": 51.487926,
      "longitude": -0.222404,
      "elevation": 10.135199
    },
    {
      "latitude": 51.48796,
      "longitude": -0.222427,
      "elevation": 10.191599
    },
    {
      "latitude": 51.487995,
      "longitude": -0.222449,
      "elevation": 10.251599
    },
    {
      "latitude": 51.488033,
      "longitude": -0.222469,
      "elevation": 10.316399
    },
    {
      "latitude": 51.488075,
      "longitude": -0.222486,
      "elevation": 10.394399
    },
    {
      "latitude": 51.488113,
      "longitude": -0.222503,
      "elevation": 10.468551
    },
    {
      "latitude": 51.488148,
      "longitude": -0.222521,
      "elevation": 10.530864
    },
    {
      "latitude": 51.48817,
      "longitude": -0.222541,
      "elevation": 10.573124
    },
    {
      "latitude": 51.488194,
      "longitude": -0.22256,
      "elevation": 10.603324
    },
    {
      "latitude": 51.488213,
      "longitude": -0.222577,
      "elevation": 10.632141
    },
    {
      "latitude": 51.48823,
      "longitude": -0.222591,
      "elevation": 10.660877
    },
    {
      "latitude": 51.48825,
      "longitude": -0.2226,
      "elevation": 10.694255
    },
    {
      "latitude": 51.488274,
      "longitude": -0.222605,
      "elevation": 10.738321
    },
    {
      "latitude": 51.488297,
      "longitude": -0.222607,
      "elevation": 10.787751
    },
    {
      "latitude": 51.48832,
      "longitude": -0.22261,
      "elevation": 10.840353
    },
    {
      "latitude": 51.488346,
      "longitude": -0.222614,
      "elevation": 10.865607
    },
    {
      "latitude": 51.488377,
      "longitude": -0.22262,
      "elevation": 10.863545
    },
    {
      "latitude": 51.488403,
      "longitude": -0.222628,
      "elevation": 10.85961
    },
    {
      "latitude": 51.48843,
      "longitude": -0.222636,
      "elevation": 10.8559265
    },
    {
      "latitude": 51.488453,
      "longitude": -0.222643,
      "elevation": 10.853248
    },
    {
      "latitude": 51.48848,
      "longitude": -0.222651,
      "elevation": 10.850473
    },
    {
      "latitude": 51.48851,
      "longitude": -0.22266,
      "elevation": 10.848934
    },
    {
      "latitude": 51.488544,
      "longitude": -0.222672,
      "elevation": 10.846025
    },
    {
      "latitude": 51.48857,
      "longitude": -0.222688,
      "elevation": 10.838741
    },
    {
      "latitude": 51.488586,
      "longitude": -0.222709,
      "elevation": 10.825543
    },
    {
      "latitude": 51.4886,
      "longitude": -0.222722,
      "elevation": 10.819167
    },
    {
      "latitude": 51.488617,
      "longitude": -0.222737,
      "elevation": 10.812751
    },
    {
      "latitude": 51.48864,
      "longitude": -0.222752,
      "elevation": 10.808157
    },
    {
      "latitude": 51.48866,
      "longitude": -0.222768,
      "elevation": 10.803695
    },
    {
      "latitude": 51.488678,
      "longitude": -0.222783,
      "elevation": 10.80045
    },
    {
      "latitude": 51.488693,
      "longitude": -0.222796,
      "elevation": 10.798957
    },
    {
      "latitude": 51.48871,
      "longitude": -0.222805,
      "elevation": 10.798992
    },
    {
      "latitude": 51.488724,
      "longitude": -0.222811,
      "elevation": 10.801308
    },
    {
      "latitude": 51.48874,
      "longitude": -0.222818,
      "elevation": 10.803704
    },
    {
      "latitude": 51.488758,
      "longitude": -0.222824,
      "elevation": 10.809332
    },
    {
      "latitude": 51.488785,
      "longitude": -0.222834,
      "elevation": 10.815952
    },
    {
      "latitude": 51.488815,
      "longitude": -0.222847,
      "elevation": 10.825278
    },
    {
      "latitude": 51.488857,
      "longitude": -0.222863,
      "elevation": 10.83813
    },
    {
      "latitude": 51.4889,
      "longitude": -0.222882,
      "elevation": 10.852211
    },
    {
      "latitude": 51.488937,
      "longitude": -0.2229,
      "elevation": 10.868288
    },
    {
      "latitude": 51.488976,
      "longitude": -0.222916,
      "elevation": 10.885184
    },
    {
      "latitude": 51.48901,
      "longitude": -0.222927,
      "elevation": 10.903053
    },
    {
      "latitude": 51.489044,
      "longitude": -0.222944,
      "elevation": 10.922849
    },
    {
      "latitude": 51.489086,
      "longitude": -0.222966,
      "elevation": 10.945196
    },
    {
      "latitude": 51.48912,
      "longitude": -0.222974,
      "elevation": 10.968825
    },
    {
      "latitude": 51.489155,
      "longitude": -0.222978,
      "elevation": 10.990567
    },
    {
      "latitude": 51.48918,
      "longitude": -0.222991,
      "elevation": 11.007533
    },
    {
      "latitude": 51.48921,
      "longitude": -0.223006,
      "elevation": 11.020395
    },
    {
      "latitude": 51.48924,
      "longitude": -0.223017,
      "elevation": 11.032012
    },
    {
      "latitude": 51.48926,
      "longitude": -0.223027,
      "elevation": 11.041595
    },
    {
      "latitude": 51.48928,
      "longitude": -0.223039,
      "elevation": 11.048449
    },
    {
      "latitude": 51.489296,
      "longitude": -0.22305,
      "elevation": 11.05317
    },
    {
      "latitude": 51.48931,
      "longitude": -0.223062,
      "elevation": 11.056
    },
    {
      "latitude": 51.48932,
      "longitude": -0.223074,
      "elevation": 11.057259
    },
    {
      "latitude": 51.48933,
      "longitude": -0.223087,
      "elevation": 11.057937
    },
    {
      "latitude": 51.489338,
      "longitude": -0.223102,
      "elevation": 11.057407
    },
    {
      "latitude": 51.48935,
      "longitude": -0.223118,
      "elevation": 11.056848
    },
    {
      "latitude": 51.48937,
      "longitude": -0.22314,
      "elevation": 11.055773
    },
    {
      "latitude": 51.489395,
      "longitude": -0.223171,
      "elevation": 11.053843
    },
    {
      "latitude": 51.489437,
      "longitude": -0.223206,
      "elevation": 11.049568
    },
    {
      "latitude": 51.489468,
      "longitude": -0.223226,
      "elevation": 11.046419
    },
    {
      "latitude": 51.489513,
      "longitude": -0.223247,
      "elevation": 11.043304
    },
    {
      "latitude": 51.48958,
      "longitude": -0.223274,
      "elevation": 11.03523
    },
    {
      "latitude": 51.48964,
      "longitude": -0.223301,
      "elevation": 11.022085
    },
    {
      "latitude": 51.48969,
      "longitude": -0.223326,
      "elevation": 11.005506
    },
    {
      "latitude": 51.489727,
      "longitude": -0.223348,
      "elevation": 11.006026
    },
    {
      "latitude": 51.48976,
      "longitude": -0.223368,
      "elevation": 11.0178385
    },
    {
      "latitude": 51.4898,
      "longitude": -0.223387,
      "elevation": 11.033179
    },
    {
      "latitude": 51.489834,
      "longitude": -0.223404,
      "elevation": 11.050812
    },
    {
      "latitude": 51.48987,
      "longitude": -0.223421,
      "elevation": 11.071873
    },
    {
      "latitude": 51.489902,
      "longitude": -0.223436,
      "elevation": 11.094223
    },
    {
      "latitude": 51.489937,
      "longitude": -0.223452,
      "elevation": 11.120869
    },
    {
      "latitude": 51.48997,
      "longitude": -0.223467,
      "elevation": 11.149621
    },
    {
      "latitude": 51.490005,
      "longitude": -0.223481,
      "elevation": 11.231535
    },
    {
      "latitude": 51.490044,
      "longitude": -0.223494,
      "elevation": 11.516449
    },
    {
      "latitude": 51.490078,
      "longitude": -0.223507,
      "elevation": 11.797432
    },
    {
      "latitude": 51.490112,
      "longitude": -0.223518,
      "elevation": 12.065449
    },
    {
      "latitude": 51.490147,
      "longitude": -0.223528,
      "elevation": 12.33722
    },
    {
      "latitude": 51.49018,
      "longitude": -0.22354,
      "elevation": 12.599296
    },
    {
      "latitude": 51.490215,
      "longitude": -0.223552,
      "elevation": 12.857847
    },
    {
      "latitude": 51.49025,
      "longitude": -0.223568,
      "elevation": 13.113387
    },
    {
      "latitude": 51.49028,
      "longitude": -0.223585,
      "elevation": 13.364209
    },
    {
      "latitude": 51.490314,
      "longitude": -0.223603,
      "elevation": 13.595402
    },
    {
      "latitude": 51.49034,
      "longitude": -0.223615,
      "elevation": 13.801835
    },
    {
      "latitude": 51.490368,
      "longitude": -0.223619,
      "elevation": 13.9870205
    },
    {
      "latitude": 51.490395,
      "longitude": -0.223617,
      "elevation": 14.174341
    },
    {
      "latitude": 51.49043,
      "longitude": -0.223612,
      "elevation": 14.414342
    },
    {
      "latitude": 51.490467,
      "longitude": -0.223608,
      "elevation": 14.691041
    },
    {
      "latitude": 51.490505,
      "longitude": -0.223606,
      "elevation": 14.974295
    },
    {
      "latitude": 51.490543,
      "longitude": -0.223611,
      "elevation": 15.235807
    },
    {
      "latitude": 51.490578,
      "longitude": -0.223619,
      "elevation": 15.477428
    },
    {
      "latitude": 51.49061,
      "longitude": -0.223626,
      "elevation": 15.696695
    },
    {
      "latitude": 51.49064,
      "longitude": -0.223633,
      "elevation": 15.906916
    },
    {
      "latitude": 51.49067,
      "longitude": -0.22364,
      "elevation": 16.11518
    },
    {
      "latitude": 51.490704,
      "longitude": -0.223646,
      "elevation": 16.34459
    },
    {
      "latitude": 51.49074,
      "longitude": -0.223654,
      "elevation": 16.596283
    },
    {
      "latitude": 51.490788,
      "longitude": -0.223661,
      "elevation": 16.882683
    },
    {
      "latitude": 51.490833,
      "longitude": -0.22367,
      "elevation": 17.189371
    },
    {
      "latitude": 51.490883,
      "longitude": -0.223678,
      "elevation": 17.559145
    },
    {
      "latitude": 51.49093,
      "longitude": -0.223686,
      "elevation": 17.909885
    },
    {
      "latitude": 51.49097,
      "longitude": -0.223692,
      "elevation": 18.23933
    },
    {
      "latitude": 51.49101,
      "longitude": -0.223697,
      "elevation": 18.529533
    },
    {
      "latitude": 51.49104,
      "longitude": -0.223703,
      "elevation": 18.758736
    },
    {
      "latitude": 51.491066,
      "longitude": -0.22371,
      "elevation": 18.943012
    },
    {
      "latitude": 51.491085,
      "longitude": -0.223721,
      "elevation": 19.06411
    },
    {
      "latitude": 51.4911,
      "longitude": -0.223737,
      "elevation": 19.126163
    },
    {
      "latitude": 51.49111,
      "longitude": -0.223759,
      "elevation": 19.1334
    },
    {
      "latitude": 51.491123,
      "longitude": -0.223782,
      "elevation": 19.134892
    },
    {
      "latitude": 51.49114,
      "longitude": -0.2238,
      "elevation": 19.19059
    },
    {
      "latitude": 51.491158,
      "longitude": -0.223814,
      "elevation": 19.296558
    },
    {
      "latitude": 51.491177,
      "longitude": -0.223839,
      "elevation": 19.320032
    },
    {
      "latitude": 51.49119,
      "longitude": -0.223857,
      "elevation": 19.360329
    },
    {
      "latitude": 51.491203,
      "longitude": -0.223866,
      "elevation": 19.419744
    },
    {
      "latitude": 51.49121,
      "longitude": -0.223874,
      "elevation": 19.445885
    },
    {
      "latitude": 51.49121,
      "longitude": -0.223888,
      "elevation": 19.38944
    },
    {
      "latitude": 51.491417,
      "longitude": -0.224221,
      "elevation": 19.244137
    },
    {
      "latitude": 51.491405,
      "longitude": -0.224244,
      "elevation": 19.070118
    },
    {
      "latitude": 51.491394,
      "longitude": -0.224277,
      "elevation": 18.837202
    },
    {
      "latitude": 51.491386,
      "longitude": -0.224317,
      "elevation": 18.544273
    },
    {
      "latitude": 51.49138,
      "longitude": -0.224363,
      "elevation": 18.265533
    },
    {
      "latitude": 51.49138,
      "longitude": -0.224413,
      "elevation": 18.052807
    },
    {
      "latitude": 51.491383,
      "longitude": -0.224466,
      "elevation": 17.847273
    },
    {
      "latitude": 51.49139,
      "longitude": -0.224519,
      "elevation": 17.65647
    },
    {
      "latitude": 51.4914,
      "longitude": -0.224571,
      "elevation": 17.487137
    },
    {
      "latitude": 51.491413,
      "longitude": -0.224619,
      "elevation": 17.350868
    },
    {
      "latitude": 51.491425,
      "longitude": -0.224663,
      "elevation": 17.199497
    },
    {
      "latitude": 51.49144,
      "longitude": -0.224703,
      "elevation": 17.052837
    },
    {
      "latitude": 51.491463,
      "longitude": -0.224736,
      "elevation": 16.939775
    },
    {
      "latitude": 51.49149,
      "longitude": -0.22476,
      "elevation": 16.846378
    },
    {
      "latitude": 51.49152,
      "longitude": -0.224774,
      "elevation": 16.92582
    },
    {
      "latitude": 51.49155,
      "longitude": -0.224784,
      "elevation": 16.98123
    },
    {
      "latitude": 51.491585,
      "longitude": -0.224793,
      "elevation": 17.022198
    },
    {
      "latitude": 51.491615,
      "longitude": -0.224801,
      "elevation": 17.063108
    },
    {
      "latitude": 51.491646,
      "longitude": -0.224809,
      "elevation": 17.088438
    },
    {
      "latitude": 51.49168,
      "longitude": -0.224814,
      "elevation": 17.038881
    },
    {
      "latitude": 51.49171,
      "longitude": -0.224814,
      "elevation": 16.879538
    },
    {
      "latitude": 51.49174,
      "longitude": -0.224811,
      "elevation": 16.737444
    },
    {
      "latitude": 51.491776,
      "longitude": -0.224805,
      "elevation": 16.61278
    },
    {
      "latitude": 51.491806,
      "longitude": -0.224798,
      "elevation": 16.489986
    },
    {
      "latitude": 51.491837,
      "longitude": -0.224793,
      "elevation": 16.350458
    },
    {
      "latitude": 51.491863,
      "longitude": -0.224791,
      "elevation": 16.220755
    },
    {
      "latitude": 51.49189,
      "longitude": -0.224795,
      "elevation": 16.072357
    },
    {
      "latitude": 51.491917,
      "longitude": -0.224804,
      "elevation": 15.907901
    },
    {
      "latitude": 51.491943,
      "longitude": -0.224815,
      "elevation": 15.736175
    },
    {
      "latitude": 51.491974,
      "longitude": -0.224827,
      "elevation": 15.554838
    },
    {
      "latitude": 51.492004,
      "longitude": -0.224838,
      "elevation": 15.362554
    },
    {
      "latitude": 51.49204,
      "longitude": -0.224847,
      "elevation": 15.171331
    },
    {
      "latitude": 51.492073,
      "longitude": -0.224854,
      "elevation": 14.981112
    },
    {
      "latitude": 51.492107,
      "longitude": -0.224857,
      "elevation": 14.823947
    },
    {
      "latitude": 51.492134,
      "longitude": -0.224857,
      "elevation": 14.694381
    },
    {
      "latitude": 51.49216,
      "longitude": -0.224859,
      "elevation": 14.559913
    },
    {
      "latitude": 51.492195,
      "longitude": -0.224868,
      "elevation": 14.392414
    },
    {
      "latitude": 51.49223,
      "longitude": -0.224879,
      "elevation": 14.211692
    },
    {
      "latitude": 51.49226,
      "longitude": -0.224889,
      "elevation": 14.060205
    },
    {
      "latitude": 51.492283,
      "longitude": -0.224895,
      "elevation": 13.953963
    },
    {
      "latitude": 51.4923,
      "longitude": -0.224897,
      "elevation": 13.877003
    },
    {
      "latitude": 51.492313,
      "longitude": -0.2249,
      "elevation": 13.80352
    },
    {
      "latitude": 51.492332,
      "longitude": -0.224903,
      "elevation": 13.72643
    },
    {
      "latitude": 51.49235,
      "longitude": -0.224906,
      "elevation": 13.637243
    },
    {
      "latitude": 51.492374,
      "longitude": -0.22491,
      "elevation": 13.539496
    },
    {
      "latitude": 51.492397,
      "longitude": -0.224913,
      "elevation": 13.431093
    },
    {
      "latitude": 51.492424,
      "longitude": -0.224915,
      "elevation": 13.3159
    },
    {
      "latitude": 51.492455,
      "longitude": -0.224914,
      "elevation": 13.194083
    },
    {
      "latitude": 51.492485,
      "longitude": -0.224913,
      "elevation": 13.05917
    },
    {
      "latitude": 51.49252,
      "longitude": -0.22491,
      "elevation": 12.976
    },
    {
      "latitude": 51.492558,
      "longitude": -0.224904,
      "elevation": 12.9328
    },
    {
      "latitude": 51.49259,
      "longitude": -0.224893,
      "elevation": 12.8884
    },
    {
      "latitude": 51.49263,
      "longitude": -0.224881,
      "elevation": 12.844
    },
    {
      "latitude": 51.49267,
      "longitude": -0.224872,
      "elevation": 12.7984
    },
    {
      "latitude": 51.492706,
      "longitude": -0.224871,
      "elevation": 12.7528
    },
    {
      "latitude": 51.492744,
      "longitude": -0.224876,
      "elevation": 12.7084
    },
    {
      "latitude": 51.492775,
      "longitude": -0.224886,
      "elevation": 12.67
    },
    {
      "latitude": 51.492805,
      "longitude": -0.224892,
      "elevation": 12.6316
    },
    {
      "latitude": 51.492844,
      "longitude": -0.224889,
      "elevation": 12.5896
    },
    {
      "latitude": 51.492878,
      "longitude": -0.224875,
      "elevation": 12.5476
    },
    {
      "latitude": 51.492912,
      "longitude": -0.22485,
      "elevation": 12.5056
    },
    {
      "latitude": 51.492947,
      "longitude": -0.224818,
      "elevation": 12.466
    },
    {
      "latitude": 51.492973,
      "longitude": -0.224783,
      "elevation": 12.43
    },
    {
      "latitude": 51.493,
      "longitude": -0.224746,
      "elevation": 12.4
    },
    {
      "latitude": 51.49302,
      "longitude": -0.224711,
      "elevation": 12.3772
    },
    {
      "latitude": 51.49303,
      "longitude": -0.224681,
      "elevation": 12.3628
    },
    {
      "latitude": 51.493034,
      "longitude": -0.224657,
      "elevation": 12.358
    },
    {
      "latitude": 51.493034,
      "longitude": -0.224637,
      "elevation": 12.3568
    },
    {
      "latitude": 51.49304,
      "longitude": -0.224616,
      "elevation": 12.3556
    },
    {
      "latitude": 51.493042,
      "longitude": -0.22459,
      "elevation": 12.3484
    },
    {
      "latitude": 51.493057,
      "longitude": -0.224554,
      "elevation": 12.329199
    },
    {
      "latitude": 51.493084,
      "longitude": -0.224507,
      "elevation": 12.297997
    },
    {
      "latitude": 51.493107,
      "longitude": -0.224461,
      "elevation": 12.270392
    },
    {
      "latitude": 51.49312,
      "longitude": -0.224422,
      "elevation": 12.257186
    },
    {
      "latitude": 51.493137,
      "longitude": -0.224375,
      "elevation": 12.236778
    },
    {
      "latitude": 51.49316,
      "longitude": -0.224326,
      "elevation": 12.205566
    },
    {
      "latitude": 51.49319,
      "longitude": -0.224284,
      "elevation": 12.170747
    },
    {
      "latitude": 51.493217,
      "longitude": -0.224252,
      "elevation": 12.139548
    },
    {
      "latitude": 51.493233,
      "longitude": -0.224229,
      "elevation": 12.119141
    },
    {
      "latitude": 51.49324,
      "longitude": -0.224216,
      "elevation": 12.111963
    },
    {
      "latitude": 51.493244,
      "longitude": -0.224211,
      "elevation": 12.108377
    },
    {
      "latitude": 51.49325,
      "longitude": -0.224208,
      "elevation": 12.0999775
    },
    {
      "latitude": 51.493263,
      "longitude": -0.224206,
      "elevation": 12.0831785
    },
    {
      "latitude": 51.49328,
      "longitude": -0.224205,
      "elevation": 12.063982
    },
    {
      "latitude": 51.493298,
      "longitude": -0.224204,
      "elevation": 12.043585
    },
    {
      "latitude": 51.493313,
      "longitude": -0.224202,
      "elevation": 12.025589
    },
    {
      "latitude": 51.493324,
      "longitude": -0.224198,
      "elevation": 12.012391
    },
    {
      "latitude": 51.493332,
      "longitude": -0.224193,
      "elevation": 12.001594
    },
    {
      "latitude": 51.49334,
      "longitude": -0.224186,
      "elevation": 12.011064
    },
    {
      "latitude": 51.493343,
      "longitude": -0.224178,
      "elevation": 12.020653
    },
    {
      "latitude": 51.493347,
      "longitude": -0.22417,
      "elevation": 12.0303335
    },
    {
      "latitude": 51.493347,
      "longitude": -0.224162,
      "elevation": 12.043197
    },
    {
      "latitude": 51.493355,
      "longitude": -0.224154,
      "elevation": 12.062398
    },
    {
      "latitude": 51.49336,
      "longitude": -0.224146,
      "elevation": 12.086398
    },
    {
      "latitude": 51.493366,
      "longitude": -0.224139,
      "elevation": 12.111599
    },
    {
      "latitude": 51.493378,
      "longitude": -0.224132,
      "elevation": 12.143999
    },
    {
      "latitude": 51.49339,
      "longitude": -0.224126,
      "elevation": 12.179999
    },
    {
      "latitude": 51.4934,
      "longitude": -0.22412,
      "elevation": 12.216
    },
    {
      "latitude": 51.49341,
      "longitude": -0.224117,
      "elevation": 12.2388
    },
    {
      "latitude": 51.493412,
      "longitude": -0.224114,
      "elevation": 12.2496
    },
    {
      "latitude": 51.493416,
      "longitude": -0.224109,
      "elevation": 12.27
    },
    {
      "latitude": 51.493435,
      "longitude": -0.2241,
      "elevation": 12.3216
    },
    {
      "latitude": 51.49346,
      "longitude": -0.224086,
      "elevation": 12.4032
    },
    {
      "latitude": 51.493492,
      "longitude": -0.224071,
      "elevation": 12.498
    },
    {
      "latitude": 51.493526,
      "longitude": -0.224055,
      "elevation": 12.5964
    },
    {
      "latitude": 51.493553,
      "longitude": -0.22404,
      "elevation": 12.6816
    },
    {
      "latitude": 51.493576,
      "longitude": -0.224029,
      "elevation": 12.7476
    },
    {
      "latitude": 51.49359,
      "longitude": -0.22402,
      "elevation": 12.7992
    },
    {
      "latitude": 51.493607,
      "longitude": -0.224015,
      "elevation": 12.8388
    },
    {
      "latitude": 51.493626,
      "longitude": -0.224014,
      "elevation": 12.8808
    },
    {
      "latitude": 51.493645,
      "longitude": -0.224013,
      "elevation": 12.9348
    },
    {
      "latitude": 51.49368,
      "longitude": -0.224012,
      "elevation": 13.0128
    },
    {
      "latitude": 51.493717,
      "longitude": -0.224011,
      "elevation": 13.11
    },
    {
      "latitude": 51.493767,
      "longitude": -0.224012,
      "elevation": 13.2216
    },
    {
      "latitude": 51.493816,
      "longitude": -0.224017,
      "elevation": 13.3404
    },
    {
      "latitude": 51.493862,
      "longitude": -0.224021,
      "elevation": 13.446
    },
    {
      "latitude": 51.493896,
      "longitude": -0.224022,
      "elevation": 13.5288
    },
    {
      "latitude": 51.49393,
      "longitude": -0.224019,
      "elevation": 13.6092
    },
    {
      "latitude": 51.49397,
      "longitude": -0.224009,
      "elevation": 13.7148
    },
    {
      "latitude": 51.494022,
      "longitude": -0.223995,
      "elevation": 13.8612
    },
    {
      "latitude": 51.494083,
      "longitude": -0.223981,
      "elevation": 14.022
    },
    {
      "latitude": 51.494137,
      "longitude": -0.223972,
      "elevation": 14.1648
    },
    {
      "latitude": 51.49419,
      "longitude": -0.223967,
      "elevation": 14.166737
    },
    {
      "latitude": 51.494244,
      "longitude": -0.223964,
      "elevation": 13.996444
    },
    {
      "latitude": 51.4943,
      "longitude": -0.223961,
      "elevation": 13.811625
    },
    {
      "latitude": 51.494354,
      "longitude": -0.223955,
      "elevation": 13.629788
    },
    {
      "latitude": 51.494404,
      "longitude": -0.223944,
      "elevation": 13.465942
    },
    {
      "latitude": 51.49445,
      "longitude": -0.223932,
      "elevation": 13.314368
    },
    {
      "latitude": 51.49449,
      "longitude": -0.223926,
      "elevation": 13.169758
    },
    {
      "latitude": 51.494534,
      "longitude": -0.22393,
      "elevation": 13.033683
    },
    {
      "latitude": 51.494576,
      "longitude": -0.223933,
      "elevation": 12.891622
    },
    {
      "latitude": 51.49462,
      "longitude": -0.223928,
      "elevation": 12.7241335
    },
    {
      "latitude": 51.494675,
      "longitude": -0.223917,
      "elevation": 12.534811
    },
    {
      "latitude": 51.494728,
      "longitude": -0.223907,
      "elevation": 12.338241
    },
    {
      "latitude": 51.494778,
      "longitude": -0.223904,
      "elevation": 12.154307
    },
    {
      "latitude": 51.494827,
      "longitude": -0.223905,
      "elevation": 11.98629
    },
    {
      "latitude": 51.49487,
      "longitude": -0.223907,
      "elevation": 11.838151
    },
    {
      "latitude": 51.494907,
      "longitude": -0.223909,
      "elevation": 11.708321
    },
    {
      "latitude": 51.49494,
      "longitude": -0.223913,
      "elevation": 11.593959
    },
    {
      "latitude": 51.494976,
      "longitude": -0.223916,
      "elevation": 11.481989
    },
    {
      "latitude": 51.495007,
      "longitude": -0.22392,
      "elevation": 11.406925
    },
    {
      "latitude": 51.49504,
      "longitude": -0.223924,
      "elevation": 11.411532
    },
    {
      "latitude": 51.49507,
      "longitude": -0.223927,
      "elevation": 11.412782
    },
    {
      "latitude": 51.495106,
      "longitude": -0.223931,
      "elevation": 11.415116
    },
    {
      "latitude": 51.49514,
      "longitude": -0.223934,
      "elevation": 11.414317
    },
    {
      "latitude": 51.495174,
      "longitude": -0.223936,
      "elevation": 11.411191
    },
    {
      "latitude": 51.495205,
      "longitude": -0.223939,
      "elevation": 11.409005
    },
    {
      "latitude": 51.49524,
      "longitude": -0.22394,
      "elevation": 11.40345
    },
    {
      "latitude": 51.49527,
      "longitude": -0.223941,
      "elevation": 11.397842
    },
    {
      "latitude": 51.4953,
      "longitude": -0.223941,
      "elevation": 11.391089
    },
    {
      "latitude": 51.495327,
      "longitude": -0.223941,
      "elevation": 11.384786
    },
    {
      "latitude": 51.495354,
      "longitude": -0.223939,
      "elevation": 11.376966
    },
    {
      "latitude": 51.49538,
      "longitude": -0.223935,
      "elevation": 11.367906
    },
    {
      "latitude": 51.495415,
      "longitude": -0.223925,
      "elevation": 11.355416
    },
    {
      "latitude": 51.49545,
      "longitude": -0.22391,
      "elevation": 11.34296
    },
    {
      "latitude": 51.495483,
      "longitude": -0.223897,
      "elevation": 11.335806
    },
    {
      "latitude": 51.49551,
      "longitude": -0.223895,
      "elevation": 11.334483
    },
    {
      "latitude": 51.495537,
      "longitude": -0.2239,
      "elevation": 11.33432
    },
    {
      "latitude": 51.49556,
      "longitude": -0.223907,
      "elevation": 11.333064
    },
    {
      "latitude": 51.495586,
      "longitude": -0.223913,
      "elevation": 11.329954
    },
    {
      "latitude": 51.495613,
      "longitude": -0.223926,
      "elevation": 11.323803
    },
    {
      "latitude": 51.495632,
      "longitude": -0.223951,
      "elevation": 11.312284
    },
    {
      "latitude": 51.495655,
      "longitude": -0.223972,
      "elevation": 11.297627
    },
    {
      "latitude": 51.49568,
      "longitude": -0.223979,
      "elevation": 11.283719
    },
    {
      "latitude": 51.49571,
      "longitude": -0.224001,
      "elevation": 11.258529
    },
    {
      "latitude": 51.495735,
      "longitude": -0.224027,
      "elevation": 11.226245
    },
    {
      "latitude": 51.495758,
      "longitude": -0.224039,
      "elevation": 11.201891
    },
    {
      "latitude": 51.49578,
      "longitude": -0.224037,
      "elevation": 11.186387
    },
    {
      "latitude": 51.495804,
      "longitude": -0.224028,
      "elevation": 11.157679
    },
    {
      "latitude": 51.495823,
      "longitude": -0.224015,
      "elevation": 10.811116
    },
    {
      "latitude": 51.49584,
      "longitude": -0.223998,
      "elevation": 9.811116
    },
    {
      "latitude": 51.495846,
      "longitude": -0.223974,
      "elevation": 9.239999
    },
    {
      "latitude": 51.49585,
      "longitude": -0.223946,
      "elevation": 9.080402
    },
    {
      "latitude": 51.495857,
      "longitude": -0.223918,
      "elevation": 8.923738
    },
    {
      "latitude": 51.495876,
      "longitude": -0.223893,
      "elevation": 9.240014
    },
    {
      "latitude": 51.495895,
      "longitude": -0.223876,
      "elevation": 9.558568
    },
    {
      "latitude": 51.495914,
      "longitude": -0.223868,
      "elevation": 10.143136
    },
    {
      "latitude": 51.495934,
      "longitude": -0.223865,
      "elevation": 10.674901
    },
    {
      "latitude": 51.495956,
      "longitude": -0.223862,
      "elevation": 11.016845
    },
    {
      "latitude": 51.495987,
      "longitude": -0.223852,
      "elevation": 11.145258
    },
    {
      "latitude": 51.49602,
      "longitude": -0.223838,
      "elevation": 11.040602
    },
    {
      "latitude": 51.496067,
      "longitude": -0.223819,
      "elevation": 10.917347
    },
    {
      "latitude": 51.496105,
      "longitude": -0.223803,
      "elevation": 10.803009
    },
    {
      "latitude": 51.496136,
      "longitude": -0.223789,
      "elevation": 10.864205
    },
    {
      "latitude": 51.496185,
      "longitude": -0.223772,
      "elevation": 11.00109
    },
    {
      "latitude": 51.496246,
      "longitude": -0.223751,
      "elevation": 11.16501
    },
    {
      "latitude": 51.496307,
      "longitude": -0.223728,
      "elevation": 11.21774
    },
    {
      "latitude": 51.496365,
      "longitude": -0.223703,
      "elevation": 11.248301
    },
    {
      "latitude": 51.49642,
      "longitude": -0.223677,
      "elevation": 11.256777
    },
    {
      "latitude": 51.49647,
      "longitude": -0.223651,
      "elevation": 11.278251
    },
    {
      "latitude": 51.496517,
      "longitude": -0.223624,
      "elevation": 11.295918
    },
    {
      "latitude": 51.496555,
      "longitude": -0.223599,
      "elevation": 11.306217
    },
    {
      "latitude": 51.49659,
      "longitude": -0.223573,
      "elevation": 11.347808
    },
    {
      "latitude": 51.49662,
      "longitude": -0.223548,
      "elevation": 11.372073
    },
    {
      "latitude": 51.49665,
      "longitude": -0.223522,
      "elevation": 11.3701105
    },
    {
      "latitude": 51.49668,
      "longitude": -0.223496,
      "elevation": 11.389252
    },
    {
      "latitude": 51.496708,
      "longitude": -0.223469,
      "elevation": 11.5313635
    },
    {
      "latitude": 51.496735,
      "longitude": -0.22344,
      "elevation": 11.652859
    },
    {
      "latitude": 51.49676,
      "longitude": -0.223412,
      "elevation": 11.754146
    },
    {
      "latitude": 51.496788,
      "longitude": -0.223383,
      "elevation": 11.850856
    },
    {
      "latitude": 51.49681,
      "longitude": -0.223355,
      "elevation": 11.930721
    },
    {
      "latitude": 51.496834,
      "longitude": -0.223328,
      "elevation": 11.9879265
    },
    {
      "latitude": 51.496845,
      "longitude": -0.223306,
      "elevation": 11.998901
    },
    {
      "latitude": 51.496857,
      "longitude": -0.22329,
      "elevation": 11.999579
    },
    {
      "latitude": 51.496864,
      "longitude": -0.223273,
      "elevation": 11.999695
    },
    {
      "latitude": 51.496876,
      "longitude": -0.223253,
      "elevation": 11.999883
    },
    {
      "latitude": 51.496895,
      "longitude": -0.22323,
      "elevation": 11.999915
    },
    {
      "latitude": 51.496918,
      "longitude": -0.223205,
      "elevation": 11.999883
    },
    {
      "latitude": 51.49694,
      "longitude": -0.223178,
      "elevation": 11.999883
    },
    {
      "latitude": 51.496967,
      "longitude": -0.223148,
      "elevation": 11.999915
    },
    {
      "latitude": 51.496998,
      "longitude": -0.223117,
      "elevation": 11.999955
    },
    {
      "latitude": 51.497025,
      "longitude": -0.223083,
      "elevation": 11.999972
    },
    {
      "latitude": 51.49705,
      "longitude": -0.223049,
      "elevation": 11.999972
    },
    {
      "latitude": 51.497078,
      "longitude": -0.223014,
      "elevation": 11.999962
    },
    {
      "latitude": 51.49711,
      "longitude": -0.22298,
      "elevation": 11.999938
    },
    {
      "latitude": 51.497143,
      "longitude": -0.222949,
      "elevation": 11.999915
    },
    {
      "latitude": 51.49717,
      "longitude": -0.222923,
      "elevation": 11.999883
    },
    {
      "latitude": 51.497192,
      "longitude": -0.222899,
      "elevation": 11.999863
    },
    {
      "latitude": 51.49722,
      "longitude": -0.222873,
      "elevation": 11.999863
    },
    {
      "latitude": 51.49725,
      "longitude": -0.222843,
      "elevation": 11.999778
    },
    {
      "latitude": 51.49728,
      "longitude": -0.222813,
      "elevation": 11.999641
    },
    {
      "latitude": 51.497314,
      "longitude": -0.222785,
      "elevation": 11.999641
    },
    {
      "latitude": 51.497345,
      "longitude": -0.222762,
      "elevation": 11.999641
    },
    {
      "latitude": 51.49738,
      "longitude": -0.222743,
      "elevation": 11.999579
    },
    {
      "latitude": 51.49741,
      "longitude": -0.222728,
      "elevation": 11.999506
    },
    {
      "latitude": 51.497444,
      "longitude": -0.222717,
      "elevation": 11.999641
    },
    {
      "latitude": 51.49748,
      "longitude": -0.222711,
      "elevation": 11.999641
    },
    {
      "latitude": 51.497513,
      "longitude": -0.222706,
      "elevation": 11.965993
    },
    {
      "latitude": 51.497547,
      "longitude": -0.222699,
      "elevation": 11.884425
    },
    {
      "latitude": 51.49758,
      "longitude": -0.222688,
      "elevation": 11.805254
    },
    {
      "latitude": 51.497612,
      "longitude": -0.222676,
      "elevation": 11.728358
    },
    {
      "latitude": 51.497646,
      "longitude": -0.222665,
      "elevation": 11.649121
    },
    {
      "latitude": 51.49768,
      "longitude": -0.222656,
      "elevation": 11.5698805
    },
    {
      "latitude": 51.49771,
      "longitude": -0.222648,
      "elevation": 11.495337
    },
    {
      "latitude": 51.497738,
      "longitude": -0.222641,
      "elevation": 11.425781
    },
    {
      "latitude": 51.49776,
      "longitude": -0.222635,
      "elevation": 11.370614
    },
    {
      "latitude": 51.49778,
      "longitude": -0.222629,
      "elevation": 11.329838
    },
    {
      "latitude": 51.497795,
      "longitude": -0.222624,
      "elevation": 11.293763
    },
    {
      "latitude": 51.497807,
      "longitude": -0.222619,
      "elevation": 11.262476
    },
    {
      "latitude": 51.49782,
      "longitude": -0.222614,
      "elevation": 11.223674
    },
    {
      "latitude": 51.497845,
      "longitude": -0.22261,
      "elevation": 11.170932
    },
    {
      "latitude": 51.497875,
      "longitude": -0.222605,
      "elevation": 11.101404
    },
    {
      "latitude": 51.49791,
      "longitude": -0.222599,
      "elevation": 11.017325
    },
    {
      "latitude": 51.497948,
      "longitude": -0.222592,
      "elevation": 10.923452
    },
    {
      "latitude": 51.49799,
      "longitude": -0.222584,
      "elevation": 10.826478
    },
    {
      "latitude": 51.498028,
      "longitude": -0.222574,
      "elevation": 10.729896
    },
    {
      "latitude": 51.498066,
      "longitude": -0.222562,
      "elevation": 10.638948
    },
    {
      "latitude": 51.4981,
      "longitude": -0.222549,
      "elevation": 10.555523
    },
    {
      "latitude": 51.498135,
      "longitude": -0.222537,
      "elevation": 10.477006
    },
    {
      "latitude": 51.498165,
      "longitude": -0.222528,
      "elevation": 10.399153
    },
    {
      "latitude": 51.498196,
      "longitude": -0.222523,
      "elevation": 10.325921
    },
    {
      "latitude": 51.498226,
      "longitude": -0.222523,
      "elevation": 10.257507
    },
    {
      "latitude": 51.498253,
      "longitude": -0.222527,
      "elevation": 10.190469
    },
    {
      "latitude": 51.49828,
      "longitude": -0.222532,
      "elevation": 10.123421
    },
    {
      "latitude": 51.498306,
      "longitude": -0.222536,
      "elevation": 10.057987
    },
    {
      "latitude": 51.498333,
      "longitude": -0.222537,
      "elevation": 9.995523
    },
    {
      "latitude": 51.49836,
      "longitude": -0.222534,
      "elevation": 9.960599
    },
    {
      "latitude": 51.498386,
      "longitude": -0.222526,
      "elevation": 9.927128
    },
    {
      "latitude": 51.498413,
      "longitude": -0.222517,
      "elevation": 9.8951
    },
    {
      "latitude": 51.49844,
      "longitude": -0.222507,
      "elevation": 9.862601
    },
    {
      "latitude": 51.49847,
      "longitude": -0.222498,
      "elevation": 9.831502
    },
    {
      "latitude": 51.4985,
      "longitude": -0.222491,
      "elevation": 9.801159
    },
    {
      "latitude": 51.49853,
      "longitude": -0.222485,
      "elevation": 9.769659
    },
    {
      "latitude": 51.49856,
      "longitude": -0.222479,
      "elevation": 9.738836
    },
    {
      "latitude": 51.498596,
      "longitude": -0.222471,
      "elevation": 9.709189
    },
    {
      "latitude": 51.498634,
      "longitude": -0.22246,
      "elevation": 9.672846
    },
    {
      "latitude": 51.498684,
      "longitude": -0.222444,
      "elevation": 9.64107
    },
    {
      "latitude": 51.498734,
      "longitude": -0.222429,
      "elevation": 9.598554
    },
    {
      "latitude": 51.498775,
      "longitude": -0.222418,
      "elevation": 9.566337
    },
    {
      "latitude": 51.49881,
      "longitude": -0.222409,
      "elevation": 9.53404
    },
    {
      "latitude": 51.498844,
      "longitude": -0.222401,
      "elevation": 9.501741
    },
    {
      "latitude": 51.49888,
      "longitude": -0.222391,
      "elevation": 9.471831
    },
    {
      "latitude": 51.498913,
      "longitude": -0.22238,
      "elevation": 9.443811
    },
    {
      "latitude": 51.498947,
      "longitude": -0.222367,
      "elevation": 9.419318
    },
    {
      "latitude": 51.498978,
      "longitude": -0.222353,
      "elevation": 9.397801
    },
    {
      "latitude": 51.49901,
      "longitude": -0.22234,
      "elevation": 9.376833
    },
    {
      "latitude": 51.49904,
      "longitude": -0.222327,
      "elevation": 9.356973
    },
    {
      "latitude": 51.499065,
      "longitude": -0.222316,
      "elevation": 9.338597
    },
    {
      "latitude": 51.499092,
      "longitude": -0.222306,
      "elevation": 9.318762
    },
    {
      "latitude": 51.49912,
      "longitude": -0.2223,
      "elevation": 9.293682
    },
    {
      "latitude": 51.499146,
      "longitude": -0.222297,
      "elevation": 9.265017
    },
    {
      "latitude": 51.499172,
      "longitude": -0.222297,
      "elevation": 9.242849
    },
    {
      "latitude": 51.499207,
      "longitude": -0.2223,
      "elevation": 9.259983
    },
    {
      "latitude": 51.49924,
      "longitude": -0.222304,
      "elevation": 9.276681
    },
    {
      "latitude": 51.499283,
      "longitude": -0.222306,
      "elevation": 9.297749
    },
    {
      "latitude": 51.49932,
      "longitude": -0.222304,
      "elevation": 9.318349
    },
    {
      "latitude": 51.499355,
      "longitude": -0.222293,
      "elevation": 9.34158
    },
    {
      "latitude": 51.499386,
      "longitude": -0.222279,
      "elevation": 9.348381
    },
    {
      "latitude": 51.499416,
      "longitude": -0.222268,
      "elevation": 9.343777
    },
    {
      "latitude": 51.499447,
      "longitude": -0.222263,
      "elevation": 9.348402
    },
    {
      "latitude": 51.499477,
      "longitude": -0.22226,
      "elevation": 9.385978
    },
    {
      "latitude": 51.499516,
      "longitude": -0.222255,
      "elevation": 9.405109
    },
    {
      "latitude": 51.49955,
      "longitude": -0.222249,
      "elevation": 9.422825
    },
    {
      "latitude": 51.49958,
      "longitude": -0.222245,
      "elevation": 9.398672
    },
    {
      "latitude": 51.4996,
      "longitude": -0.222247,
      "elevation": 9.369509
    },
    {
      "latitude": 51.49961,
      "longitude": -0.22225,
      "elevation": 9.411625
    },
    {
      "latitude": 51.499626,
      "longitude": -0.22225,
      "elevation": 9.432914
    },
    {
      "latitude": 51.49964,
      "longitude": -0.222246,
      "elevation": 9.424833
    },
    {
      "latitude": 51.499664,
      "longitude": -0.22224,
      "elevation": 9.432832
    },
    {
      "latitude": 51.49969,
      "longitude": -0.222234,
      "elevation": 9.423652
    },
    {
      "latitude": 51.49972,
      "longitude": -0.222228,
      "elevation": 9.388277
    },
    {
      "latitude": 51.499756,
      "longitude": -0.222223,
      "elevation": 9.398083
    },
    {
      "latitude": 51.49979,
      "longitude": -0.22222,
      "elevation": 9.409021
    },
    {
      "latitude": 51.49983,
      "longitude": -0.222218,
      "elevation": 9.419989
    },
    {
      "latitude": 51.499863,
      "longitude": -0.222217,
      "elevation": 9.455793
    },
    {
      "latitude": 51.499893,
      "longitude": -0.222217,
      "elevation": 9.466302
    },
    {
      "latitude": 51.49992,
      "longitude": -0.222218,
      "elevation": 9.497851
    },
    {
      "latitude": 51.499947,
      "longitude": -0.22222,
      "elevation": 9.527095
    },
    {
      "latitude": 51.499973,
      "longitude": -0.222223,
      "elevation": 9.520273
    },
    {
      "latitude": 51.500008,
      "longitude": -0.222227,
      "elevation": 9.508461
    },
    {
      "latitude": 51.500046,
      "longitude": -0.222229,
      "elevation": 9.471606
    },
    {
      "latitude": 51.500084,
      "longitude": -0.222228,
      "elevation": 9.196199
    },
    {
      "latitude": 51.50012,
      "longitude": -0.222226,
      "elevation": 9.044934
    },
    {
      "latitude": 51.50015,
      "longitude": -0.222225,
      "elevation": 8.760643
    },
    {
      "latitude": 51.500164,
      "longitude": -0.222229,
      "elevation": 8.648364
    },
    {
      "latitude": 51.500175,
      "longitude": -0.222234,
      "elevation": 8.761169
    },
    {
      "latitude": 51.500195,
      "longitude": -0.222237,
      "elevation": 8.648396
    },
    {
      "latitude": 51.500214,
      "longitude": -0.222239,
      "elevation": 8.646961
    },
    {
      "latitude": 51.50024,
      "longitude": -0.222239,
      "elevation": 8.523344
    },
    {
      "latitude": 51.500275,
      "longitude": -0.22224,
      "elevation": 8.391527
    },
    {
      "latitude": 51.500305,
      "longitude": -0.222239,
      "elevation": 8.106644
    },
    {
      "latitude": 51.500336,
      "longitude": -0.222235,
      "elevation": 7.95452
    },
    {
      "latitude": 51.500362,
      "longitude": -0.222231,
      "elevation": 7.639908
    },
    {
      "latitude": 51.500393,
      "longitude": -0.222227,
      "elevation": 7.798144
    },
    {
      "latitude": 51.500427,
      "longitude": -0.222224,
      "elevation": 8.100757
    },
    {
      "latitude": 51.50047,
      "longitude": -0.222223,
      "elevation": 8.714019
    },
    {
      "latitude": 51.50051,
      "longitude": -0.222221,
      "elevation": 8.798956
    },
    {
      "latitude": 51.50055,
      "longitude": -0.222217,
      "elevation": 9.232293
    },
    {
      "latitude": 51.50058,
      "longitude": -0.22221,
      "elevation": 9.264079
    },
    {
      "latitude": 51.500607,
      "longitude": -0.222202,
      "elevation": 9.260565
    },
    {
      "latitude": 51.500637,
      "longitude": -0.222195,
      "elevation": 9.235351
    },
    {
      "latitude": 51.500675,
      "longitude": -0.222189,
      "elevation": 9.240381
    },
    {
      "latitude": 51.500713,
      "longitude": -0.222184,
      "elevation": 9.235872
    },
    {
      "latitude": 51.500755,
      "longitude": -0.22218,
      "elevation": 9.218656
    },
    {
      "latitude": 51.500793,
      "longitude": -0.222177,
      "elevation": 9.218193
    },
    {
      "latitude": 51.500824,
      "longitude": -0.222175,
      "elevation": 9.212483
    },
    {
      "latitude": 51.500854,
      "longitude": -0.222174,
      "elevation": 9.227667
    },
    {
      "latitude": 51.500877,
      "longitude": -0.222173,
      "elevation": 9.252738
    },
    {
      "latitude": 51.5009,
      "longitude": -0.222173,
      "elevation": 9.276062
    },
    {
      "latitude": 51.500923,
      "longitude": -0.222173,
      "elevation": 9.296895
    },
    {
      "latitude": 51.500942,
      "longitude": -0.222172,
      "elevation": 9.313884
    },
    {
      "latitude": 51.50096,
      "longitude": -0.222172,
      "elevation": 9.333502
    },
    {
      "latitude": 51.50098,
      "longitude": -0.222173,
      "elevation": 9.354584
    },
    {
      "latitude": 51.501003,
      "longitude": -0.222176,
      "elevation": 9.380254
    },
    {
      "latitude": 51.501026,
      "longitude": -0.222182,
      "elevation": 9.41387
    },
    {
      "latitude": 51.501053,
      "longitude": -0.222191,
      "elevation": 9.452732
    },
    {
      "latitude": 51.50108,
      "longitude": -0.222202,
      "elevation": 9.496176
    },
    {
      "latitude": 51.50111,
      "longitude": -0.222214,
      "elevation": 9.541088
    },
    {
      "latitude": 51.50114,
      "longitude": -0.222226,
      "elevation": 9.585403
    },
    {
      "latitude": 51.501175,
      "longitude": -0.222236,
      "elevation": 9.62643
    },
    {
      "latitude": 51.50121,
      "longitude": -0.222242,
      "elevation": 9.660896
    },
    {
      "latitude": 51.501247,
      "longitude": -0.222247,
      "elevation": 9.694923
    },
    {
      "latitude": 51.501286,
      "longitude": -0.222251,
      "elevation": 9.727173
    },
    {
      "latitude": 51.501328,
      "longitude": -0.222255,
      "elevation": 9.759837
    },
    {
      "latitude": 51.50137,
      "longitude": -0.222262,
      "elevation": 9.795531
    },
    {
      "latitude": 51.50141,
      "longitude": -0.222272,
      "elevation": 9.832323
    },
    {
      "latitude": 51.501453,
      "longitude": -0.222283,
      "elevation": 9.866693
    },
    {
      "latitude": 51.50149,
      "longitude": -0.222292,
      "elevation": 9.894359
    },
    {
      "latitude": 51.501522,
      "longitude": -0.222298,
      "elevation": 9.916001
    },
    {
      "latitude": 51.501553,
      "longitude": -0.222303,
      "elevation": 9.9339485
    },
    {
      "latitude": 51.50158,
      "longitude": -0.222312,
      "elevation": 9.95345
    },
    {
      "latitude": 51.50161,
      "longitude": -0.222323,
      "elevation": 9.971534
    },
    {
      "latitude": 51.501644,
      "longitude": -0.222337,
      "elevation": 9.988812
    },
    {
      "latitude": 51.501675,
      "longitude": -0.222352,
      "elevation": 10.029476
    },
    {
      "latitude": 51.501705,
      "longitude": -0.222368,
      "elevation": 10.156518
    },
    {
      "latitude": 51.50174,
      "longitude": -0.222384,
      "elevation": 10.280602
    },
    {
      "latitude": 51.50177,
      "longitude": -0.2224,
      "elevation": 10.397848
    },
    {
      "latitude": 51.501797,
      "longitude": -0.222418,
      "elevation": 10.503794
    },
    {
      "latitude": 51.501827,
      "longitude": -0.222438,
      "elevation": 10.605804
    },
    {
      "latitude": 51.501854,
      "longitude": -0.222461,
      "elevation": 10.691706
    },
    {
      "latitude": 51.501877,
      "longitude": -0.222487,
      "elevation": 10.765061
    },
    {
      "latitude": 51.5019,
      "longitude": -0.222514,
      "elevation": 10.835279
    },
    {
      "latitude": 51.501923,
      "longitude": -0.222541,
      "elevation": 10.907648
    },
    {
      "latitude": 51.50195,
      "longitude": -0.222566,
      "elevation": 10.98604
    },
    {
      "latitude": 51.501976,
      "longitude": -0.222587,
      "elevation": 11.071343
    },
    {
      "latitude": 51.502007,
      "longitude": -0.222603,
      "elevation": 11.167522
    },
    {
      "latitude": 51.502037,
      "longitude": -0.222615,
      "elevation": 11.271016
    },
    {
      "latitude": 51.502068,
      "longitude": -0.222626,
      "elevation": 11.371175
    },
    {
      "latitude": 51.502094,
      "longitude": -0.222638,
      "elevation": 11.459401
    },
    {
      "latitude": 51.502125,
      "longitude": -0.222651,
      "elevation": 11.545996
    },
    {
      "latitude": 51.50215,
      "longitude": -0.222667,
      "elevation": 11.626371
    },
    {
      "latitude": 51.50218,
      "longitude": -0.222684,
      "elevation": 11.704499
    },
    {
      "latitude": 51.502205,
      "longitude": -0.222702,
      "elevation": 11.784251
    },
    {
      "latitude": 51.50223,
      "longitude": -0.222718,
      "elevation": 11.860651
    },
    {
      "latitude": 51.50226,
      "longitude": -0.222732,
      "elevation": 11.937443
    },
    {
      "latitude": 51.502285,
      "longitude": -0.222743,
      "elevation": 12.012658
    },
    {
      "latitude": 51.50231,
      "longitude": -0.222757,
      "elevation": 12.087429
    },
    {
      "latitude": 51.502342,
      "longitude": -0.22278,
      "elevation": 12.162003
    },
    {
      "latitude": 51.502384,
      "longitude": -0.222816,
      "elevation": 12.252782
    },
    {
      "latitude": 51.502426,
      "longitude": -0.22285,
      "elevation": 12.347767
    },
    {
      "latitude": 51.50246,
      "longitude": -0.222868,
      "elevation": 12.4417
    },
    {
      "latitude": 51.5025,
      "longitude": -0.222883,
      "elevation": 12.540353
    },
    {
      "latitude": 51.502544,
      "longitude": -0.222904,
      "elevation": 12.515154
    },
    {
      "latitude": 51.50259,
      "longitude": -0.222915,
      "elevation": 12.501926
    },
    {
      "latitude": 51.50263,
      "longitude": -0.222931,
      "elevation": 12.482683
    },
    {
      "latitude": 51.50266,
      "longitude": -0.222966,
      "elevation": 12.4406185
    },
    {
      "latitude": 51.50268,
      "longitude": -0.223006,
      "elevation": 12.392562
    },
    {
      "latitude": 51.502693,
      "longitude": -0.223033,
      "elevation": 12.360169
    },
    {
      "latitude": 51.502705,
      "longitude": -0.223046,
      "elevation": 12.344433
    },
    {
      "latitude": 51.50272,
      "longitude": -0.223055,
      "elevation": 12.333636
    },
    {
      "latitude": 51.502743,
      "longitude": -0.223066,
      "elevation": 12.320539
    },
    {
      "latitude": 51.502766,
      "longitude": -0.223082,
      "elevation": 12.301345
    },
    {
      "latitude": 51.502792,
      "longitude": -0.223102,
      "elevation": 12.277419
    },
    {
      "latitude": 51.502815,
      "longitude": -0.223123,
      "elevation": 12.252307
    },
    {
      "latitude": 51.50284,
      "longitude": -0.223145,
      "elevation": 12.225952
    },
    {
      "latitude": 51.502857,
      "longitude": -0.223165,
      "elevation": 12.201971
    },
    {
      "latitude": 51.50288,
      "longitude": -0.223184,
      "elevation": 12.179176
    },
    {
      "latitude": 51.502903,
      "longitude": -0.223202,
      "elevation": 12.157588
    },
    {
      "latitude": 51.50293,
      "longitude": -0.223218,
      "elevation": 12.138392
    },
    {
      "latitude": 51.502964,
      "longitude": -0.223235,
      "elevation": 12.117995
    },
    {
      "latitude": 51.503002,
      "longitude": -0.223251,
      "elevation": 12.098797
    },
    {
      "latitude": 51.503044,
      "longitude": -0.22327,
      "elevation": 12.075997
    },
    {
      "latitude": 51.503082,
      "longitude": -0.223295,
      "elevation": 12.045998
    },
    {
      "latitude": 51.503113,
      "longitude": -0.223328,
      "elevation": 12.006398
    },
    {
      "latitude": 51.503128,
      "longitude": -0.223361,
      "elevation": 11.9750185
    },
    {
      "latitude": 51.50313,
      "longitude": -0.223392,
      "elevation": 11.946603
    },
    {
      "latitude": 51.50313,
      "longitude": -0.223427,
      "elevation": 11.914605
    },
    {
      "latitude": 51.503136,
      "longitude": -0.22347,
      "elevation": 11.874998
    },
    {
      "latitude": 51.503136,
      "longitude": -0.223513,
      "elevation": 11.835669
    },
    {
      "latitude": 51.503136,
      "longitude": -0.223555,
      "elevation": 11.797568
    },
    {
      "latitude": 51.50313,
      "longitude": -0.223598,
      "elevation": 11.759446
    },
    {
      "latitude": 51.503128,
      "longitude": -0.223643,
      "elevation": 11.719908
    },
    {
      "latitude": 51.503124,
      "longitude": -0.223687,
      "elevation": 11.682157
    },
    {
      "latitude": 51.50312,
      "longitude": -0.22373,
      "elevation": 11.646377
    },
    {
      "latitude": 51.503113,
      "longitude": -0.22377,
      "elevation": 11.614488
    },
    {
      "latitude": 51.503105,
      "longitude": -0.223807,
      "elevation": 11.587251
    },
    {
      "latitude": 51.503098,
      "longitude": -0.223846,
      "elevation": 11.559887
    },
    {
      "latitude": 51.503086,
      "longitude": -0.223889,
      "elevation": 11.531768
    },
    {
      "latitude": 51.50307,
      "longitude": -0.223938,
      "elevation": 11.502661
    },
    {
      "latitude": 51.50306,
      "longitude": -0.223983,
      "elevation": 11.476949
    },
    {
      "latitude": 51.50305,
      "longitude": -0.224017,
      "elevation": 11.458443
    },
    {
      "latitude": 51.50304,
      "longitude": -0.224061,
      "elevation": 11.433027
    },
    {
      "latitude": 51.503036,
      "longitude": -0.224119,
      "elevation": 11.393503
    },
    {
      "latitude": 51.50303,
      "longitude": -0.224172,
      "elevation": 11.366315
    },
    {
      "latitude": 51.503017,
      "longitude": -0.224217,
      "elevation": 11.378261
    },
    {
      "latitude": 51.50301,
      "longitude": -0.224258,
      "elevation": 11.390085
    },
    {
      "latitude": 51.503,
      "longitude": -0.224296,
      "elevation": 11.399026
    },
    {
      "latitude": 51.50299,
      "longitude": -0.224331,
      "elevation": 11.408246
    },
    {
      "latitude": 51.502983,
      "longitude": -0.224364,
      "elevation": 11.417596
    },
    {
      "latitude": 51.502975,
      "longitude": -0.224396,
      "elevation": 11.426899
    },
    {
      "latitude": 51.502968,
      "longitude": -0.224426,
      "elevation": 11.437678
    },
    {
      "latitude": 51.502956,
      "longitude": -0.224456,
      "elevation": 11.449318
    },
    {
      "latitude": 51.50295,
      "longitude": -0.224486,
      "elevation": 11.46129
    },
    {
      "latitude": 51.502934,
      "longitude": -0.224515,
      "elevation": 11.4756565
    },
    {
      "latitude": 51.502922,
      "longitude": -0.224546,
      "elevation": 11.492769
    },
    {
      "latitude": 51.502907,
      "longitude": -0.224578,
      "elevation": 11.51193
    },
    {
      "latitude": 51.502888,
      "longitude": -0.224612,
      "elevation": 11.533484
    },
    {
      "latitude": 51.50287,
      "longitude": -0.224649,
      "elevation": 11.5568285
    },
    {
      "latitude": 51.502846,
      "longitude": -0.224688,
      "elevation": 11.582227
    },
    {
      "latitude": 51.502827,
      "longitude": -0.224732,
      "elevation": 11.607778
    },
    {
      "latitude": 51.502804,
      "longitude": -0.224779,
      "elevation": 11.632951
    },
    {
      "latitude": 51.502785,
      "longitude": -0.224829,
      "elevation": 11.656739
    },
    {
      "latitude": 51.502766,
      "longitude": -0.224881,
      "elevation": 11.678088
    },
    {
      "latitude": 51.50275,
      "longitude": -0.224932,
      "elevation": 11.696061
    },
    {
      "latitude": 51.502743,
      "longitude": -0.224981,
      "elevation": 11.707772
    },
    {
      "latitude": 51.502735,
      "longitude": -0.225027,
      "elevation": 11.658275
    },
    {
      "latitude": 51.502735,
      "longitude": -0.225071,
      "elevation": 11.57113
    },
    {
      "latitude": 51.502728,
      "longitude": -0.225113,
      "elevation": 11.489794
    },
    {
      "latitude": 51.50272,
      "longitude": -0.225155,
      "elevation": 11.411745
    },
    {
      "latitude": 51.50271,
      "longitude": -0.225197,
      "elevation": 11.334213
    },
    {
      "latitude": 51.502697,
      "longitude": -0.225241,
      "elevation": 11.252207
    },
    {
      "latitude": 51.50269,
      "longitude": -0.225286,
      "elevation": 11.164769
    },
    {
      "latitude": 51.50268,
      "longitude": -0.22533,
      "elevation": 11.07584
    },
    {
      "latitude": 51.502678,
      "longitude": -0.225374,
      "elevation": 10.982985
    },
    {
      "latitude": 51.502678,
      "longitude": -0.225418,
      "elevation": 10.887873
    },
    {
      "latitude": 51.50268,
      "longitude": -0.225462,
      "elevation": 10.789094
    },
    {
      "latitude": 51.50268,
      "longitude": -0.225507,
      "elevation": 10.689894
    },
    {
      "latitude": 51.502686,
      "longitude": -0.225552,
      "elevation": 10.59152
    },
    {
      "latitude": 51.50268,
      "longitude": -0.225598,
      "elevation": 10.491381
    },
    {
      "latitude": 51.502678,
      "longitude": -0.225644,
      "elevation": 10.393456
    },
    {
      "latitude": 51.50267,
      "longitude": -0.225691,
      "elevation": 10.297174
    },
    {
      "latitude": 51.502663,
      "longitude": -0.225738,
      "elevation": 10.19821
    },
    {
      "latitude": 51.502655,
      "longitude": -0.225786,
      "elevation": 10.09658
    },
    {
      "latitude": 51.50265,
      "longitude": -0.225834,
      "elevation": 9.991796
    },
    {
      "latitude": 51.50265,
      "longitude": -0.225882,
      "elevation": 9.897279
    },
    {
      "latitude": 51.50265,
      "longitude": -0.225931,
      "elevation": 9.800784
    },
    {
      "latitude": 51.50265,
      "longitude": -0.225981,
      "elevation": 9.701471
    },
    {
      "latitude": 51.502647,
      "longitude": -0.226031,
      "elevation": 9.598331
    },
    {
      "latitude": 51.50264,
      "longitude": -0.226082,
      "elevation": 9.49108
    },
    {
      "latitude": 51.502625,
      "longitude": -0.226134,
      "elevation": 9.376048
    },
    {
      "latitude": 51.502613,
      "longitude": -0.226186,
      "elevation": 9.253372
    },
    {
      "latitude": 51.5026,
      "longitude": -0.226236,
      "elevation": 9.135883
    },
    {
      "latitude": 51.5026,
      "longitude": -0.226281,
      "elevation": 9.037547
    },
    {
      "latitude": 51.502594,
      "longitude": -0.226326,
      "elevation": 8.930282
    },
    {
      "latitude": 51.502575,
      "longitude": -0.226372,
      "elevation": 8.80169
    },
    {
      "latitude": 51.502556,
      "longitude": -0.226418,
      "elevation": 8.652411
    },
    {
      "latitude": 51.50255,
      "longitude": -0.226459,
      "elevation": 8.538814
    },
    {
      "latitude": 51.50254,
      "longitude": -0.226499,
      "elevation": 8.432304
    },
    {
      "latitude": 51.50253,
      "longitude": -0.226541,
      "elevation": 8.3081665
    },
    {
      "latitude": 51.502514,
      "longitude": -0.226588,
      "elevation": 8.169392
    },
    {
      "latitude": 51.502495,
      "longitude": -0.226636,
      "elevation": 8.040452
    },
    {
      "latitude": 51.502476,
      "longitude": -0.226686,
      "elevation": 8.004882
    },
    {
      "latitude": 51.50246,
      "longitude": -0.226735,
      "elevation": 8.059161
    },
    {
      "latitude": 51.502445,
      "longitude": -0.226781,
      "elevation": 8.134001
    },
    {
      "latitude": 51.50243,
      "longitude": -0.226823,
      "elevation": 8.200367
    },
    {
      "latitude": 51.50242,
      "longitude": -0.22686,
      "elevation": 8.250063
    },
    {
      "latitude": 51.502407,
      "longitude": -0.226893,
      "elevation": 8.282258
    },
    {
      "latitude": 51.502396,
      "longitude": -0.226927,
      "elevation": 8.310085
    },
    {
      "latitude": 51.502388,
      "longitude": -0.226962,
      "elevation": 8.363259
    },
    {
      "latitude": 51.50238,
      "longitude": -0.227003,
      "elevation": 8.406477
    },
    {
      "latitude": 51.502377,
      "longitude": -0.22705,
      "elevation": 8.4544935
    },
    {
      "latitude": 51.502373,
      "longitude": -0.227102,
      "elevation": 8.490324
    },
    {
      "latitude": 51.502365,
      "longitude": -0.227154,
      "elevation": 8.53926
    },
    {
      "latitude": 51.50236,
      "longitude": -0.227204,
      "elevation": 8.602534
    },
    {
      "latitude": 51.502357,
      "longitude": -0.227248,
      "elevation": 8.605273
    },
    {
      "latitude": 51.502354,
      "longitude": -0.227285,
      "elevation": 8.584978
    },
    {
      "latitude": 51.50235,
      "longitude": -0.227322,
      "elevation": 8.615684
    },
    {
      "latitude": 51.50234,
      "longitude": -0.227367,
      "elevation": 8.61653
    },
    {
      "latitude": 51.502323,
      "longitude": -0.227425,
      "elevation": 8.617263
    },
    {
      "latitude": 51.502296,
      "longitude": -0.22749,
      "elevation": 8.483504
    },
    {
      "latitude": 51.502293,
      "longitude": -0.227537,
      "elevation": 8.575829
    },
    {
      "latitude": 51.50229,
      "longitude": -0.227593,
      "elevation": 8.533554
    },
    {
      "latitude": 51.502293,
      "longitude": -0.227638,
      "elevation": 8.554985
    },
    {
      "latitude": 51.502296,
      "longitude": -0.227683,
      "elevation": 8.490759
    },
    {
      "latitude": 51.50229,
      "longitude": -0.227733,
      "elevation": 8.675371
    },
    {
      "latitude": 51.502274,
      "longitude": -0.227783,
      "elevation": 8.830853
    },
    {
      "latitude": 51.502254,
      "longitude": -0.227828,
      "elevation": 8.849436
    },
    {
      "latitude": 51.50224,
      "longitude": -0.22787,
      "elevation": 8.977186
    },
    {
      "latitude": 51.50223,
      "longitude": -0.227921,
      "elevation": 9.125502
    },
    {
      "latitude": 51.50222,
      "longitude": -0.22797,
      "elevation": 9.182156
    },
    {
      "latitude": 51.502213,
      "longitude": -0.22802,
      "elevation": 9.262763
    },
    {
      "latitude": 51.502205,
      "longitude": -0.228069,
      "elevation": 9.34709
    },
    {
      "latitude": 51.502193,
      "longitude": -0.228115,
      "elevation": 9.370638
    },
    {
      "latitude": 51.502186,
      "longitude": -0.228168,
      "elevation": 9.382359
    },
    {
      "latitude": 51.50218,
      "longitude": -0.228225,
      "elevation": 9.342466
    },
    {
      "latitude": 51.502167,
      "longitude": -0.228278,
      "elevation": 9.332
    },
    {
      "latitude": 51.502155,
      "longitude": -0.228326,
      "elevation": 9.30918
    },
    {
      "latitude": 51.502144,
      "longitude": -0.228372,
      "elevation": 9.254451
    },
    {
      "latitude": 51.502132,
      "longitude": -0.228417,
      "elevation": 9.28426
    },
    {
      "latitude": 51.502125,
      "longitude": -0.228465,
      "elevation": 9.311064
    },
    {
      "latitude": 51.50212,
      "longitude": -0.228518,
      "elevation": 9.361562
    },
    {
      "latitude": 51.502117,
      "longitude": -0.228567,
      "elevation": 9.355744
    },
    {
      "latitude": 51.502117,
      "longitude": -0.228608,
      "elevation": 9.351942
    },
    {
      "latitude": 51.50211,
      "longitude": -0.228653,
      "elevation": 9.433799
    },
    {
      "latitude": 51.5021,
      "longitude": -0.228702,
      "elevation": 9.416534
    },
    {
      "latitude": 51.502094,
      "longitude": -0.228754,
      "elevation": 9.399551
    },
    {
      "latitude": 51.502083,
      "longitude": -0.228807,
      "elevation": 9.437204
    },
    {
      "latitude": 51.502075,
      "longitude": -0.228863,
      "elevation": 9.439851
    },
    {
      "latitude": 51.502068,
      "longitude": -0.228921,
      "elevation": 9.44439
    },
    {
      "latitude": 51.502064,
      "longitude": -0.228975,
      "elevation": 9.459541
    },
    {
      "latitude": 51.502056,
      "longitude": -0.229022,
      "elevation": 9.465239
    },
    {
      "latitude": 51.502052,
      "longitude": -0.229065,
      "elevation": 9.463954
    },
    {
      "latitude": 51.50204,
      "longitude": -0.229111,
      "elevation": 9.466442
    },
    {
      "latitude": 51.502026,
      "longitude": -0.229164,
      "elevation": 9.462171
    },
    {
      "latitude": 51.50201,
      "longitude": -0.229218,
      "elevation": 9.4709835
    },
    {
      "latitude": 51.502,
      "longitude": -0.229268,
      "elevation": 9.444428
    },
    {
      "latitude": 51.501995,
      "longitude": -0.229313,
      "elevation": 9.429972
    },
    {
      "latitude": 51.501987,
      "longitude": -0.229359,
      "elevation": 9.413608
    },
    {
      "latitude": 51.501972,
      "longitude": -0.229406,
      "elevation": 9.352997
    },
    {
      "latitude": 51.50196,
      "longitude": -0.229451,
      "elevation": 9.476765
    },
    {
      "latitude": 51.501945,
      "longitude": -0.229492,
      "elevation": 9.353119
    },
    {
      "latitude": 51.501934,
      "longitude": -0.229531,
      "elevation": 9.540782
    },
    {
      "latitude": 51.501923,
      "longitude": -0.229571,
      "elevation": 9.521477
    },
    {
      "latitude": 51.501915,
      "longitude": -0.229613,
      "elevation": 9.546104
    },
    {
      "latitude": 51.501915,
      "longitude": -0.22966,
      "elevation": 9.436594
    },
    {
      "latitude": 51.50192,
      "longitude": -0.229708,
      "elevation": 9.372299
    },
    {
      "latitude": 51.501915,
      "longitude": -0.229756,
      "elevation": 9.594966
    },
    {
      "latitude": 51.50191,
      "longitude": -0.229804,
      "elevation": 9.720993
    },
    {
      "latitude": 51.501904,
      "longitude": -0.22985,
      "elevation": 9.755402
    },
    {
      "latitude": 51.501892,
      "longitude": -0.229896,
      "elevation": 9.841385
    },
    {
      "latitude": 51.501884,
      "longitude": -0.229945,
      "elevation": 9.883369
    },
    {
      "latitude": 51.501873,
      "longitude": -0.229997,
      "elevation": 9.927605
    },
    {
      "latitude": 51.501865,
      "longitude": -0.23005,
      "elevation": 9.929547
    },
    {
      "latitude": 51.501854,
      "longitude": -0.230103,
      "elevation": 9.931658
    },
    {
      "latitude": 51.501842,
      "longitude": -0.230154,
      "elevation": 9.885271
    },
    {
      "latitude": 51.501827,
      "longitude": -0.230204,
      "elevation": 9.832875
    },
    {
      "latitude": 51.501812,
      "longitude": -0.230251,
      "elevation": 9.40909
    },
    {
      "latitude": 51.501804,
      "longitude": -0.230297,
      "elevation": 9.293202
    },
    {
      "latitude": 51.50179,
      "longitude": -0.230347,
      "elevation": 9.292162
    },
    {
      "latitude": 51.501774,
      "longitude": -0.230399,
      "elevation": 9.291524
    },
    {
      "latitude": 51.50176,
      "longitude": -0.23045,
      "elevation": 9.165776
    },
    {
      "latitude": 51.501747,
      "longitude": -0.230499,
      "elevation": 9.031154
    },
    {
      "latitude": 51.50174,
      "longitude": -0.230547,
      "elevation": 9.153817
    },
    {
      "latitude": 51.501736,
      "longitude": -0.230594,
      "elevation": 9.145514
    },
    {
      "latitude": 51.501728,
      "longitude": -0.23064,
      "elevation": 8.880759
    },
    {
      "latitude": 51.501717,
      "longitude": -0.230684,
      "elevation": 9.008182
    },
    {
      "latitude": 51.5017,
      "longitude": -0.230726,
      "elevation": 9.124091
    },
    {
      "latitude": 51.501686,
      "longitude": -0.230769,
      "elevation": 9.116689
    },
    {
      "latitude": 51.50167,
      "longitude": -0.230812,
      "elevation": 9.313915
    },
    {
      "latitude": 51.501656,
      "longitude": -0.230858,
      "elevation": 9.3839
    },
    {
      "latitude": 51.501644,
      "longitude": -0.230907,
      "elevation": 9.362736
    },
    {
      "latitude": 51.501633,
      "longitude": -0.230958,
      "elevation": 9.339902
    },
    {
      "latitude": 51.501625,
      "longitude": -0.231011,
      "elevation": 9.236122
    },
    {
      "latitude": 51.501614,
      "longitude": -0.231063,
      "elevation": 9.290483
    },
    {
      "latitude": 51.501606,
      "longitude": -0.231114,
      "elevation": 9.266426
    },
    {
      "latitude": 51.501595,
      "longitude": -0.231163,
      "elevation": 9.244781
    },
    {
      "latitude": 51.501587,
      "longitude": -0.23121,
      "elevation": 9.2237625
    },
    {
      "latitude": 51.501583,
      "longitude": -0.231257,
      "elevation": 9.257121
    },
    {
      "latitude": 51.501583,
      "longitude": -0.231305,
      "elevation": 9.222999
    },
    {
      "latitude": 51.501583,
      "longitude": -0.231354,
      "elevation": 9.187409
    },
    {
      "latitude": 51.501575,
      "longitude": -0.231403,
      "elevation": 9.159471
    },
    {
      "latitude": 51.501568,
      "longitude": -0.231452,
      "elevation": 9.18113
    },
    {
      "latitude": 51.501556,
      "longitude": -0.2315,
      "elevation": 9.161128
    },
    {
      "latitude": 51.50155,
      "longitude": -0.231547,
      "elevation": 9.178672
    },
    {
      "latitude": 51.501537,
      "longitude": -0.231594,
      "elevation": 9.218113
    },
    {
      "latitude": 51.501526,
      "longitude": -0.231643,
      "elevation": 9.2214775
    },
    {
      "latitude": 51.501514,
      "longitude": -0.231693,
      "elevation": 9.302524
    },
    {
      "latitude": 51.501507,
      "longitude": -0.231743,
      "elevation": 9.353674
    },
    {
      "latitude": 51.5015,
      "longitude": -0.231791,
      "elevation": 9.403952
    },
    {
      "latitude": 51.50149,
      "longitude": -0.231839,
      "elevation": 9.536375
    },
    {
      "latitude": 51.501484,
      "longitude": -0.231888,
      "elevation": 9.697016
    },
    {
      "latitude": 51.501472,
      "longitude": -0.231936,
      "elevation": 9.8189745
    },
    {
      "latitude": 51.50146,
      "longitude": -0.231984,
      "elevation": 9.900369
    },
    {
      "latitude": 51.501446,
      "longitude": -0.232032,
      "elevation": 9.965492
    },
    {
      "latitude": 51.50143,
      "longitude": -0.23208,
      "elevation": 10.037313
    },
    {
      "latitude": 51.50141,
      "longitude": -0.232127,
      "elevation": 10.142042
    },
    {
      "latitude": 51.501396,
      "longitude": -0.232173,
      "elevation": 10.201517
    },
    {
      "latitude": 51.50138,
      "longitude": -0.23222,
      "elevation": 10.266132
    },
    {
      "latitude": 51.50137,
      "longitude": -0.232267,
      "elevation": 10.32491
    },
    {
      "latitude": 51.501358,
      "longitude": -0.232314,
      "elevation": 10.386403
    },
    {
      "latitude": 51.501343,
      "longitude": -0.23236,
      "elevation": 10.425685
    },
    {
      "latitude": 51.501324,
      "longitude": -0.232403,
      "elevation": 10.451302
    },
    {
      "latitude": 51.50129,
      "longitude": -0.232443,
      "elevation": 10.448932
    },
    {
      "latitude": 51.50125,
      "longitude": -0.23248,
      "elevation": 10.348315
    },
    {
      "latitude": 51.501213,
      "longitude": -0.232519,
      "elevation": 10.2136135
    },
    {
      "latitude": 51.50119,
      "longitude": -0.232563,
      "elevation": 10.067521
    },
    {
      "latitude": 51.501167,
      "longitude": -0.232607,
      "elevation": 10.064577
    },
    {
      "latitude": 51.50114,
      "longitude": -0.23265,
      "elevation": 10.053227
    },
    {
      "latitude": 51.501118,
      "longitude": -0.232696,
      "elevation": 10.044291
    },
    {
      "latitude": 51.501102,
      "longitude": -0.232741,
      "elevation": 10.041204
    },
    {
      "latitude": 51.501095,
      "longitude": -0.232783,
      "elevation": 10.091552
    },
    {
      "latitude": 51.501083,
      "longitude": -0.232825,
      "elevation": 10.090868
    },
    {
      "latitude": 51.50107,
      "longitude": -0.232869,
      "elevation": 10.230911
    },
    {
      "latitude": 51.501053,
      "longitude": -0.232916,
      "elevation": 10.283489
    },
    {
      "latitude": 51.501034,
      "longitude": -0.232965,
      "elevation": 10.2844925
    },
    {
      "latitude": 51.501022,
      "longitude": -0.233013,
      "elevation": 10.219908
    },
    {
      "latitude": 51.50101,
      "longitude": -0.23306,
      "elevation": 10.160067
    },
    {
      "latitude": 51.501,
      "longitude": -0.233106,
      "elevation": 10.11927
    },
    {
      "latitude": 51.500988,
      "longitude": -0.233151,
      "elevation": 10.137217
    },
    {
      "latitude": 51.500973,
      "longitude": -0.233196,
      "elevation": 10.118299
    },
    {
      "latitude": 51.500954,
      "longitude": -0.233241,
      "elevation": 10.026088
    },
    {
      "latitude": 51.50093,
      "longitude": -0.233286,
      "elevation": 9.860678
    },
    {
      "latitude": 51.50091,
      "longitude": -0.233332,
      "elevation": 9.713781
    },
    {
      "latitude": 51.50089,
      "longitude": -0.233378,
      "elevation": 9.585425
    },
    {
      "latitude": 51.500874,
      "longitude": -0.233425,
      "elevation": 9.526436
    },
    {
      "latitude": 51.500854,
      "longitude": -0.23347,
      "elevation": 9.406628
    },
    {
      "latitude": 51.50084,
      "longitude": -0.233514,
      "elevation": 9.465547
    },
    {
      "latitude": 51.500828,
      "longitude": -0.233557,
      "elevation": 9.424591
    },
    {
      "latitude": 51.500813,
      "longitude": -0.233599,
      "elevation": 9.441821
    },
    {
      "latitude": 51.500805,
      "longitude": -0.233639,
      "elevation": 9.415431
    },
    {
      "latitude": 51.500793,
      "longitude": -0.233679,
      "elevation": 9.42228
    },
    {
      "latitude": 51.500786,
      "longitude": -0.233718,
      "elevation": 9.36004
    },
    {
      "latitude": 51.50078,
      "longitude": -0.233756,
      "elevation": 9.293868
    },
    {
      "latitude": 51.50077,
      "longitude": -0.233792,
      "elevation": 9.303627
    },
    {
      "latitude": 51.500767,
      "longitude": -0.233828,
      "elevation": 9.273142
    },
    {
      "latitude": 51.50076,
      "longitude": -0.233864,
      "elevation": 9.243354
    },
    {
      "latitude": 51.500755,
      "longitude": -0.233899,
      "elevation": 9.2425585
    },
    {
      "latitude": 51.50075,
      "longitude": -0.233934,
      "elevation": 9.213379
    },
    {
      "latitude": 51.500744,
      "longitude": -0.23397,
      "elevation": 9.206921
    },
    {
      "latitude": 51.500732,
      "longitude": -0.234008,
      "elevation": 9.197896
    },
    {
      "latitude": 51.50072,
      "longitude": -0.234046,
      "elevation": 9.129932
    },
    {
      "latitude": 51.50071,
      "longitude": -0.234086,
      "elevation": 9.101135
    },
    {
      "latitude": 51.500694,
      "longitude": -0.234128,
      "elevation": 9.071155
    },
    {
      "latitude": 51.500683,
      "longitude": -0.234173,
      "elevation": 9.060835
    },
    {
      "latitude": 51.500675,
      "longitude": -0.23422,
      "elevation": 9.041228
    },
    {
      "latitude": 51.500668,
      "longitude": -0.234268,
      "elevation": 9.039048
    },
    {
      "latitude": 51.500656,
      "longitude": -0.234315,
      "elevation": 9.073289
    },
    {
      "latitude": 51.50065,
      "longitude": -0.234361,
      "elevation": 9.053543
    },
    {
      "latitude": 51.500637,
      "longitude": -0.234408,
      "elevation": 9.050794
    },
    {
      "latitude": 51.500626,
      "longitude": -0.234457,
      "elevation": 9.063505
    },
    {
      "latitude": 51.500614,
      "longitude": -0.234509,
      "elevation": 9.041261
    },
    {
      "latitude": 51.5006,
      "longitude": -0.234561,
      "elevation": 9.065523
    },
    {
      "latitude": 51.500584,
      "longitude": -0.234614,
      "elevation": 9.05617
    },
    {
      "latitude": 51.50057,
      "longitude": -0.234666,
      "elevation": 9.045634
    },
    {
      "latitude": 51.500553,
      "longitude": -0.234716,
      "elevation": 9.03376
    },
    {
      "latitude": 51.500538,
      "longitude": -0.234765,
      "elevation": 9.041682
    },
    {
      "latitude": 51.500526,
      "longitude": -0.234813,
      "elevation": 9.026047
    },
    {
      "latitude": 51.500507,
      "longitude": -0.23486,
      "elevation": 9.024566
    },
    {
      "latitude": 51.500492,
      "longitude": -0.234905,
      "elevation": 9.012364
    },
    {
      "latitude": 51.500477,
      "longitude": -0.234951,
      "elevation": 8.991736
    },
    {
      "latitude": 51.500458,
      "longitude": -0.234996,
      "elevation": 8.974246
    },
    {
      "latitude": 51.500443,
      "longitude": -0.235041,
      "elevation": 8.973317
    },
    {
      "latitude": 51.500427,
      "longitude": -0.235087,
      "elevation": 8.97371
    },
    {
      "latitude": 51.500416,
      "longitude": -0.235135,
      "elevation": 8.967977
    },
    {
      "latitude": 51.500404,
      "longitude": -0.235185,
      "elevation": 8.953392
    },
    {
      "latitude": 51.500397,
      "longitude": -0.235235,
      "elevation": 8.950394
    },
    {
      "latitude": 51.50039,
      "longitude": -0.235285,
      "elevation": 8.921355
    },
    {
      "latitude": 51.50038,
      "longitude": -0.235334,
      "elevation": 8.946389
    },
    {
      "latitude": 51.500374,
      "longitude": -0.235384,
      "elevation": 8.9590435
    },
    {
      "latitude": 51.500366,
      "longitude": -0.235433,
      "elevation": 8.971375
    },
    {
      "latitude": 51.500362,
      "longitude": -0.235484,
      "elevation": 8.984252
    },
    {
      "latitude": 51.50036,
      "longitude": -0.235535,
      "elevation": 8.962154
    },
    {
      "latitude": 51.50036,
      "longitude": -0.235585,
      "elevation": 8.928011
    },
    {
      "latitude": 51.500355,
      "longitude": -0.235636,
      "elevation": 8.911101
    },
    {
      "latitude": 51.50035,
      "longitude": -0.235685,
      "elevation": 8.89083
    },
    {
      "latitude": 51.500343,
      "longitude": -0.235735,
      "elevation": 8.866877
    },
    {
      "latitude": 51.50034,
      "longitude": -0.235784,
      "elevation": 8.786587
    },
    {
      "latitude": 51.500328,
      "longitude": -0.235834,
      "elevation": 8.91173
    },
    {
      "latitude": 51.500317,
      "longitude": -0.235885,
      "elevation": 8.852909
    },
    {
      "latitude": 51.5003,
      "longitude": -0.235935,
      "elevation": 8.829406
    },
    {
      "latitude": 51.50029,
      "longitude": -0.235979,
      "elevation": 8.478484
    },
    {
      "latitude": 51.500286,
      "longitude": -0.236029,
      "elevation": 8.238511
    },
    {
      "latitude": 51.500282,
      "longitude": -0.236079,
      "elevation": 8.244451
    },
    {
      "latitude": 51.500282,
      "longitude": -0.236127,
      "elevation": 8.105106
    },
    {
      "latitude": 51.500282,
      "longitude": -0.236175,
      "elevation": 8.254669
    },
    {
      "latitude": 51.500275,
      "longitude": -0.236223,
      "elevation": 8.112017
    },
    {
      "latitude": 51.500263,
      "longitude": -0.236272,
      "elevation": 8.411848
    },
    {
      "latitude": 51.50025,
      "longitude": -0.236322,
      "elevation": 8.694554
    },
    {
      "latitude": 51.500237,
      "longitude": -0.236373,
      "elevation": 8.709754
    },
    {
      "latitude": 51.500225,
      "longitude": -0.236426,
      "elevation": 8.722607
    },
    {
      "latitude": 51.500214,
      "longitude": -0.23648,
      "elevation": 8.733103
    },
    {
      "latitude": 51.500202,
      "longitude": -0.236534,
      "elevation": 8.883457
    },
    {
      "latitude": 51.500195,
      "longitude": -0.236587,
      "elevation": 8.747339
    },
    {
      "latitude": 51.500187,
      "longitude": -0.236639,
      "elevation": 8.597794
    },
    {
      "latitude": 51.50018,
      "longitude": -0.236689,
      "elevation": 8.754334
    },
    {
      "latitude": 51.500168,
      "longitude": -0.236738,
      "elevation": 8.905912
    },
    {
      "latitude": 51.500156,
      "longitude": -0.236785,
      "elevation": 9.188977
    },
    {
      "latitude": 51.50015,
      "longitude": -0.236832,
      "elevation": 9.189735
    },
    {
      "latitude": 51.500137,
      "longitude": -0.236879,
      "elevation": 9.438378
    },
    {
      "latitude": 51.50013,
      "longitude": -0.236926,
      "elevation": 9.317421
    },
    {
      "latitude": 51.50012,
      "longitude": -0.236974,
      "elevation": 9.3150625
    },
    {
      "latitude": 51.500114,
      "longitude": -0.237021,
      "elevation": 9.536311
    },
    {
      "latitude": 51.500107,
      "longitude": -0.237069,
      "elevation": 9.62455
    },
    {
      "latitude": 51.500103,
      "longitude": -0.237115,
      "elevation": 9.6981535
    },
    {
      "latitude": 51.5001,
      "longitude": -0.237161,
      "elevation": 9.682965
    },
    {
      "latitude": 51.5001,
      "longitude": -0.237206,
      "elevation": 9.803316
    },
    {
      "latitude": 51.5001,
      "longitude": -0.237252,
      "elevation": 9.836364
    },
    {
      "latitude": 51.5001,
      "longitude": -0.237298,
      "elevation": 9.550577
    },
    {
      "latitude": 51.5001,
      "longitude": -0.237344,
      "elevation": 9.135732
    },
    {
      "latitude": 51.500107,
      "longitude": -0.237392,
      "elevation": 9.125498
    },
    {
      "latitude": 51.500107,
      "longitude": -0.237438,
      "elevation": 9.115672
    },
    {
      "latitude": 51.500107,
      "longitude": -0.237479,
      "elevation": 9.214349
    },
    {
      "latitude": 51.500103,
      "longitude": -0.237516,
      "elevation": 9.306414
    },
    {
      "latitude": 51.5001,
      "longitude": -0.237554,
      "elevation": 9.474638
    },
    {
      "latitude": 51.500095,
      "longitude": -0.237594,
      "elevation": 9.609215
    },
    {
      "latitude": 51.500084,
      "longitude": -0.237637,
      "elevation": 9.714241
    },
    {
      "latitude": 51.50007,
      "longitude": -0.237681,
      "elevation": 9.66682
    },
    {
      "latitude": 51.50004,
      "longitude": -0.237726,
      "elevation": 9.609315
    },
    {
      "latitude": 51.50001,
      "longitude": -0.237774,
      "elevation": 9.473001
    },
    {
      "latitude": 51.499992,
      "longitude": -0.237827,
      "elevation": 9.105515
    },
    {
      "latitude": 51.499973,
      "longitude": -0.237884,
      "elevation": 8.993655
    },
    {
      "latitude": 51.499958,
      "longitude": -0.237941,
      "elevation": 9.117078
    },
    {
      "latitude": 51.499947,
      "longitude": -0.237995,
      "elevation": 8.871036
    },
    {
      "latitude": 51.499943,
      "longitude": -0.238045,
      "elevation": 9.001733
    },
    {
      "latitude": 51.49994,
      "longitude": -0.238093,
      "elevation": 9.003033
    },
    {
      "latitude": 51.49993,
      "longitude": -0.23814,
      "elevation": 8.873924
    },
    {
      "latitude": 51.499928,
      "longitude": -0.23819,
      "elevation": 9.005847
    },
    {
      "latitude": 51.49992,
      "longitude": -0.238244,
      "elevation": 9.0078535
    },
    {
      "latitude": 51.49991,
      "longitude": -0.238299,
      "elevation": 9.010072
    },
    {
      "latitude": 51.4999,
      "longitude": -0.238351,
      "elevation": 9.135601
    },
    {
      "latitude": 51.49989,
      "longitude": -0.238401,
      "elevation": 9.25091
    },
    {
      "latitude": 51.499874,
      "longitude": -0.238448,
      "elevation": 9.252442
    },
    {
      "latitude": 51.499866,
      "longitude": -0.238496,
      "elevation": 9.357747
    },
    {
      "latitude": 51.499855,
      "longitude": -0.238543,
      "elevation": 9.3580265
    },
    {
      "latitude": 51.499844,
      "longitude": -0.238592,
      "elevation": 9.451706
    },
    {
      "latitude": 51.499836,
      "longitude": -0.238642,
      "elevation": 9.534784
    },
    {
      "latitude": 51.49983,
      "longitude": -0.238691,
      "elevation": 9.607342
    },
    {
      "latitude": 51.49982,
      "longitude": -0.238739,
      "elevation": 9.670227
    },
    {
      "latitude": 51.499813,
      "longitude": -0.238785,
      "elevation": 9.599271
    },
    {
      "latitude": 51.499805,
      "longitude": -0.238828,
      "elevation": 9.660912
    },
    {
      "latitude": 51.4998,
      "longitude": -0.238873,
      "elevation": 9.514507
    },
    {
      "latitude": 51.49981,
      "longitude": -0.23892,
      "elevation": 9.506516
    },
    {
      "latitude": 51.49981,
      "longitude": -0.238954,
      "elevation": 9.573507
    },
    {
      "latitude": 51.49981,
      "longitude": -0.238984,
      "elevation": 9.569111
    },
    {
      "latitude": 51.4998,
      "longitude": -0.23902,
      "elevation": 9.627409
    },
    {
      "latitude": 51.499794,
      "longitude": -0.239064,
      "elevation": 9.675734
    },
    {
      "latitude": 51.49978,
      "longitude": -0.239113,
      "elevation": 9.756232
    },
    {
      "latitude": 51.499763,
      "longitude": -0.239163,
      "elevation": 9.744291
    },
    {
      "latitude": 51.49975,
      "longitude": -0.239214,
      "elevation": 9.702128
    },
    {
      "latitude": 51.499737,
      "longitude": -0.239265,
      "elevation": 9.702128
    },
    {
      "latitude": 51.499725,
      "longitude": -0.239315,
      "elevation": 9.702128
    },
    {
      "latitude": 51.499714,
      "longitude": -0.239364,
      "elevation": 9.654903
    },
    {
      "latitude": 51.499702,
      "longitude": -0.239413,
      "elevation": 9.600998
    },
    {
      "latitude": 51.499687,
      "longitude": -0.239461,
      "elevation": 9.470445
    },
    {
      "latitude": 51.499672,
      "longitude": -0.239508,
      "elevation": 9.305413
    },
    {
      "latitude": 51.499657,
      "longitude": -0.239554,
      "elevation": 9.102256
    },
    {
      "latitude": 51.49964,
      "longitude": -0.2396,
      "elevation": 8.860168
    },
    {
      "latitude": 51.499622,
      "longitude": -0.239645,
      "elevation": 8.860168
    },
    {
      "latitude": 51.49961,
      "longitude": -0.23969,
      "elevation": 8.860168
    },
    {
      "latitude": 51.4996,
      "longitude": -0.239734,
      "elevation": 8.725415
    },
    {
      "latitude": 51.49959,
      "longitude": -0.239777,
      "elevation": 8.725415
    },
    {
      "latitude": 51.49958,
      "longitude": -0.23982,
      "elevation": 8.433036
    },
    {
      "latitude": 51.499573,
      "longitude": -0.239862,
      "elevation": 8.278185
    },
    {
      "latitude": 51.49956,
      "longitude": -0.239904,
      "elevation": 8.119856
    },
    {
      "latitude": 51.49955,
      "longitude": -0.239945,
      "elevation": 8.119856
    },
    {
      "latitude": 51.499542,
      "longitude": -0.239987,
      "elevation": 8.119856
    },
    {
      "latitude": 51.499535,
      "longitude": -0.240029,
      "elevation": 8.119856
    },
    {
      "latitude": 51.499523,
      "longitude": -0.240071,
      "elevation": 8.119856
    },
    {
      "latitude": 51.499516,
      "longitude": -0.240113,
      "elevation": 7.9600053
    },
    {
      "latitude": 51.499508,
      "longitude": -0.240155,
      "elevation": 7.800664
    },
    {
      "latitude": 51.4995,
      "longitude": -0.240197,
      "elevation": 8.119856
    },
    {
      "latitude": 51.49949,
      "longitude": -0.240239,
      "elevation": 8.725415
    },
    {
      "latitude": 51.499477,
      "longitude": -0.24028,
      "elevation": 8.725415
    },
    {
      "latitude": 51.499462,
      "longitude": -0.240321,
      "elevation": 8.725415
    },
    {
      "latitude": 51.49945,
      "longitude": -0.240362,
      "elevation": 8.582625
    },
    {
      "latitude": 51.49943,
      "longitude": -0.240403,
      "elevation": 8.433036
    },
    {
      "latitude": 51.499416,
      "longitude": -0.240444,
      "elevation": 8.433036
    },
    {
      "latitude": 51.499405,
      "longitude": -0.240485,
      "elevation": 8.433036
    },
    {
      "latitude": 51.499393,
      "longitude": -0.240527,
      "elevation": 8.860168
    },
    {
      "latitude": 51.499386,
      "longitude": -0.240569,
      "elevation": 9.208735
    },
    {
      "latitude": 51.499382,
      "longitude": -0.240612,
      "elevation": 8.985976
    },
    {
      "latitude": 51.49938,
      "longitude": -0.240656,
      "elevation": 8.860168
    },
    {
      "latitude": 51.49938,
      "longitude": -0.240701,
      "elevation": 8.725415
    },
    {
      "latitude": 51.499374,
      "longitude": -0.240746,
      "elevation": 8.860168
    },
    {
      "latitude": 51.49937,
      "longitude": -0.240791,
      "elevation": 8.860168
    },
    {
      "latitude": 51.499363,
      "longitude": -0.240838,
      "elevation": 8.582625
    },
    {
      "latitude": 51.49936,
      "longitude": -0.240887,
      "elevation": 8.433036
    },
    {
      "latitude": 51.499355,
      "longitude": -0.24094,
      "elevation": 8.278185
    },
    {
      "latitude": 51.499348,
      "longitude": -0.240994,
      "elevation": 8.119856
    },
    {
      "latitude": 51.499332,
      "longitude": -0.241047,
      "elevation": 8.119856
    },
    {
      "latitude": 51.49931,
      "longitude": -0.2411,
      "elevation": 8.278185
    },
    {
      "latitude": 51.49929,
      "longitude": -0.24115,
      "elevation": 8.433036
    },
    {
      "latitude": 51.499275,
      "longitude": -0.241198,
      "elevation": 8.725415
    },
    {
      "latitude": 51.499268,
      "longitude": -0.241245,
      "elevation": 8.860168
    },
    {
      "latitude": 51.49926,
      "longitude": -0.241293,
      "elevation": 8.582625
    },
    {
      "latitude": 51.49925,
      "longitude": -0.241342,
      "elevation": 8.582625
    },
    {
      "latitude": 51.49924,
      "longitude": -0.241392,
      "elevation": 8.725415
    },
    {
      "latitude": 51.499226,
      "longitude": -0.241441,
      "elevation": 8.725415
    },
    {
      "latitude": 51.49921,
      "longitude": -0.241489,
      "elevation": 8.582625
    },
    {
      "latitude": 51.499195,
      "longitude": -0.241536,
      "elevation": 8.582625
    },
    {
      "latitude": 51.499176,
      "longitude": -0.241583,
      "elevation": 8.433036
    },
    {
      "latitude": 51.49916,
      "longitude": -0.241628,
      "elevation": 8.433036
    },
    {
      "latitude": 51.499146,
      "longitude": -0.241674,
      "elevation": 8.433036
    },
    {
      "latitude": 51.499134,
      "longitude": -0.24172,
      "elevation": 8.278185
    },
    {
      "latitude": 51.499126,
      "longitude": -0.241767,
      "elevation": 7.800664
    },
    {
      "latitude": 51.499123,
      "longitude": -0.241815,
      "elevation": 8.119856
    },
    {
      "latitude": 51.499123,
      "longitude": -0.241862,
      "elevation": 8.278185
    },
    {
      "latitude": 51.49912,
      "longitude": -0.24191,
      "elevation": 8.433036
    },
    {
      "latitude": 51.499115,
      "longitude": -0.241958,
      "elevation": 8.582625
    },
    {
      "latitude": 51.49911,
      "longitude": -0.242006,
      "elevation": 8.860168
    },
    {
      "latitude": 51.4991,
      "longitude": -0.242054,
      "elevation": 8.725415
    },
    {
      "latitude": 51.49909,
      "longitude": -0.242102,
      "elevation": 8.582625
    },
    {
      "latitude": 51.499073,
      "longitude": -0.242149,
      "elevation": 8.433036
    },
    {
      "latitude": 51.499054,
      "longitude": -0.242197,
      "elevation": 8.433036
    },
    {
      "latitude": 51.49904,
      "longitude": -0.242245,
      "elevation": 8.582625
    },
    {
      "latitude": 51.49902,
      "longitude": -0.242294,
      "elevation": 8.433036
    },
    {
      "latitude": 51.499,
      "longitude": -0.242342,
      "elevation": 8.433036
    },
    {
      "latitude": 51.498985,
      "longitude": -0.242392,
      "elevation": 8.433036
    },
    {
      "latitude": 51.498974,
      "longitude": -0.242442,
      "elevation": 8.725415
    },
    {
      "latitude": 51.498966,
      "longitude": -0.242493,
      "elevation": 8.860168
    },
    {
      "latitude": 51.498955,
      "longitude": -0.242545,
      "elevation": 8.725415
    },
    {
      "latitude": 51.49893,
      "longitude": -0.242597,
      "elevation": 8.433036
    },
    {
      "latitude": 51.4989,
      "longitude": -0.242647,
      "elevation": 7.6438384
    },
    {
      "latitude": 51.49888,
      "longitude": -0.242691,
      "elevation": 7.345045
    },
    {
      "latitude": 51.498867,
      "longitude": -0.242732,
      "elevation": 7.345045
    },
    {
      "latitude": 51.498863,
      "longitude": -0.242774,
      "elevation": 7.0757656
    },
    {
      "latitude": 51.49886,
      "longitude": -0.242813,
      "elevation": 6.954669
    },
    {
      "latitude": 51.498856,
      "longitude": -0.242851,
      "elevation": 7.0757656
    },
    {
      "latitude": 51.498848,
      "longitude": -0.24289,
      "elevation": 7.0757656
    },
    {
      "latitude": 51.498837,
      "longitude": -0.242934,
      "elevation": 7.0757656
    },
    {
      "latitude": 51.498825,
      "longitude": -0.24298,
      "elevation": 7.0757656
    },
    {
      "latitude": 51.498814,
      "longitude": -0.243028,
      "elevation": 7.206139
    },
    {
      "latitude": 51.498802,
      "longitude": -0.243075,
      "elevation": 7.345045
    },
    {
      "latitude": 51.498795,
      "longitude": -0.243119,
      "elevation": 7.491409
    },
    {
      "latitude": 51.49879,
      "longitude": -0.243159,
      "elevation": 7.491409
    },
    {
      "latitude": 51.498783,
      "longitude": -0.243195,
      "elevation": 7.6438384
    },
    {
      "latitude": 51.498775,
      "longitude": -0.24323,
      "elevation": 7.9600053
    },
    {
      "latitude": 51.498756,
      "longitude": -0.243265,
      "elevation": 8.119856
    },
    {
      "latitude": 51.49873,
      "longitude": -0.243302,
      "elevation": 8.278185
    },
    {
      "latitude": 51.498688,
      "longitude": -0.243343,
      "elevation": 8.432719
    },
    {
      "latitude": 51.498642,
      "longitude": -0.243387,
      "elevation": 8.277284
    },
    {
      "latitude": 51.498604,
      "longitude": -0.243433,
      "elevation": 7.800142
    },
    {
      "latitude": 51.498585,
      "longitude": -0.243481,
      "elevation": 6.923665
    },
    {
      "latitude": 51.498573,
      "longitude": -0.243528,
      "elevation": 6.4044056
    },
    {
      "latitude": 51.498577,
      "longitude": -0.243572,
      "elevation": 6.385666
    },
    {
      "latitude": 51.498585,
      "longitude": -0.243615,
      "elevation": 6.6587377
    },
    {
      "latitude": 51.498596,
      "longitude": -0.243656,
      "elevation": 7.514288
    },
    {
      "latitude": 51.498615,
      "longitude": -0.243687,
      "elevation": 8.514288
    },
    {
      "latitude": 51.49864,
      "longitude": -0.243707,
      "elevation": 9.24122
    },
    {
      "latitude": 51.49866,
      "longitude": -0.243722,
      "elevation": 9.16991
    },
    {
      "latitude": 51.498676,
      "longitude": -0.243738,
      "elevation": 9.168361
    },
    {
      "latitude": 51.498684,
      "longitude": -0.243764,
      "elevation": 9.349421
    },
    {
      "latitude": 51.49869,
      "longitude": -0.243804,
      "elevation": 9.148786
    },
    {
      "latitude": 51.498688,
      "longitude": -0.24385,
      "elevation": 9.055139
    },
    {
      "latitude": 51.498684,
      "longitude": -0.243893,
      "elevation": 8.95477
    },
    {
      "latitude": 51.498672,
      "longitude": -0.243933,
      "elevation": 8.748096
    },
    {
      "latitude": 51.498665,
      "longitude": -0.243971,
      "elevation": 8.627517
    },
    {
      "latitude": 51.49865,
      "longitude": -0.244012,
      "elevation": 8.614871
    },
    {
      "latitude": 51.49864,
      "longitude": -0.244058,
      "elevation": 8.235483
    },
    {
      "latitude": 51.49863,
      "longitude": -0.24411,
      "elevation": 7.945878
    },
    {
      "latitude": 51.498623,
      "longitude": -0.244167,
      "elevation": 7.792439
    },
    {
      "latitude": 51.49861,
      "longitude": -0.244225,
      "elevation": 7.637671
    },
    {
      "latitude": 51.4986,
      "longitude": -0.244283,
      "elevation": 7.6372666
    },
    {
      "latitude": 51.498585,
      "longitude": -0.244337,
      "elevation": 7.6367846
    },
    {
      "latitude": 51.49857,
      "longitude": -0.244389,
      "elevation": 7.788924
    },
    {
      "latitude": 51.498558,
      "longitude": -0.244439,
      "elevation": 7.635863
    },
    {
      "latitude": 51.498547,
      "longitude": -0.244488,
      "elevation": 7.787082
    },
    {
      "latitude": 51.49854,
      "longitude": -0.244537,
      "elevation": 7.7862234
    },
    {
      "latitude": 51.498528,
      "longitude": -0.244587,
      "elevation": 7.6345453
    },
    {
      "latitude": 51.49852,
      "longitude": -0.244639,
      "elevation": 7.478611
    },
    {
      "latitude": 51.498512,
      "longitude": -0.244692,
      "elevation": 7.319902
    },
    {
      "latitude": 51.498505,
      "longitude": -0.244745,
      "elevation": 7.319873
    },
    {
      "latitude": 51.498497,
      "longitude": -0.244796,
      "elevation": 7.478138
    },
    {
      "latitude": 51.498493,
      "longitude": -0.244846,
      "elevation": 7.3198237
    },
    {
      "latitude": 51.49849,
      "longitude": -0.244892,
      "elevation": 7.319803
    },
    {
      "latitude": 51.498486,
      "longitude": -0.244936,
      "elevation": 7.319787
    },
    {
      "latitude": 51.49848,
      "longitude": -0.244978,
      "elevation": 7.3197637
    },
    {
      "latitude": 51.498474,
      "longitude": -0.245019,
      "elevation": 7.160002
    },
    {
      "latitude": 51.498466,
      "longitude": -0.245062,
      "elevation": 6.8446493
    },
    {
      "latitude": 51.49846,
      "longitude": -0.245105,
      "elevation": 6.2882285
    },
    {
      "latitude": 51.498444,
      "longitude": -0.245149,
      "elevation": 6.073783
    },
    {
      "latitude": 51.49843,
      "longitude": -0.245193,
      "elevation": 5.9066076
    },
    {
      "latitude": 51.498417,
      "longitude": -0.245236,
      "elevation": 5.8501587
    },
    {
      "latitude": 51.4984,
      "longitude": -0.245281,
      "elevation": 5.8716154
    },
    {
      "latitude": 51.498386,
      "longitude": -0.245329,
      "elevation": 6.0441236
    },
    {
      "latitude": 51.49837,
      "longitude": -0.245378,
      "elevation": 6.0663123
    },
    {
      "latitude": 51.49836,
      "longitude": -0.245424,
      "elevation": 6.0894227
    },
    {
      "latitude": 51.49835,
      "longitude": -0.245464,
      "elevation": 6.1109138
    },
    {
      "latitude": 51.49834,
      "longitude": -0.245503,
      "elevation": 6.0645704
    },
    {
      "latitude": 51.498333,
      "longitude": -0.245545,
      "elevation": 6.093063
    },
    {
      "latitude": 51.49832,
      "longitude": -0.24559,
      "elevation": 6.072752
    },
    {
      "latitude": 51.498306,
      "longitude": -0.245636,
      "elevation": 6.165681
    },
    {
      "latitude": 51.498295,
      "longitude": -0.24568,
      "elevation": 6.2593894
    },
    {
      "latitude": 51.498276,
      "longitude": -0.245725,
      "elevation": 6.2373137
    },
    {
      "latitude": 51.498253,
      "longitude": -0.24577,
      "elevation": 6.2728057
    },
    {
      "latitude": 51.498234,
      "longitude": -0.245816,
      "elevation": 6.3078346
    },
    {
      "latitude": 51.49821,
      "longitude": -0.245862,
      "elevation": 6.2765536
    },
    {
      "latitude": 51.49819,
      "longitude": -0.24591,
      "elevation": 6.2765536
    },
    {
      "latitude": 51.498173,
      "longitude": -0.245957,
      "elevation": 6.2765536
    },
    {
      "latitude": 51.498154,
      "longitude": -0.246004,
      "elevation": 6.3206916
    },
    {
      "latitude": 51.49814,
      "longitude": -0.246051,
      "elevation": 6.371172
    },
    {
      "latitude": 51.498123,
      "longitude": -0.246098,
      "elevation": 6.371172
    },
    {
      "latitude": 51.498108,
      "longitude": -0.246143,
      "elevation": 6.4286723
    },
    {
      "latitude": 51.498096,
      "longitude": -0.246186,
      "elevation": 6.4286723
    },
    {
      "latitude": 51.49808,
      "longitude": -0.246228,
      "elevation": 6.4286723
    },
    {
      "latitude": 51.498066,
      "longitude": -0.246269,
      "elevation": 6.4938684
    },
    {
      "latitude": 51.49805,
      "longitude": -0.246309,
      "elevation": 6.4938684
    },
    {
      "latitude": 51.49804,
      "longitude": -0.246349,
      "elevation": 6.4938684
    },
    {
      "latitude": 51.498028,
      "longitude": -0.246387,
      "elevation": 6.4286723
    },
    {
      "latitude": 51.498013,
      "longitude": -0.246423,
      "elevation": 6.4938684
    },
    {
      "latitude": 51.498,
      "longitude": -0.246462,
      "elevation": 6.4286723
    },
    {
      "latitude": 51.497986,
      "longitude": -0.246508,
      "elevation": 6.4938684
    },
    {
      "latitude": 51.497963,
      "longitude": -0.246565,
      "elevation": 6.4938684
    },
    {
      "latitude": 51.497944,
      "longitude": -0.246621,
      "elevation": 6.5674043
    },
    {
      "latitude": 51.49793,
      "longitude": -0.246666,
      "elevation": 6.6498604
    },
    {
      "latitude": 51.497913,
      "longitude": -0.246703,
      "elevation": 6.5675473
    },
    {
      "latitude": 51.4979,
      "longitude": -0.246743,
      "elevation": 6.6515326
    },
    {
      "latitude": 51.497883,
      "longitude": -0.246792,
      "elevation": 6.746403
    },
    {
      "latitude": 51.497868,
      "longitude": -0.246844,
      "elevation": 6.751872
    },
    {
      "latitude": 51.497852,
      "longitude": -0.246893,
      "elevation": 7.085092
    },
    {
      "latitude": 51.497837,
      "longitude": -0.246938,
      "elevation": 7.216604
    },
    {
      "latitude": 51.49782,
      "longitude": -0.246982,
      "elevation": 7.3553762
    },
    {
      "latitude": 51.497807,
      "longitude": -0.247024,
      "elevation": 7.2261
    },
    {
      "latitude": 51.49779,
      "longitude": -0.247068,
      "elevation": 7.110372
    },
    {
      "latitude": 51.497776,
      "longitude": -0.247113,
      "elevation": 6.9100323
    },
    {
      "latitude": 51.49776,
      "longitude": -0.247159,
      "elevation": 6.6905646
    },
    {
      "latitude": 51.49774,
      "longitude": -0.247205,
      "elevation": 6.6588764
    },
    {
      "latitude": 51.497726,
      "longitude": -0.247249,
      "elevation": 6.597629
    },
    {
      "latitude": 51.497707,
      "longitude": -0.247292,
      "elevation": 6.604541
    },
    {
      "latitude": 51.49769,
      "longitude": -0.247332,
      "elevation": 6.621087
    },
    {
      "latitude": 51.49767,
      "longitude": -0.247371,
      "elevation": 6.6744227
    },
    {
      "latitude": 51.49765,
      "longitude": -0.247408,
      "elevation": 6.78482
    },
    {
      "latitude": 51.497635,
      "longitude": -0.247445,
      "elevation": 6.8377585
    },
    {
      "latitude": 51.49762,
      "longitude": -0.247483,
      "elevation": 6.86185
    },
    {
      "latitude": 51.49761,
      "longitude": -0.247523,
      "elevation": 6.922833
    },
    {
      "latitude": 51.497597,
      "longitude": -0.247564,
      "elevation": 7.012749
    },
    {
      "latitude": 51.49758,
      "longitude": -0.247605,
      "elevation": 7.124644
    },
    {
      "latitude": 51.49756,
      "longitude": -0.247645,
      "elevation": 7.3992395
    },
    {
      "latitude": 51.49753,
      "longitude": -0.247686,
      "elevation": 7.364708
    },
    {
      "latitude": 51.49751,
      "longitude": -0.247727,
      "elevation": 7.4000807
    },
    {
      "latitude": 51.497486,
      "longitude": -0.24777,
      "elevation": 7.4030733
    },
    {
      "latitude": 51.497463,
      "longitude": -0.247814,
      "elevation": 7.3290505
    },
    {
      "latitude": 51.49744,
      "longitude": -0.24786,
      "elevation": 7.31166
    },
    {
      "latitude": 51.497425,
      "longitude": -0.247903,
      "elevation": 7.358911
    },
    {
      "latitude": 51.497417,
      "longitude": -0.247938,
      "elevation": 7.3524227
    },
    {
      "latitude": 51.49741,
      "longitude": -0.247968,
      "elevation": 7.493915
    },
    {
      "latitude": 51.4974,
      "longitude": -0.247996,
      "elevation": 7.4095554
    },
    {
      "latitude": 51.497375,
      "longitude": -0.248028,
      "elevation": 7.4742417
    },
    {
      "latitude": 51.49735,
      "longitude": -0.248067,
      "elevation": 7.376488
    },
    {
      "latitude": 51.497322,
      "longitude": -0.248118,
      "elevation": 7.4436965
    },
    {
      "latitude": 51.4973,
      "longitude": -0.248175,
      "elevation": 7.2701178
    },
    {
      "latitude": 51.497276,
      "longitude": -0.248232,
      "elevation": 7.3335233
    },
    {
      "latitude": 51.497257,
      "longitude": -0.248285,
      "elevation": 7.4101763
    },
    {
      "latitude": 51.49724,
      "longitude": -0.248334,
      "elevation": 7.2314515
    },
    {
      "latitude": 51.49722,
      "longitude": -0.248378,
      "elevation": 7.3170624
    },
    {
      "latitude": 51.497204,
      "longitude": -0.248417,
      "elevation": 7.3211637
    },
    {
      "latitude": 51.49719,
      "longitude": -0.248452,
      "elevation": 7.411747
    },
    {
      "latitude": 51.497173,
      "longitude": -0.248488,
      "elevation": 7.51192
    },
    {
      "latitude": 51.497158,
      "longitude": -0.248533,
      "elevation": 7.7370553
    },
    {
      "latitude": 51.497143,
      "longitude": -0.248584,
      "elevation": 7.6245117
    },
    {
      "latitude": 51.497124,
      "longitude": -0.248638,
      "elevation": 7.8651104
    },
    {
      "latitude": 51.497105,
      "longitude": -0.248688,
      "elevation": 8.442496
    },
    {
      "latitude": 51.49709,
      "longitude": -0.248736,
      "elevation": 8.919628
    },
    {
      "latitude": 51.497078,
      "longitude": -0.248786,
      "elevation": 8.76
    },
    {
      "latitude": 51.497066,
      "longitude": -0.248835,
      "elevation": 8.600391
    },
    {
      "latitude": 51.497055,
      "longitude": -0.248883,
      "elevation": 8.76
    },
    {
      "latitude": 51.497044,
      "longitude": -0.248926,
      "elevation": 8.443037
    },
    {
      "latitude": 51.497032,
      "longitude": -0.248968,
      "elevation": 8.443082
    },
    {
      "latitude": 51.497025,
      "longitude": -0.24901,
      "elevation": 8.443153
    },
    {
      "latitude": 51.497017,
      "longitude": -0.249053,
      "elevation": 8.6005125
    },
    {
      "latitude": 51.49701,
      "longitude": -0.249097,
      "elevation": 8.600586
    },
    {
      "latitude": 51.497005,
      "longitude": -0.249143,
      "elevation": 8.919858
    },
    {
      "latitude": 51.496998,
      "longitude": -0.249192,
      "elevation": 9.078138
    },
    {
      "latitude": 51.49699,
      "longitude": -0.249244,
      "elevation": 9.231975
    },
    {
      "latitude": 51.496983,
      "longitude": -0.249298,
      "elevation": 9.077216
    },
    {
      "latitude": 51.49697,
      "longitude": -0.249352,
      "elevation": 8.759998
    },
    {
      "latitude": 51.49696,
      "longitude": -0.249407,
      "elevation": 8.919136
    },
    {
      "latitude": 51.496944,
      "longitude": -0.24946,
      "elevation": 8.600026
    },
    {
      "latitude": 51.49693,
      "longitude": -0.249511,
      "elevation": 8.130601
    },
    {
      "latitude": 51.49691,
      "longitude": -0.249561,
      "elevation": 8.282431
    },
    {
      "latitude": 51.4969,
      "longitude": -0.249609,
      "elevation": 8.599991
    },
    {
      "latitude": 51.496883,
      "longitude": -0.249654,
      "elevation": 8.758808
    },
    {
      "latitude": 51.49687,
      "longitude": -0.249698,
      "elevation": 8.913404
    },
    {
      "latitude": 51.49686,
      "longitude": -0.249745,
      "elevation": 8.912379
    },
    {
      "latitude": 51.496857,
      "longitude": -0.249795,
      "elevation": 9.060143
    },
    {
      "latitude": 51.496853,
      "longitude": -0.249846,
      "elevation": 9.200243
    },
    {
      "latitude": 51.496845,
      "longitude": -0.249897,
      "elevation": 9.331044
    },
    {
      "latitude": 51.49684,
      "longitude": -0.249949,
      "elevation": 9.328102
    },
    {
      "latitude": 51.496834,
      "longitude": -0.25,
      "elevation": 9.557261
    },
    {
      "latitude": 51.496822,
      "longitude": -0.250049,
      "elevation": 9.560693
    },
    {
      "latitude": 51.496807,
      "longitude": -0.250097,
      "elevation": 9.196679
    },
    {
      "latitude": 51.49679,
      "longitude": -0.250144,
      "elevation": 9.197488
    },
    {
      "latitude": 51.49678,
      "longitude": -0.250194,
      "elevation": 9.058979
    },
    {
      "latitude": 51.49677,
      "longitude": -0.250247,
      "elevation": 9.203977
    },
    {
      "latitude": 51.496765,
      "longitude": -0.250302,
      "elevation": 9.065156
    },
    {
      "latitude": 51.49676,
      "longitude": -0.250353,
      "elevation": 8.916017
    },
    {
      "latitude": 51.49676,
      "longitude": -0.250397,
      "elevation": 8.759618
    },
    {
      "latitude": 51.496758,
      "longitude": -0.250436,
      "elevation": 8.759808
    },
    {
      "latitude": 51.496754,
      "longitude": -0.250474,
      "elevation": 8.600018
    },
    {
      "latitude": 51.49675,
      "longitude": -0.250513,
      "elevation": 8.600064
    },
    {
      "latitude": 51.496742,
      "longitude": -0.250553,
      "elevation": 8.600163
    },
    {
      "latitude": 51.496735,
      "longitude": -0.250594,
      "elevation": 8.600345
    },
    {
      "latitude": 51.49673,
      "longitude": -0.250638,
      "elevation": 8.600671
    },
    {
      "latitude": 51.496723,
      "longitude": -0.250685,
      "elevation": 8.601234
    },
    {
      "latitude": 51.496716,
      "longitude": -0.250734,
      "elevation": 8.602125
    },
    {
      "latitude": 51.49671,
      "longitude": -0.250784,
      "elevation": 8.760543
    },
    {
      "latitude": 51.4967,
      "longitude": -0.250834,
      "elevation": 9.079957
    },
    {
      "latitude": 51.496693,
      "longitude": -0.250883,
      "elevation": 9.079957
    },
    {
      "latitude": 51.49668,
      "longitude": -0.250931,
      "elevation": 9.238854
    },
    {
      "latitude": 51.496666,
      "longitude": -0.250978,
      "elevation": 9.394719
    },
    {
      "latitude": 51.49665,
      "longitude": -0.251025,
      "elevation": 9.54427
    },
    {
      "latitude": 51.49663,
      "longitude": -0.251075,
      "elevation": 9.392904
    },
    {
      "latitude": 51.49661,
      "longitude": -0.251125,
      "elevation": 9.391641
    },
    {
      "latitude": 51.49659,
      "longitude": -0.251175,
      "elevation": 9.39024
    },
    {
      "latitude": 51.496574,
      "longitude": -0.251227,
      "elevation": 8.919998
    },
    {
      "latitude": 51.496567,
      "longitude": -0.251284,
      "elevation": 9.079351
    },
    {
      "latitude": 51.49655,
      "longitude": -0.251336,
      "elevation": 9.079131
    },
    {
      "latitude": 51.49653,
      "longitude": -0.251384,
      "elevation": 9.078761
    },
    {
      "latitude": 51.49651,
      "longitude": -0.251432,
      "elevation": 9.23353
    },
    {
      "latitude": 51.496494,
      "longitude": -0.25148,
      "elevation": 8.919828
    },
    {
      "latitude": 51.496483,
      "longitude": -0.251527,
      "elevation": 9.077707
    },
    {
      "latitude": 51.49647,
      "longitude": -0.251573,
      "elevation": 8.76
    },
    {
      "latitude": 51.496456,
      "longitude": -0.251619,
      "elevation": 8.919589
    },
    {
      "latitude": 51.496445,
      "longitude": -0.251662,
      "elevation": 8.919466
    },
    {
      "latitude": 51.496433,
      "longitude": -0.251707,
      "elevation": 9.077494
    },
    {
      "latitude": 51.49642,
      "longitude": -0.251754,
      "elevation": 8.919889
    },
    {
      "latitude": 51.496414,
      "longitude": -0.251805,
      "elevation": 9.235549
    },
    {
      "latitude": 51.496407,
      "longitude": -0.251858,
      "elevation": 9.079631
    },
    {
      "latitude": 51.496395,
      "longitude": -0.251908,
      "elevation": 9.079868
    },
    {
      "latitude": 51.496384,
      "longitude": -0.251957,
      "elevation": 9.238965
    },
    {
      "latitude": 51.49637,
      "longitude": -0.252005,
      "elevation": 9.39647
    },
    {
      "latitude": 51.496357,
      "longitude": -0.252054,
      "elevation": 9.551704
    },
    {
      "latitude": 51.496346,
      "longitude": -0.252105,
      "elevation": 10.111045
    },
    {
      "latitude": 51.49634,
      "longitude": -0.25216,
      "elevation": 9.993861
    },
    {
      "latitude": 51.496338,
      "longitude": -0.252217,
      "elevation": 10.137545
    },
    {
      "latitude": 51.496338,
      "longitude": -0.252275,
      "elevation": 9.867026
    },
    {
      "latitude": 51.496338,
      "longitude": -0.252332,
      "elevation": 9.871277
    },
    {
      "latitude": 51.496338,
      "longitude": -0.252387,
      "elevation": 10.024867
    },
    {
      "latitude": 51.49633,
      "longitude": -0.252437,
      "elevation": 10.02854
    },
    {
      "latitude": 51.49632,
      "longitude": -0.252485,
      "elevation": 9.877416
    },
    {
      "latitude": 51.496307,
      "longitude": -0.252532,
      "elevation": 10.179696
    },
    {
      "latitude": 51.496292,
      "longitude": -0.252577,
      "elevation": 10.177963
    },
    {
      "latitude": 51.496277,
      "longitude": -0.252623,
      "elevation": 10.315604
    },
    {
      "latitude": 51.49626,
      "longitude": -0.25267,
      "elevation": 10.312973
    },
    {
      "latitude": 51.496246,
      "longitude": -0.252719,
      "elevation": 10.43936
    },
    {
      "latitude": 51.496235,
      "longitude": -0.252769,
      "elevation": 10.554675
    },
    {
      "latitude": 51.496223,
      "longitude": -0.25282,
      "elevation": 10.65867
    },
    {
      "latitude": 51.496212,
      "longitude": -0.252871,
      "elevation": 10.54659
    },
    {
      "latitude": 51.4962,
      "longitude": -0.252922,
      "elevation": 10.3006115
    },
    {
      "latitude": 51.496193,
      "longitude": -0.252974,
      "elevation": 10.164299
    },
    {
      "latitude": 51.496185,
      "longitude": -0.253025,
      "elevation": 10.021054
    },
    {
      "latitude": 51.496178,
      "longitude": -0.253076,
      "elevation": 10.161999
    },
    {
      "latitude": 51.496174,
      "longitude": -0.253127,
      "elevation": 10.29399
    },
    {
      "latitude": 51.49617,
      "longitude": -0.253176,
      "elevation": 10.416676
    },
    {
      "latitude": 51.496166,
      "longitude": -0.253225,
      "elevation": 10.415438
    },
    {
      "latitude": 51.496162,
      "longitude": -0.253274,
      "elevation": 10.631681
    },
    {
      "latitude": 51.49616,
      "longitude": -0.253323,
      "elevation": 10.52646
    },
    {
      "latitude": 51.496155,
      "longitude": -0.253372,
      "elevation": 10.632098
    },
    {
      "latitude": 51.496147,
      "longitude": -0.253422,
      "elevation": 10.5312605
    },
    {
      "latitude": 51.496143,
      "longitude": -0.253473,
      "elevation": 10.534679
    },
    {
      "latitude": 51.49614,
      "longitude": -0.253522,
      "elevation": 10.643996
    },
    {
      "latitude": 51.496136,
      "longitude": -0.253571,
      "elevation": 10.165577
    },
    {
      "latitude": 51.49614,
      "longitude": -0.253618,
      "elevation": 10.303338
    },
    {
      "latitude": 51.49613,
      "longitude": -0.253663,
      "elevation": 10.30568
    },
    {
      "latitude": 51.49612,
      "longitude": -0.253708,
      "elevation": 10.436399
    },
    {
      "latitude": 51.496105,
      "longitude": -0.253753,
      "elevation": 10.560145
    },
    {
      "latitude": 51.496082,
      "longitude": -0.253801,
      "elevation": 10.678189
    },
    {
      "latitude": 51.496063,
      "longitude": -0.253853,
      "elevation": 10.791978
    },
    {
      "latitude": 51.496044,
      "longitude": -0.253911,
      "elevation": 10.806754
    },
    {
      "latitude": 51.496033,
      "longitude": -0.25397,
      "elevation": 11.162468
    },
    {
      "latitude": 51.496017,
      "longitude": -0.254026,
      "elevation": 11.311226
    },
    {
      "latitude": 51.496014,
      "longitude": -0.254075,
      "elevation": 11.434999
    },
    {
      "latitude": 51.49601,
      "longitude": -0.25412,
      "elevation": 11.413447
    },
    {
      "latitude": 51.496006,
      "longitude": -0.254167,
      "elevation": 11.079681
    },
    {
      "latitude": 51.496002,
      "longitude": -0.254214,
      "elevation": 10.754576
    },
    {
      "latitude": 51.496002,
      "longitude": -0.254264,
      "elevation": 10.490285
    },
    {
      "latitude": 51.495995,
      "longitude": -0.254317,
      "elevation": 10.4911375
    },
    {
      "latitude": 51.495987,
      "longitude": -0.254372,
      "elevation": 10.492388
    },
    {
      "latitude": 51.49598,
      "longitude": -0.254427,
      "elevation": 10.347608
    },
    {
      "latitude": 51.49597,
      "longitude": -0.254482,
      "elevation": 10.195916
    },
    {
      "latitude": 51.495968,
      "longitude": -0.254537,
      "elevation": 10.494912
    },
    {
      "latitude": 51.49596,
      "longitude": -0.254591,
      "elevation": 10.349176
    },
    {
      "latitude": 51.49595,
      "longitude": -0.254645,
      "elevation": 10.196796
    },
    {
      "latitude": 51.495937,
      "longitude": -0.254698,
      "elevation": 10.197216
    },
    {
      "latitude": 51.495922,
      "longitude": -0.254751,
      "elevation": 10.3517885
    },
    {
      "latitude": 51.495907,
      "longitude": -0.254801,
      "elevation": 10.352694
    },
    {
      "latitude": 51.49589,
      "longitude": -0.254849,
      "elevation": 10.353423
    },
    {
      "latitude": 51.495884,
      "longitude": -0.254892,
      "elevation": 10.353899
    },
    {
      "latitude": 51.49588,
      "longitude": -0.254932,
      "elevation": 10.354153
    },
    {
      "latitude": 51.495876,
      "longitude": -0.254967,
      "elevation": 10.504774
    },
    {
      "latitude": 51.495876,
      "longitude": -0.254999,
      "elevation": 10.648927
    },
    {
      "latitude": 51.495872,
      "longitude": -0.255028,
      "elevation": 10.780242
    },
    {
      "latitude": 51.495865,
      "longitude": -0.255056,
      "elevation": 11.120365
    },
    {
      "latitude": 51.49585,
      "longitude": -0.255083,
      "elevation": 11.370476
    },
    {
      "latitude": 51.495827,
      "longitude": -0.255108,
      "elevation": 11.590621
    },
    {
      "latitude": 51.495804,
      "longitude": -0.255129,
      "elevation": 11.667715
    },
    {
      "latitude": 51.495777,
      "longitude": -0.255146,
      "elevation": 11.705645
    },
    {
      "latitude": 51.49575,
      "longitude": -0.255155,
      "elevation": 11.810111
    },
    {
      "latitude": 51.495724,
      "longitude": -0.255158,
      "elevation": 11.867392
    },
    {
      "latitude": 51.49569,
      "longitude": -0.255158,
      "elevation": 11.932801
    },
    {
      "latitude": 51.495655,
      "longitude": -0.255158,
      "elevation": 11.993413
    },
    {
      "latitude": 51.495613,
      "longitude": -0.25516,
      "elevation": 12.031738
    },
    {
      "latitude": 51.49557,
      "longitude": -0.255167,
      "elevation": 12.067297
    },
    {
      "latitude": 51.49552,
      "longitude": -0.255179,
      "elevation": 12.108391
    },
    {
      "latitude": 51.495476,
      "longitude": -0.255187,
      "elevation": 12.173929
    },
    {
      "latitude": 51.495426,
      "longitude": -0.255185,
      "elevation": 12.237034
    },
    {
      "latitude": 51.49536,
      "longitude": -0.255187,
      "elevation": 12.290803
    },
    {
      "latitude": 51.495293,
      "longitude": -0.255195,
      "elevation": 12.327825
    },
    {
      "latitude": 51.495228,
      "longitude": -0.255202,
      "elevation": 12.353268
    },
    {
      "latitude": 51.495174,
      "longitude": -0.255207,
      "elevation": 12.380637
    },
    {
      "latitude": 51.49513,
      "longitude": -0.255211,
      "elevation": 12.448059
    },
    {
      "latitude": 51.495087,
      "longitude": -0.255215,
      "elevation": 12.463243
    },
    {
      "latitude": 51.495045,
      "longitude": -0.255218,
      "elevation": 12.352029
    },
    {
      "latitude": 51.495003,
      "longitude": -0.255222,
      "elevation": 12.267058
    },
    {
      "latitude": 51.49496,
      "longitude": -0.255225,
      "elevation": 12.093238
    },
    {
      "latitude": 51.494923,
      "longitude": -0.255226,
      "elevation": 11.988497
    },
    {
      "latitude": 51.494892,
      "longitude": -0.255226,
      "elevation": 11.882811
    },
    {
      "latitude": 51.49487,
      "longitude": -0.255225,
      "elevation": 11.87033
    },
    {
      "latitude": 51.49484,
      "longitude": -0.255222,
      "elevation": 11.942354
    },
    {
      "latitude": 51.494804,
      "longitude": -0.25522,
      "elevation": 11.923799
    },
    {
      "latitude": 51.49477,
      "longitude": -0.255218,
      "elevation": 11.9761
    },
    {
      "latitude": 51.494736,
      "longitude": -0.255217,
      "elevation": 12.068816
    },
    {
      "latitude": 51.494698,
      "longitude": -0.255217,
      "elevation": 12.084678
    },
    {
      "latitude": 51.49466,
      "longitude": -0.25522,
      "elevation": 12.088105
    },
    {
      "latitude": 51.494625,
      "longitude": -0.255223,
      "elevation": 12.051643
    },
    {
      "latitude": 51.494587,
      "longitude": -0.255226,
      "elevation": 12.072476
    },
    {
      "latitude": 51.494553,
      "longitude": -0.255228,
      "elevation": 12.0091305
    },
    {
      "latitude": 51.49452,
      "longitude": -0.255228,
      "elevation": 11.975246
    },
    {
      "latitude": 51.494484,
      "longitude": -0.255224,
      "elevation": 11.917406
    },
    {
      "latitude": 51.49445,
      "longitude": -0.25522,
      "elevation": 11.85603
    },
    {
      "latitude": 51.49441,
      "longitude": -0.255217,
      "elevation": 11.82356
    },
    {
      "latitude": 51.494373,
      "longitude": -0.255217,
      "elevation": 11.713923
    },
    {
      "latitude": 51.494335,
      "longitude": -0.25522,
      "elevation": 11.635128
    },
    {
      "latitude": 51.4943,
      "longitude": -0.255224,
      "elevation": 11.556737
    },
    {
      "latitude": 51.49427,
      "longitude": -0.255227,
      "elevation": 11.529154
    },
    {
      "latitude": 51.494247,
      "longitude": -0.255229,
      "elevation": 11.505443
    },
    {
      "latitude": 51.49422,
      "longitude": -0.255229,
      "elevation": 11.434784
    },
    {
      "latitude": 51.494194,
      "longitude": -0.255227,
      "elevation": 11.299259
    },
    {
      "latitude": 51.494164,
      "longitude": -0.255223,
      "elevation": 11.216684
    },
    {
      "latitude": 51.494133,
      "longitude": -0.255218,
      "elevation": 10.971729
    },
    {
      "latitude": 51.494102,
      "longitude": -0.255213,
      "elevation": 10.87498
    },
    {
      "latitude": 51.49407,
      "longitude": -0.255209,
      "elevation": 10.763594
    },
    {
      "latitude": 51.494038,
      "longitude": -0.255209,
      "elevation": 10.637812
    },
    {
      "latitude": 51.494007,
      "longitude": -0.255213,
      "elevation": 10.4997635
    },
    {
      "latitude": 51.493977,
      "longitude": -0.255219,
      "elevation": 10.501478
    },
    {
      "latitude": 51.493942,
      "longitude": -0.255225,
      "elevation": 10.503051
    },
    {
      "latitude": 51.49391,
      "longitude": -0.255228,
      "elevation": 10.3543215
    },
    {
      "latitude": 51.493877,
      "longitude": -0.255229,
      "elevation": 10.355427
    },
    {
      "latitude": 51.49384,
      "longitude": -0.255229,
      "elevation": 10.199441
    },
    {
      "latitude": 51.4938,
      "longitude": -0.255229,
      "elevation": 10.04
    },
    {
      "latitude": 51.493763,
      "longitude": -0.255232,
      "elevation": 10.040003
    },
    {
      "latitude": 51.49373,
      "longitude": -0.255241,
      "elevation": 10.040008
    },
    {
      "latitude": 51.4937,
      "longitude": -0.255258,
      "elevation": 10.199855
    },
    {
      "latitude": 51.49367,
      "longitude": -0.255282,
      "elevation": 10.199751
    },
    {
      "latitude": 51.493645,
      "longitude": -0.255302,
      "elevation": 10.799314
    },
    {
      "latitude": 51.49362,
      "longitude": -0.255309,
      "elevation": 11.273988
    },
    {
      "latitude": 51.493595,
      "longitude": -0.25531,
      "elevation": 11.538088
    },
    {
      "latitude": 51.49357,
      "longitude": -0.255311,
      "elevation": 11.678652
    },
    {
      "latitude": 51.493534,
      "longitude": -0.255311,
      "elevation": 11.797944
    },
    {
      "latitude": 51.4935,
      "longitude": -0.25531,
      "elevation": 11.861935
    },
    {
      "latitude": 51.49346,
      "longitude": -0.25531,
      "elevation": 12.008425
    },
    {
      "latitude": 51.493427,
      "longitude": -0.25531,
      "elevation": 12.087711
    },
    {
      "latitude": 51.493397,
      "longitude": -0.25531,
      "elevation": 12.136907
    },
    {
      "latitude": 51.493362,
      "longitude": -0.255308,
      "elevation": 12.185263
    },
    {
      "latitude": 51.49333,
      "longitude": -0.255305,
      "elevation": 12.216192
    },
    {
      "latitude": 51.493298,
      "longitude": -0.255304,
      "elevation": 12.208643
    },
    {
      "latitude": 51.49327,
      "longitude": -0.255304,
      "elevation": 12.188013
    },
    {
      "latitude": 51.49324,
      "longitude": -0.255304,
      "elevation": 12.172904
    },
    {
      "latitude": 51.493217,
      "longitude": -0.255301,
      "elevation": 12.170585
    },
    {
      "latitude": 51.49319,
      "longitude": -0.255294,
      "elevation": 12.169356
    },
    {
      "latitude": 51.493164,
      "longitude": -0.255287,
      "elevation": 12.166467
    },
    {
      "latitude": 51.493137,
      "longitude": -0.255278,
      "elevation": 12.166131
    },
    {
      "latitude": 51.49311,
      "longitude": -0.25527,
      "elevation": 12.164882
    },
    {
      "latitude": 51.493084,
      "longitude": -0.255264,
      "elevation": 12.154007
    },
    {
      "latitude": 51.493057,
      "longitude": -0.255259,
      "elevation": 12.142815
    },
    {
      "latitude": 51.493034,
      "longitude": -0.255258,
      "elevation": 12.128966
    },
    {
      "latitude": 51.49301,
      "longitude": -0.255258,
      "elevation": 12.111015
    },
    {
      "latitude": 51.49299,
      "longitude": -0.255262,
      "elevation": 12.086259
    },
    {
      "latitude": 51.49297,
      "longitude": -0.255266,
      "elevation": 12.0605345
    },
    {
      "latitude": 51.49294,
      "longitude": -0.255267,
      "elevation": 12.035451
    },
    {
      "latitude": 51.49291,
      "longitude": -0.255275,
      "elevation": 11.995459
    },
    {
      "latitude": 51.492874,
      "longitude": -0.255288,
      "elevation": 11.946117
    },
    {
      "latitude": 51.49284,
      "longitude": -0.25531,
      "elevation": 11.883396
    },
    {
      "latitude": 51.49281,
      "longitude": -0.255346,
      "elevation": 11.800889
    },
    {
      "latitude": 51.49278,
      "longitude": -0.255384,
      "elevation": 11.719228
    },
    {
      "latitude": 51.492752,
      "longitude": -0.255414,
      "elevation": 11.653507
    },
    {
      "latitude": 51.492718,
      "longitude": -0.255451,
      "elevation": 11.576669
    },
    {
      "latitude": 51.492683,
      "longitude": -0.255495,
      "elevation": 11.494399
    },
    {
      "latitude": 51.492664,
      "longitude": -0.255542,
      "elevation": 11.416379
    },
    {
      "latitude": 51.492653,
      "longitude": -0.255592,
      "elevation": 11.340937
    },
    {
      "latitude": 51.492645,
      "longitude": -0.255644,
      "elevation": 11.26394
    },
    {
      "latitude": 51.49264,
      "longitude": -0.255699,
      "elevation": 11.181081
    },
    {
      "latitude": 51.492634,
      "longitude": -0.255753,
      "elevation": 11.10236
    },
    {
      "latitude": 51.492626,
      "longitude": -0.255807,
      "elevation": 11.026084
    },
    {
      "latitude": 51.492615,
      "longitude": -0.255857,
      "elevation": 10.982492
    },
    {
      "latitude": 51.492603,
      "longitude": -0.255902,
      "elevation": 10.973823
    },
    {
      "latitude": 51.49259,
      "longitude": -0.255941,
      "elevation": 10.967437
    },
    {
      "latitude": 51.492573,
      "longitude": -0.255971,
      "elevation": 10.963703
    },
    {
      "latitude": 51.492554,
      "longitude": -0.255992,
      "elevation": 10.969624
    },
    {
      "latitude": 51.492527,
      "longitude": -0.256005,
      "elevation": 10.963366
    },
    {
      "latitude": 51.4925,
      "longitude": -0.256011,
      "elevation": 10.969841
    },
    {
      "latitude": 51.49247,
      "longitude": -0.256012,
      "elevation": 10.974272
    },
    {
      "latitude": 51.492435,
      "longitude": -0.25601,
      "elevation": 10.981284
    },
    {
      "latitude": 51.4924,
      "longitude": -0.256007,
      "elevation": 10.988399
    },
    {
      "latitude": 51.492367,
      "longitude": -0.256001,
      "elevation": 10.991569
    },
    {
      "latitude": 51.492332,
      "longitude": -0.255992,
      "elevation": 10.992813
    },
    {
      "latitude": 51.492306,
      "longitude": -0.25598,
      "elevation": 10.993875
    },
    {
      "latitude": 51.492275,
      "longitude": -0.255967,
      "elevation": 10.992813
    },
    {
      "latitude": 51.492245,
      "longitude": -0.255955,
      "elevation": 10.996207
    },
    {
      "latitude": 51.492214,
      "longitude": -0.255945,
      "elevation": 10.996768
    },
    {
      "latitude": 51.49218,
      "longitude": -0.255935,
      "elevation": 10.996207
    },
    {
      "latitude": 51.492146,
      "longitude": -0.255925,
      "elevation": 10.996207
    },
    {
      "latitude": 51.49211,
      "longitude": -0.255914,
      "elevation": 10.994779
    },
    {
      "latitude": 51.492077,
      "longitude": -0.255902,
      "elevation": 10.99555
    },
    {
      "latitude": 51.49204,
      "longitude": -0.255889,
      "elevation": 10.996207
    },
    {
      "latitude": 51.491997,
      "longitude": -0.255876,
      "elevation": 10.997245
    },
    {
      "latitude": 51.49196,
      "longitude": -0.255862,
      "elevation": 10.996768
    },
    {
      "latitude": 51.49192,
      "longitude": -0.255849,
      "elevation": 10.997999
    },
    {
      "latitude": 51.491886,
      "longitude": -0.255837,
      "elevation": 10.998295
    },
    {
      "latitude": 51.49185,
      "longitude": -0.255825,
      "elevation": 11.008533
    },
    {
      "latitude": 51.491817,
      "longitude": -0.255813,
      "elevation": 11.022911
    },
    {
      "latitude": 51.491783,
      "longitude": -0.255802,
      "elevation": 11.036314
    },
    {
      "latitude": 51.491753,
      "longitude": -0.255791,
      "elevation": 11.049689
    },
    {
      "latitude": 51.491722,
      "longitude": -0.25578,
      "elevation": 11.063042
    },
    {
      "latitude": 51.49169,
      "longitude": -0.255767,
      "elevation": 11.078893
    },
    {
      "latitude": 51.49166,
      "longitude": -0.255752,
      "elevation": 11.089618
    },
    {
      "latitude": 51.49163,
      "longitude": -0.255734,
      "elevation": 11.069447
    },
    {
      "latitude": 51.491596,
      "longitude": -0.255721,
      "elevation": 11.040798
    },
    {
      "latitude": 51.491566,
      "longitude": -0.255722,
      "elevation": 10.996188
    },
    {
      "latitude": 51.491535,
      "longitude": -0.255739,
      "elevation": 10.939606
    },
    {
      "latitude": 51.491512,
      "longitude": -0.255773,
      "elevation": 10.872872
    },
    {
      "latitude": 51.491493,
      "longitude": -0.255823,
      "elevation": 10.80088
    },
    {
      "latitude": 51.491478,
      "longitude": -0.255881,
      "elevation": 10.773957
    },
    {
      "latitude": 51.491467,
      "longitude": -0.255936,
      "elevation": 10.758226
    },
    {
      "latitude": 51.491455,
      "longitude": -0.255987,
      "elevation": 10.743982
    },
    {
      "latitude": 51.491444,
      "longitude": -0.256037,
      "elevation": 10.729594
    },
    {
      "latitude": 51.49143,
      "longitude": -0.256087,
      "elevation": 10.714906
    },
    {
      "latitude": 51.491417,
      "longitude": -0.256137,
      "elevation": 10.697462
    },
    {
      "latitude": 51.4914,
      "longitude": -0.256189,
      "elevation": 10.677652
    },
    {
      "latitude": 51.491386,
      "longitude": -0.256242,
      "elevation": 10.659294
    },
    {
      "latitude": 51.491375,
      "longitude": -0.256295,
      "elevation": 10.6451235
    },
    {
      "latitude": 51.491367,
      "longitude": -0.256346,
      "elevation": 10.636123
    },
    {
      "latitude": 51.49136,
      "longitude": -0.256398,
      "elevation": 10.627354
    },
    {
      "latitude": 51.491352,
      "longitude": -0.25645,
      "elevation": 10.615615
    },
    {
      "latitude": 51.49134,
      "longitude": -0.256504,
      "elevation": 10.598795
    },
    {
      "latitude": 51.491325,
      "longitude": -0.256559,
      "elevation": 10.57993
    },
    {
      "latitude": 51.49131,
      "longitude": -0.256616,
      "elevation": 10.554644
    },
    {
      "latitude": 51.4913,
      "longitude": -0.256675,
      "elevation": 10.533646
    },
    {
      "latitude": 51.491283,
      "longitude": -0.256736,
      "elevation": 10.512197
    },
    {
      "latitude": 51.49127,
      "longitude": -0.256796,
      "elevation": 10.473009
    },
    {
      "latitude": 51.491253,
      "longitude": -0.256853,
      "elevation": 10.448833
    },
    {
      "latitude": 51.49124,
      "longitude": -0.256906,
      "elevation": 10.432953
    },
    {
      "latitude": 51.491226,
      "longitude": -0.256955,
      "elevation": 10.408937
    },
    {
      "latitude": 51.49122,
      "longitude": -0.257003,
      "elevation": 10.374537
    },
    {
      "latitude": 51.491207,
      "longitude": -0.25705,
      "elevation": 10.351348
    },
    {
      "latitude": 51.4912,
      "longitude": -0.257098,
      "elevation": 10.306767
    },
    {
      "latitude": 51.491196,
      "longitude": -0.257148,
      "elevation": 10.251446
    },
    {
      "latitude": 51.491184,
      "longitude": -0.257199,
      "elevation": 10.21299
    },
    {
      "latitude": 51.491173,
      "longitude": -0.257249,
      "elevation": 10.20239
    },
    {
      "latitude": 51.49116,
      "longitude": -0.257298,
      "elevation": 10.155687
    },
    {
      "latitude": 51.491146,
      "longitude": -0.257348,
      "elevation": 10.175268
    },
    {
      "latitude": 51.49113,
      "longitude": -0.257399,
      "elevation": 10.0497675
    },
    {
      "latitude": 51.49112,
      "longitude": -0.257452,
      "elevation": 9.935534
    },
    {
      "latitude": 51.491108,
      "longitude": -0.257508,
      "elevation": 9.865409
    },
    {
      "latitude": 51.491096,
      "longitude": -0.257566,
      "elevation": 9.919459
    },
    {
      "latitude": 51.49109,
      "longitude": -0.257624,
      "elevation": 9.851882
    },
    {
      "latitude": 51.49108,
      "longitude": -0.257682,
      "elevation": 9.958396
    },
    {
      "latitude": 51.49107,
      "longitude": -0.257737,
      "elevation": 9.897744
    },
    {
      "latitude": 51.49106,
      "longitude": -0.25779,
      "elevation": 9.830196
    },
    {
      "latitude": 51.491047,
      "longitude": -0.25784,
      "elevation": 9.82141
    },
    {
      "latitude": 51.491035,
      "longitude": -0.257886,
      "elevation": 9.591597
    },
    {
      "latitude": 51.491028,
      "longitude": -0.257929,
      "elevation": 9.394174
    }
    ]}
  ];
},{}],3:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule AutoFocusMixin
 * @typechecks static-only
 */

"use strict";

var focusNode = require("./focusNode");

var AutoFocusMixin = {
  componentDidMount: function() {
    if (this.props.autoFocus) {
      focusNode(this.getDOMNode());
    }
  }
};

module.exports = AutoFocusMixin;

},{"./focusNode":108}],4:[function(require,module,exports){
/**
 * Copyright 2013 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule BeforeInputEventPlugin
 * @typechecks static-only
 */

"use strict";

var EventConstants = require("./EventConstants");
var EventPropagators = require("./EventPropagators");
var ExecutionEnvironment = require("./ExecutionEnvironment");
var SyntheticInputEvent = require("./SyntheticInputEvent");

var keyOf = require("./keyOf");

var canUseTextInputEvent = (
  ExecutionEnvironment.canUseDOM &&
  'TextEvent' in window &&
  !('documentMode' in document || isPresto())
);

/**
 * Opera <= 12 includes TextEvent in window, but does not fire
 * text input events. Rely on keypress instead.
 */
function isPresto() {
  var opera = window.opera;
  return (
    typeof opera === 'object' &&
    typeof opera.version === 'function' &&
    parseInt(opera.version(), 10) <= 12
  );
}

var SPACEBAR_CODE = 32;
var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

var topLevelTypes = EventConstants.topLevelTypes;

// Events and their corresponding property names.
var eventTypes = {
  beforeInput: {
    phasedRegistrationNames: {
      bubbled: keyOf({onBeforeInput: null}),
      captured: keyOf({onBeforeInputCapture: null})
    },
    dependencies: [
      topLevelTypes.topCompositionEnd,
      topLevelTypes.topKeyPress,
      topLevelTypes.topTextInput,
      topLevelTypes.topPaste
    ]
  }
};

// Track characters inserted via keypress and composition events.
var fallbackChars = null;

/**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */
function isKeypressCommand(nativeEvent) {
  return (
    (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
    // ctrlKey && altKey is equivalent to AltGr, and is not a command.
    !(nativeEvent.ctrlKey && nativeEvent.altKey)
  );
}

/**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 */
var BeforeInputEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {

    var chars;

    if (canUseTextInputEvent) {
      switch (topLevelType) {
        case topLevelTypes.topKeyPress:
          /**
           * If native `textInput` events are available, our goal is to make
           * use of them. However, there is a special case: the spacebar key.
           * In Webkit, preventing default on a spacebar `textInput` event
           * cancels character insertion, but it *also* causes the browser
           * to fall back to its default spacebar behavior of scrolling the
           * page.
           *
           * Tracking at:
           * https://code.google.com/p/chromium/issues/detail?id=355103
           *
           * To avoid this issue, use the keypress event as if no `textInput`
           * event is available.
           */
          var which = nativeEvent.which;
          if (which !== SPACEBAR_CODE) {
            return;
          }

          chars = String.fromCharCode(which);
          break;

        case topLevelTypes.topTextInput:
          // Record the characters to be added to the DOM.
          chars = nativeEvent.data;

          // If it's a spacebar character, assume that we have already handled
          // it at the keypress level and bail immediately.
          if (chars === SPACEBAR_CHAR) {
            return;
          }

          // Otherwise, carry on.
          break;

        default:
          // For other native event types, do nothing.
          return;
      }
    } else {
      switch (topLevelType) {
        case topLevelTypes.topPaste:
          // If a paste event occurs after a keypress, throw out the input
          // chars. Paste events should not lead to BeforeInput events.
          fallbackChars = null;
          break;
        case topLevelTypes.topKeyPress:
          /**
           * As of v27, Firefox may fire keypress events even when no character
           * will be inserted. A few possibilities:
           *
           * - `which` is `0`. Arrow keys, Esc key, etc.
           *
           * - `which` is the pressed key code, but no char is available.
           *   Ex: 'AltGr + d` in Polish. There is no modified character for
           *   this key combination and no character is inserted into the
           *   document, but FF fires the keypress for char code `100` anyway.
           *   No `input` event will occur.
           *
           * - `which` is the pressed key code, but a command combination is
           *   being used. Ex: `Cmd+C`. No character is inserted, and no
           *   `input` event will occur.
           */
          if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
            fallbackChars = String.fromCharCode(nativeEvent.which);
          }
          break;
        case topLevelTypes.topCompositionEnd:
          fallbackChars = nativeEvent.data;
          break;
      }

      // If no changes have occurred to the fallback string, no relevant
      // event has fired and we're done.
      if (fallbackChars === null) {
        return;
      }

      chars = fallbackChars;
    }

    // If no characters are being inserted, no BeforeInput event should
    // be fired.
    if (!chars) {
      return;
    }

    var event = SyntheticInputEvent.getPooled(
      eventTypes.beforeInput,
      topLevelTargetID,
      nativeEvent
    );

    event.data = chars;
    fallbackChars = null;
    EventPropagators.accumulateTwoPhaseDispatches(event);
    return event;
  }
};

module.exports = BeforeInputEventPlugin;

},{"./EventConstants":17,"./EventPropagators":22,"./ExecutionEnvironment":23,"./SyntheticInputEvent":88,"./keyOf":129}],5:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule CSSProperty
 */

"use strict";

/**
 * CSS properties which accept numbers but are not in units of "px".
 */
var isUnitlessNumber = {
  columnCount: true,
  fillOpacity: true,
  flex: true,
  flexGrow: true,
  flexShrink: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  widows: true,
  zIndex: true,
  zoom: true
};

/**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */
function prefixKey(prefix, key) {
  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
}

/**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */
var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
// infinite loop, because it iterates over the newly added props too.
Object.keys(isUnitlessNumber).forEach(function(prop) {
  prefixes.forEach(function(prefix) {
    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
  });
});

/**
 * Most style properties can be unset by doing .style[prop] = '' but IE8
 * doesn't like doing that with shorthand properties so for the properties that
 * IE8 breaks on, which are listed here, we instead unset each of the
 * individual properties. See http://bugs.jquery.com/ticket/12385.
 * The 4-value 'clock' properties like margin, padding, border-width seem to
 * behave without any problems. Curiously, list-style works too without any
 * special prodding.
 */
var shorthandPropertyExpansions = {
  background: {
    backgroundImage: true,
    backgroundPosition: true,
    backgroundRepeat: true,
    backgroundColor: true
  },
  border: {
    borderWidth: true,
    borderStyle: true,
    borderColor: true
  },
  borderBottom: {
    borderBottomWidth: true,
    borderBottomStyle: true,
    borderBottomColor: true
  },
  borderLeft: {
    borderLeftWidth: true,
    borderLeftStyle: true,
    borderLeftColor: true
  },
  borderRight: {
    borderRightWidth: true,
    borderRightStyle: true,
    borderRightColor: true
  },
  borderTop: {
    borderTopWidth: true,
    borderTopStyle: true,
    borderTopColor: true
  },
  font: {
    fontStyle: true,
    fontVariant: true,
    fontWeight: true,
    fontSize: true,
    lineHeight: true,
    fontFamily: true
  }
};

var CSSProperty = {
  isUnitlessNumber: isUnitlessNumber,
  shorthandPropertyExpansions: shorthandPropertyExpansions
};

module.exports = CSSProperty;

},{}],6:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule CSSPropertyOperations
 * @typechecks static-only
 */

"use strict";

var CSSProperty = require("./CSSProperty");

var dangerousStyleValue = require("./dangerousStyleValue");
var hyphenateStyleName = require("./hyphenateStyleName");
var memoizeStringOnly = require("./memoizeStringOnly");

var processStyleName = memoizeStringOnly(function(styleName) {
  return hyphenateStyleName(styleName);
});

/**
 * Operations for dealing with CSS properties.
 */
var CSSPropertyOperations = {

  /**
   * Serializes a mapping of style properties for use as inline styles:
   *
   *   > createMarkupForStyles({width: '200px', height: 0})
   *   "width:200px;height:0;"
   *
   * Undefined values are ignored so that declarative programming is easier.
   * The result should be HTML-escaped before insertion into the DOM.
   *
   * @param {object} styles
   * @return {?string}
   */
  createMarkupForStyles: function(styles) {
    var serialized = '';
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      var styleValue = styles[styleName];
      if (styleValue != null) {
        serialized += processStyleName(styleName) + ':';
        serialized += dangerousStyleValue(styleName, styleValue) + ';';
      }
    }
    return serialized || null;
  },

  /**
   * Sets the value for multiple styles on a node.  If a value is specified as
   * '' (empty string), the corresponding style property will be unset.
   *
   * @param {DOMElement} node
   * @param {object} styles
   */
  setValueForStyles: function(node, styles) {
    var style = node.style;
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      var styleValue = dangerousStyleValue(styleName, styles[styleName]);
      if (styleValue) {
        style[styleName] = styleValue;
      } else {
        var expansion = CSSProperty.shorthandPropertyExpansions[styleName];
        if (expansion) {
          // Shorthand property that IE8 won't like unsetting, so unset each
          // component to placate it
          for (var individualStyleName in expansion) {
            style[individualStyleName] = '';
          }
        } else {
          style[styleName] = '';
        }
      }
    }
  }

};

module.exports = CSSPropertyOperations;

},{"./CSSProperty":5,"./dangerousStyleValue":103,"./hyphenateStyleName":120,"./memoizeStringOnly":131}],7:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule CallbackQueue
 */

"use strict";

var PooledClass = require("./PooledClass");

var invariant = require("./invariant");
var mixInto = require("./mixInto");

/**
 * A specialized pseudo-event module to help keep track of components waiting to
 * be notified when their DOM representations are available for use.
 *
 * This implements `PooledClass`, so you should never need to instantiate this.
 * Instead, use `CallbackQueue.getPooled()`.
 *
 * @class ReactMountReady
 * @implements PooledClass
 * @internal
 */
function CallbackQueue() {
  this._callbacks = null;
  this._contexts = null;
}

mixInto(CallbackQueue, {

  /**
   * Enqueues a callback to be invoked when `notifyAll` is invoked.
   *
   * @param {function} callback Invoked when `notifyAll` is invoked.
   * @param {?object} context Context to call `callback` with.
   * @internal
   */
  enqueue: function(callback, context) {
    this._callbacks = this._callbacks || [];
    this._contexts = this._contexts || [];
    this._callbacks.push(callback);
    this._contexts.push(context);
  },

  /**
   * Invokes all enqueued callbacks and clears the queue. This is invoked after
   * the DOM representation of a component has been created or updated.
   *
   * @internal
   */
  notifyAll: function() {
    var callbacks = this._callbacks;
    var contexts = this._contexts;
    if (callbacks) {
      ("production" !== process.env.NODE_ENV ? invariant(
        callbacks.length === contexts.length,
        "Mismatched list of contexts in callback queue"
      ) : invariant(callbacks.length === contexts.length));
      this._callbacks = null;
      this._contexts = null;
      for (var i = 0, l = callbacks.length; i < l; i++) {
        callbacks[i].call(contexts[i]);
      }
      callbacks.length = 0;
      contexts.length = 0;
    }
  },

  /**
   * Resets the internal queue.
   *
   * @internal
   */
  reset: function() {
    this._callbacks = null;
    this._contexts = null;
  },

  /**
   * `PooledClass` looks for this.
   */
  destructor: function() {
    this.reset();
  }

});

PooledClass.addPoolingTo(CallbackQueue);

module.exports = CallbackQueue;

}).call(this,require('_process'))
},{"./PooledClass":28,"./invariant":122,"./mixInto":135,"_process":147}],8:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ChangeEventPlugin
 */

"use strict";

var EventConstants = require("./EventConstants");
var EventPluginHub = require("./EventPluginHub");
var EventPropagators = require("./EventPropagators");
var ExecutionEnvironment = require("./ExecutionEnvironment");
var ReactUpdates = require("./ReactUpdates");
var SyntheticEvent = require("./SyntheticEvent");

var isEventSupported = require("./isEventSupported");
var isTextInputElement = require("./isTextInputElement");
var keyOf = require("./keyOf");

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  change: {
    phasedRegistrationNames: {
      bubbled: keyOf({onChange: null}),
      captured: keyOf({onChangeCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topChange,
      topLevelTypes.topClick,
      topLevelTypes.topFocus,
      topLevelTypes.topInput,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyUp,
      topLevelTypes.topSelectionChange
    ]
  }
};

/**
 * For IE shims
 */
var activeElement = null;
var activeElementID = null;
var activeElementValue = null;
var activeElementValueProp = null;

/**
 * SECTION: handle `change` event
 */
function shouldUseChangeEvent(elem) {
  return (
    elem.nodeName === 'SELECT' ||
    (elem.nodeName === 'INPUT' && elem.type === 'file')
  );
}

var doesChangeEventBubble = false;
if (ExecutionEnvironment.canUseDOM) {
  // See `handleChange` comment below
  doesChangeEventBubble = isEventSupported('change') && (
    !('documentMode' in document) || document.documentMode > 8
  );
}

function manualDispatchChangeEvent(nativeEvent) {
  var event = SyntheticEvent.getPooled(
    eventTypes.change,
    activeElementID,
    nativeEvent
  );
  EventPropagators.accumulateTwoPhaseDispatches(event);

  // If change and propertychange bubbled, we'd just bind to it like all the
  // other events and have it go through ReactBrowserEventEmitter. Since it
  // doesn't, we manually listen for the events and so we have to enqueue and
  // process the abstract event manually.
  //
  // Batching is necessary here in order to ensure that all event handlers run
  // before the next rerender (including event handlers attached to ancestor
  // elements instead of directly on the input). Without this, controlled
  // components don't work properly in conjunction with event bubbling because
  // the component is rerendered and the value reverted before all the event
  // handlers can run. See https://github.com/facebook/react/issues/708.
  ReactUpdates.batchedUpdates(runEventInBatch, event);
}

function runEventInBatch(event) {
  EventPluginHub.enqueueEvents(event);
  EventPluginHub.processEventQueue();
}

function startWatchingForChangeEventIE8(target, targetID) {
  activeElement = target;
  activeElementID = targetID;
  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
}

function stopWatchingForChangeEventIE8() {
  if (!activeElement) {
    return;
  }
  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
  activeElement = null;
  activeElementID = null;
}

function getTargetIDForChangeEvent(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topChange) {
    return topLevelTargetID;
  }
}
function handleEventsForChangeEventIE8(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topFocus) {
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForChangeEventIE8();
    startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);
  } else if (topLevelType === topLevelTypes.topBlur) {
    stopWatchingForChangeEventIE8();
  }
}


/**
 * SECTION: handle `input` event
 */
var isInputEventSupported = false;
if (ExecutionEnvironment.canUseDOM) {
  // IE9 claims to support the input event but fails to trigger it when
  // deleting text, so we ignore its input events
  isInputEventSupported = isEventSupported('input') && (
    !('documentMode' in document) || document.documentMode > 9
  );
}

/**
 * (For old IE.) Replacement getter/setter for the `value` property that gets
 * set on the active element.
 */
var newValueProp =  {
  get: function() {
    return activeElementValueProp.get.call(this);
  },
  set: function(val) {
    // Cast to a string so we can do equality checks.
    activeElementValue = '' + val;
    activeElementValueProp.set.call(this, val);
  }
};

/**
 * (For old IE.) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */
function startWatchingForValueChange(target, targetID) {
  activeElement = target;
  activeElementID = targetID;
  activeElementValue = target.value;
  activeElementValueProp = Object.getOwnPropertyDescriptor(
    target.constructor.prototype,
    'value'
  );

  Object.defineProperty(activeElement, 'value', newValueProp);
  activeElement.attachEvent('onpropertychange', handlePropertyChange);
}

/**
 * (For old IE.) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */
function stopWatchingForValueChange() {
  if (!activeElement) {
    return;
  }

  // delete restores the original property definition
  delete activeElement.value;
  activeElement.detachEvent('onpropertychange', handlePropertyChange);

  activeElement = null;
  activeElementID = null;
  activeElementValue = null;
  activeElementValueProp = null;
}

/**
 * (For old IE.) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */
function handlePropertyChange(nativeEvent) {
  if (nativeEvent.propertyName !== 'value') {
    return;
  }
  var value = nativeEvent.srcElement.value;
  if (value === activeElementValue) {
    return;
  }
  activeElementValue = value;

  manualDispatchChangeEvent(nativeEvent);
}

/**
 * If a `change` event should be fired, returns the target's ID.
 */
function getTargetIDForInputEvent(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topInput) {
    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
    // what we want so fall through here and trigger an abstract event
    return topLevelTargetID;
  }
}

// For IE8 and IE9.
function handleEventsForInputEventIE(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topFocus) {
    // In IE8, we can capture almost all .value changes by adding a
    // propertychange handler and looking for events with propertyName
    // equal to 'value'
    // In IE9, propertychange fires for most input events but is buggy and
    // doesn't fire when text is deleted, but conveniently, selectionchange
    // appears to fire in all of the remaining cases so we catch those and
    // forward the event if the value has changed
    // In either case, we don't want to call the event handler if the value
    // is changed from JS so we redefine a setter for `.value` that updates
    // our activeElementValue variable, allowing us to ignore those changes
    //
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForValueChange();
    startWatchingForValueChange(topLevelTarget, topLevelTargetID);
  } else if (topLevelType === topLevelTypes.topBlur) {
    stopWatchingForValueChange();
  }
}

// For IE8 and IE9.
function getTargetIDForInputEventIE(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topSelectionChange ||
      topLevelType === topLevelTypes.topKeyUp ||
      topLevelType === topLevelTypes.topKeyDown) {
    // On the selectionchange event, the target is just document which isn't
    // helpful for us so just check activeElement instead.
    //
    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
    // propertychange on the first input event after setting `value` from a
    // script and fires only keydown, keypress, keyup. Catching keyup usually
    // gets it and catching keydown lets us fire an event for the first
    // keystroke if user does a key repeat (it'll be a little delayed: right
    // before the second keystroke). Other input methods (e.g., paste) seem to
    // fire selectionchange normally.
    if (activeElement && activeElement.value !== activeElementValue) {
      activeElementValue = activeElement.value;
      return activeElementID;
    }
  }
}


/**
 * SECTION: handle `click` event
 */
function shouldUseClickEvent(elem) {
  // Use the `click` event to detect changes to checkbox and radio inputs.
  // This approach works across all browsers, whereas `change` does not fire
  // until `blur` in IE8.
  return (
    elem.nodeName === 'INPUT' &&
    (elem.type === 'checkbox' || elem.type === 'radio')
  );
}

function getTargetIDForClickEvent(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topClick) {
    return topLevelTargetID;
  }
}

/**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */
var ChangeEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {

    var getTargetIDFunc, handleEventFunc;
    if (shouldUseChangeEvent(topLevelTarget)) {
      if (doesChangeEventBubble) {
        getTargetIDFunc = getTargetIDForChangeEvent;
      } else {
        handleEventFunc = handleEventsForChangeEventIE8;
      }
    } else if (isTextInputElement(topLevelTarget)) {
      if (isInputEventSupported) {
        getTargetIDFunc = getTargetIDForInputEvent;
      } else {
        getTargetIDFunc = getTargetIDForInputEventIE;
        handleEventFunc = handleEventsForInputEventIE;
      }
    } else if (shouldUseClickEvent(topLevelTarget)) {
      getTargetIDFunc = getTargetIDForClickEvent;
    }

    if (getTargetIDFunc) {
      var targetID = getTargetIDFunc(
        topLevelType,
        topLevelTarget,
        topLevelTargetID
      );
      if (targetID) {
        var event = SyntheticEvent.getPooled(
          eventTypes.change,
          targetID,
          nativeEvent
        );
        EventPropagators.accumulateTwoPhaseDispatches(event);
        return event;
      }
    }

    if (handleEventFunc) {
      handleEventFunc(
        topLevelType,
        topLevelTarget,
        topLevelTargetID
      );
    }
  }

};

module.exports = ChangeEventPlugin;

},{"./EventConstants":17,"./EventPluginHub":19,"./EventPropagators":22,"./ExecutionEnvironment":23,"./ReactUpdates":78,"./SyntheticEvent":86,"./isEventSupported":123,"./isTextInputElement":125,"./keyOf":129}],9:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ClientReactRootIndex
 * @typechecks
 */

"use strict";

var nextReactRootIndex = 0;

var ClientReactRootIndex = {
  createReactRootIndex: function() {
    return nextReactRootIndex++;
  }
};

module.exports = ClientReactRootIndex;

},{}],10:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule CompositionEventPlugin
 * @typechecks static-only
 */

"use strict";

var EventConstants = require("./EventConstants");
var EventPropagators = require("./EventPropagators");
var ExecutionEnvironment = require("./ExecutionEnvironment");
var ReactInputSelection = require("./ReactInputSelection");
var SyntheticCompositionEvent = require("./SyntheticCompositionEvent");

var getTextContentAccessor = require("./getTextContentAccessor");
var keyOf = require("./keyOf");

var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
var START_KEYCODE = 229;

var useCompositionEvent = (
  ExecutionEnvironment.canUseDOM &&
  'CompositionEvent' in window
);

// In IE9+, we have access to composition events, but the data supplied
// by the native compositionend event may be incorrect. In Korean, for example,
// the compositionend event contains only one character regardless of
// how many characters have been composed since compositionstart.
// We therefore use the fallback data while still using the native
// events as triggers.
var useFallbackData = (
  !useCompositionEvent ||
  (
    'documentMode' in document &&
    document.documentMode > 8 &&
    document.documentMode <= 11
  )
);

var topLevelTypes = EventConstants.topLevelTypes;
var currentComposition = null;

// Events and their corresponding property names.
var eventTypes = {
  compositionEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCompositionEnd: null}),
      captured: keyOf({onCompositionEndCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topCompositionEnd,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyPress,
      topLevelTypes.topKeyUp,
      topLevelTypes.topMouseDown
    ]
  },
  compositionStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCompositionStart: null}),
      captured: keyOf({onCompositionStartCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topCompositionStart,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyPress,
      topLevelTypes.topKeyUp,
      topLevelTypes.topMouseDown
    ]
  },
  compositionUpdate: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCompositionUpdate: null}),
      captured: keyOf({onCompositionUpdateCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topCompositionUpdate,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyPress,
      topLevelTypes.topKeyUp,
      topLevelTypes.topMouseDown
    ]
  }
};

/**
 * Translate native top level events into event types.
 *
 * @param {string} topLevelType
 * @return {object}
 */
function getCompositionEventType(topLevelType) {
  switch (topLevelType) {
    case topLevelTypes.topCompositionStart:
      return eventTypes.compositionStart;
    case topLevelTypes.topCompositionEnd:
      return eventTypes.compositionEnd;
    case topLevelTypes.topCompositionUpdate:
      return eventTypes.compositionUpdate;
  }
}

/**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackStart(topLevelType, nativeEvent) {
  return (
    topLevelType === topLevelTypes.topKeyDown &&
    nativeEvent.keyCode === START_KEYCODE
  );
}

/**
 * Does our fallback mode think that this event is the end of composition?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackEnd(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case topLevelTypes.topKeyUp:
      // Command keys insert or clear IME input.
      return (END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1);
    case topLevelTypes.topKeyDown:
      // Expect IME keyCode on each keydown. If we get any other
      // code we must have exited earlier.
      return (nativeEvent.keyCode !== START_KEYCODE);
    case topLevelTypes.topKeyPress:
    case topLevelTypes.topMouseDown:
    case topLevelTypes.topBlur:
      // Events are not possible without cancelling IME.
      return true;
    default:
      return false;
  }
}

/**
 * Helper class stores information about selection and document state
 * so we can figure out what changed at a later date.
 *
 * @param {DOMEventTarget} root
 */
function FallbackCompositionState(root) {
  this.root = root;
  this.startSelection = ReactInputSelection.getSelection(root);
  this.startValue = this.getText();
}

/**
 * Get current text of input.
 *
 * @return {string}
 */
FallbackCompositionState.prototype.getText = function() {
  return this.root.value || this.root[getTextContentAccessor()];
};

/**
 * Text that has changed since the start of composition.
 *
 * @return {string}
 */
FallbackCompositionState.prototype.getData = function() {
  var endValue = this.getText();
  var prefixLength = this.startSelection.start;
  var suffixLength = this.startValue.length - this.startSelection.end;

  return endValue.substr(
    prefixLength,
    endValue.length - suffixLength - prefixLength
  );
};

/**
 * This plugin creates `onCompositionStart`, `onCompositionUpdate` and
 * `onCompositionEnd` events on inputs, textareas and contentEditable
 * nodes.
 */
var CompositionEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {

    var eventType;
    var data;

    if (useCompositionEvent) {
      eventType = getCompositionEventType(topLevelType);
    } else if (!currentComposition) {
      if (isFallbackStart(topLevelType, nativeEvent)) {
        eventType = eventTypes.compositionStart;
      }
    } else if (isFallbackEnd(topLevelType, nativeEvent)) {
      eventType = eventTypes.compositionEnd;
    }

    if (useFallbackData) {
      // The current composition is stored statically and must not be
      // overwritten while composition continues.
      if (!currentComposition && eventType === eventTypes.compositionStart) {
        currentComposition = new FallbackCompositionState(topLevelTarget);
      } else if (eventType === eventTypes.compositionEnd) {
        if (currentComposition) {
          data = currentComposition.getData();
          currentComposition = null;
        }
      }
    }

    if (eventType) {
      var event = SyntheticCompositionEvent.getPooled(
        eventType,
        topLevelTargetID,
        nativeEvent
      );
      if (data) {
        // Inject data generated from fallback path into the synthetic event.
        // This matches the property of native CompositionEventInterface.
        event.data = data;
      }
      EventPropagators.accumulateTwoPhaseDispatches(event);
      return event;
    }
  }
};

module.exports = CompositionEventPlugin;

},{"./EventConstants":17,"./EventPropagators":22,"./ExecutionEnvironment":23,"./ReactInputSelection":60,"./SyntheticCompositionEvent":84,"./getTextContentAccessor":117,"./keyOf":129}],11:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule DOMChildrenOperations
 * @typechecks static-only
 */

"use strict";

var Danger = require("./Danger");
var ReactMultiChildUpdateTypes = require("./ReactMultiChildUpdateTypes");

var getTextContentAccessor = require("./getTextContentAccessor");
var invariant = require("./invariant");

/**
 * The DOM property to use when setting text content.
 *
 * @type {string}
 * @private
 */
var textContentAccessor = getTextContentAccessor();

/**
 * Inserts `childNode` as a child of `parentNode` at the `index`.
 *
 * @param {DOMElement} parentNode Parent node in which to insert.
 * @param {DOMElement} childNode Child node to insert.
 * @param {number} index Index at which to insert the child.
 * @internal
 */
function insertChildAt(parentNode, childNode, index) {
  // By exploiting arrays returning `undefined` for an undefined index, we can
  // rely exclusively on `insertBefore(node, null)` instead of also using
  // `appendChild(node)`. However, using `undefined` is not allowed by all
  // browsers so we must replace it with `null`.
  parentNode.insertBefore(
    childNode,
    parentNode.childNodes[index] || null
  );
}

var updateTextContent;
if (textContentAccessor === 'textContent') {
  /**
   * Sets the text content of `node` to `text`.
   *
   * @param {DOMElement} node Node to change
   * @param {string} text New text content
   */
  updateTextContent = function(node, text) {
    node.textContent = text;
  };
} else {
  /**
   * Sets the text content of `node` to `text`.
   *
   * @param {DOMElement} node Node to change
   * @param {string} text New text content
   */
  updateTextContent = function(node, text) {
    // In order to preserve newlines correctly, we can't use .innerText to set
    // the contents (see #1080), so we empty the element then append a text node
    while (node.firstChild) {
      node.removeChild(node.firstChild);
    }
    if (text) {
      var doc = node.ownerDocument || document;
      node.appendChild(doc.createTextNode(text));
    }
  };
}

/**
 * Operations for updating with DOM children.
 */
var DOMChildrenOperations = {

  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,

  updateTextContent: updateTextContent,

  /**
   * Updates a component's children by processing a series of updates. The
   * update configurations are each expected to have a `parentNode` property.
   *
   * @param {array<object>} updates List of update configurations.
   * @param {array<string>} markupList List of markup strings.
   * @internal
   */
  processUpdates: function(updates, markupList) {
    var update;
    // Mapping from parent IDs to initial child orderings.
    var initialChildren = null;
    // List of children that will be moved or removed.
    var updatedChildren = null;

    for (var i = 0; update = updates[i]; i++) {
      if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING ||
          update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {
        var updatedIndex = update.fromIndex;
        var updatedChild = update.parentNode.childNodes[updatedIndex];
        var parentID = update.parentID;

        ("production" !== process.env.NODE_ENV ? invariant(
          updatedChild,
          'processUpdates(): Unable to find child %s of element. This ' +
          'probably means the DOM was unexpectedly mutated (e.g., by the ' +
          'browser), usually due to forgetting a <tbody> when using tables, ' +
          'nesting <p> or <a> tags, or using non-SVG elements in an <svg> '+
          'parent. Try inspecting the child nodes of the element with React ' +
          'ID `%s`.',
          updatedIndex,
          parentID
        ) : invariant(updatedChild));

        initialChildren = initialChildren || {};
        initialChildren[parentID] = initialChildren[parentID] || [];
        initialChildren[parentID][updatedIndex] = updatedChild;

        updatedChildren = updatedChildren || [];
        updatedChildren.push(updatedChild);
      }
    }

    var renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);

    // Remove updated children first so that `toIndex` is consistent.
    if (updatedChildren) {
      for (var j = 0; j < updatedChildren.length; j++) {
        updatedChildren[j].parentNode.removeChild(updatedChildren[j]);
      }
    }

    for (var k = 0; update = updates[k]; k++) {
      switch (update.type) {
        case ReactMultiChildUpdateTypes.INSERT_MARKUP:
          insertChildAt(
            update.parentNode,
            renderedMarkup[update.markupIndex],
            update.toIndex
          );
          break;
        case ReactMultiChildUpdateTypes.MOVE_EXISTING:
          insertChildAt(
            update.parentNode,
            initialChildren[update.parentID][update.fromIndex],
            update.toIndex
          );
          break;
        case ReactMultiChildUpdateTypes.TEXT_CONTENT:
          updateTextContent(
            update.parentNode,
            update.textContent
          );
          break;
        case ReactMultiChildUpdateTypes.REMOVE_NODE:
          // Already removed by the for-loop above.
          break;
      }
    }
  }

};

module.exports = DOMChildrenOperations;

}).call(this,require('_process'))
},{"./Danger":14,"./ReactMultiChildUpdateTypes":65,"./getTextContentAccessor":117,"./invariant":122,"_process":147}],12:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule DOMProperty
 * @typechecks static-only
 */

/*jslint bitwise: true */

"use strict";

var invariant = require("./invariant");

var DOMPropertyInjection = {
  /**
   * Mapping from normalized, camelcased property names to a configuration that
   * specifies how the associated DOM property should be accessed or rendered.
   */
  MUST_USE_ATTRIBUTE: 0x1,
  MUST_USE_PROPERTY: 0x2,
  HAS_SIDE_EFFECTS: 0x4,
  HAS_BOOLEAN_VALUE: 0x8,
  HAS_NUMERIC_VALUE: 0x10,
  HAS_POSITIVE_NUMERIC_VALUE: 0x20 | 0x10,
  HAS_OVERLOADED_BOOLEAN_VALUE: 0x40,

  /**
   * Inject some specialized knowledge about the DOM. This takes a config object
   * with the following properties:
   *
   * isCustomAttribute: function that given an attribute name will return true
   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
   * attributes where it's impossible to enumerate all of the possible
   * attribute names,
   *
   * Properties: object mapping DOM property name to one of the
   * DOMPropertyInjection constants or null. If your attribute isn't in here,
   * it won't get written to the DOM.
   *
   * DOMAttributeNames: object mapping React attribute name to the DOM
   * attribute name. Attribute names not specified use the **lowercase**
   * normalized name.
   *
   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
   * Property names not specified use the normalized name.
   *
   * DOMMutationMethods: Properties that require special mutation methods. If
   * `value` is undefined, the mutation method should unset the property.
   *
   * @param {object} domPropertyConfig the config as described above.
   */
  injectDOMPropertyConfig: function(domPropertyConfig) {
    var Properties = domPropertyConfig.Properties || {};
    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

    if (domPropertyConfig.isCustomAttribute) {
      DOMProperty._isCustomAttributeFunctions.push(
        domPropertyConfig.isCustomAttribute
      );
    }

    for (var propName in Properties) {
      ("production" !== process.env.NODE_ENV ? invariant(
        !DOMProperty.isStandardName.hasOwnProperty(propName),
        'injectDOMPropertyConfig(...): You\'re trying to inject DOM property ' +
        '\'%s\' which has already been injected. You may be accidentally ' +
        'injecting the same DOM property config twice, or you may be ' +
        'injecting two configs that have conflicting property names.',
        propName
      ) : invariant(!DOMProperty.isStandardName.hasOwnProperty(propName)));

      DOMProperty.isStandardName[propName] = true;

      var lowerCased = propName.toLowerCase();
      DOMProperty.getPossibleStandardName[lowerCased] = propName;

      if (DOMAttributeNames.hasOwnProperty(propName)) {
        var attributeName = DOMAttributeNames[propName];
        DOMProperty.getPossibleStandardName[attributeName] = propName;
        DOMProperty.getAttributeName[propName] = attributeName;
      } else {
        DOMProperty.getAttributeName[propName] = lowerCased;
      }

      DOMProperty.getPropertyName[propName] =
        DOMPropertyNames.hasOwnProperty(propName) ?
          DOMPropertyNames[propName] :
          propName;

      if (DOMMutationMethods.hasOwnProperty(propName)) {
        DOMProperty.getMutationMethod[propName] = DOMMutationMethods[propName];
      } else {
        DOMProperty.getMutationMethod[propName] = null;
      }

      var propConfig = Properties[propName];
      DOMProperty.mustUseAttribute[propName] =
        propConfig & DOMPropertyInjection.MUST_USE_ATTRIBUTE;
      DOMProperty.mustUseProperty[propName] =
        propConfig & DOMPropertyInjection.MUST_USE_PROPERTY;
      DOMProperty.hasSideEffects[propName] =
        propConfig & DOMPropertyInjection.HAS_SIDE_EFFECTS;
      DOMProperty.hasBooleanValue[propName] =
        propConfig & DOMPropertyInjection.HAS_BOOLEAN_VALUE;
      DOMProperty.hasNumericValue[propName] =
        propConfig & DOMPropertyInjection.HAS_NUMERIC_VALUE;
      DOMProperty.hasPositiveNumericValue[propName] =
        propConfig & DOMPropertyInjection.HAS_POSITIVE_NUMERIC_VALUE;
      DOMProperty.hasOverloadedBooleanValue[propName] =
        propConfig & DOMPropertyInjection.HAS_OVERLOADED_BOOLEAN_VALUE;

      ("production" !== process.env.NODE_ENV ? invariant(
        !DOMProperty.mustUseAttribute[propName] ||
          !DOMProperty.mustUseProperty[propName],
        'DOMProperty: Cannot require using both attribute and property: %s',
        propName
      ) : invariant(!DOMProperty.mustUseAttribute[propName] ||
        !DOMProperty.mustUseProperty[propName]));
      ("production" !== process.env.NODE_ENV ? invariant(
        DOMProperty.mustUseProperty[propName] ||
          !DOMProperty.hasSideEffects[propName],
        'DOMProperty: Properties that have side effects must use property: %s',
        propName
      ) : invariant(DOMProperty.mustUseProperty[propName] ||
        !DOMProperty.hasSideEffects[propName]));
      ("production" !== process.env.NODE_ENV ? invariant(
        !!DOMProperty.hasBooleanValue[propName] +
          !!DOMProperty.hasNumericValue[propName] +
          !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1,
        'DOMProperty: Value can be one of boolean, overloaded boolean, or ' +
        'numeric value, but not a combination: %s',
        propName
      ) : invariant(!!DOMProperty.hasBooleanValue[propName] +
        !!DOMProperty.hasNumericValue[propName] +
        !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1));
    }
  }
};
var defaultValueCache = {};

/**
 * DOMProperty exports lookup objects that can be used like functions:
 *
 *   > DOMProperty.isValid['id']
 *   true
 *   > DOMProperty.isValid['foobar']
 *   undefined
 *
 * Although this may be confusing, it performs better in general.
 *
 * @see http://jsperf.com/key-exists
 * @see http://jsperf.com/key-missing
 */
var DOMProperty = {

  ID_ATTRIBUTE_NAME: 'data-reactid',

  /**
   * Checks whether a property name is a standard property.
   * @type {Object}
   */
  isStandardName: {},

  /**
   * Mapping from lowercase property names to the properly cased version, used
   * to warn in the case of missing properties.
   * @type {Object}
   */
  getPossibleStandardName: {},

  /**
   * Mapping from normalized names to attribute names that differ. Attribute
   * names are used when rendering markup or with `*Attribute()`.
   * @type {Object}
   */
  getAttributeName: {},

  /**
   * Mapping from normalized names to properties on DOM node instances.
   * (This includes properties that mutate due to external factors.)
   * @type {Object}
   */
  getPropertyName: {},

  /**
   * Mapping from normalized names to mutation methods. This will only exist if
   * mutation cannot be set simply by the property or `setAttribute()`.
   * @type {Object}
   */
  getMutationMethod: {},

  /**
   * Whether the property must be accessed and mutated as an object property.
   * @type {Object}
   */
  mustUseAttribute: {},

  /**
   * Whether the property must be accessed and mutated using `*Attribute()`.
   * (This includes anything that fails `<propName> in <element>`.)
   * @type {Object}
   */
  mustUseProperty: {},

  /**
   * Whether or not setting a value causes side effects such as triggering
   * resources to be loaded or text selection changes. We must ensure that
   * the value is only set if it has changed.
   * @type {Object}
   */
  hasSideEffects: {},

  /**
   * Whether the property should be removed when set to a falsey value.
   * @type {Object}
   */
  hasBooleanValue: {},

  /**
   * Whether the property must be numeric or parse as a
   * numeric and should be removed when set to a falsey value.
   * @type {Object}
   */
  hasNumericValue: {},

  /**
   * Whether the property must be positive numeric or parse as a positive
   * numeric and should be removed when set to a falsey value.
   * @type {Object}
   */
  hasPositiveNumericValue: {},

  /**
   * Whether the property can be used as a flag as well as with a value. Removed
   * when strictly equal to false; present without a value when strictly equal
   * to true; present with a value otherwise.
   * @type {Object}
   */
  hasOverloadedBooleanValue: {},

  /**
   * All of the isCustomAttribute() functions that have been injected.
   */
  _isCustomAttributeFunctions: [],

  /**
   * Checks whether a property name is a custom attribute.
   * @method
   */
  isCustomAttribute: function(attributeName) {
    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
      if (isCustomAttributeFn(attributeName)) {
        return true;
      }
    }
    return false;
  },

  /**
   * Returns the default property value for a DOM property (i.e., not an
   * attribute). Most default values are '' or false, but not all. Worse yet,
   * some (in particular, `type`) vary depending on the type of element.
   *
   * TODO: Is it better to grab all the possible properties when creating an
   * element to avoid having to create the same element twice?
   */
  getDefaultValueForProperty: function(nodeName, prop) {
    var nodeDefaults = defaultValueCache[nodeName];
    var testElement;
    if (!nodeDefaults) {
      defaultValueCache[nodeName] = nodeDefaults = {};
    }
    if (!(prop in nodeDefaults)) {
      testElement = document.createElement(nodeName);
      nodeDefaults[prop] = testElement[prop];
    }
    return nodeDefaults[prop];
  },

  injection: DOMPropertyInjection
};

module.exports = DOMProperty;

}).call(this,require('_process'))
},{"./invariant":122,"_process":147}],13:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule DOMPropertyOperations
 * @typechecks static-only
 */

"use strict";

var DOMProperty = require("./DOMProperty");

var escapeTextForBrowser = require("./escapeTextForBrowser");
var memoizeStringOnly = require("./memoizeStringOnly");
var warning = require("./warning");

function shouldIgnoreValue(name, value) {
  return value == null ||
    (DOMProperty.hasBooleanValue[name] && !value) ||
    (DOMProperty.hasNumericValue[name] && isNaN(value)) ||
    (DOMProperty.hasPositiveNumericValue[name] && (value < 1)) ||
    (DOMProperty.hasOverloadedBooleanValue[name] && value === false);
}

var processAttributeNameAndPrefix = memoizeStringOnly(function(name) {
  return escapeTextForBrowser(name) + '="';
});

if ("production" !== process.env.NODE_ENV) {
  var reactProps = {
    children: true,
    dangerouslySetInnerHTML: true,
    key: true,
    ref: true
  };
  var warnedProperties = {};

  var warnUnknownProperty = function(name) {
    if (reactProps.hasOwnProperty(name) && reactProps[name] ||
        warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
      return;
    }

    warnedProperties[name] = true;
    var lowerCasedName = name.toLowerCase();

    // data-* attributes should be lowercase; suggest the lowercase version
    var standardName = (
      DOMProperty.isCustomAttribute(lowerCasedName) ?
        lowerCasedName :
      DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ?
        DOMProperty.getPossibleStandardName[lowerCasedName] :
        null
    );

    // For now, only warn when we have a suggested correction. This prevents
    // logging too much when using transferPropsTo.
    ("production" !== process.env.NODE_ENV ? warning(
      standardName == null,
      'Unknown DOM property ' + name + '. Did you mean ' + standardName + '?'
    ) : null);

  };
}

/**
 * Operations for dealing with DOM properties.
 */
var DOMPropertyOperations = {

  /**
   * Creates markup for the ID property.
   *
   * @param {string} id Unescaped ID.
   * @return {string} Markup string.
   */
  createMarkupForID: function(id) {
    return processAttributeNameAndPrefix(DOMProperty.ID_ATTRIBUTE_NAME) +
      escapeTextForBrowser(id) + '"';
  },

  /**
   * Creates markup for a property.
   *
   * @param {string} name
   * @param {*} value
   * @return {?string} Markup string, or null if the property was invalid.
   */
  createMarkupForProperty: function(name, value) {
    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
        DOMProperty.isStandardName[name]) {
      if (shouldIgnoreValue(name, value)) {
        return '';
      }
      var attributeName = DOMProperty.getAttributeName[name];
      if (DOMProperty.hasBooleanValue[name] ||
          (DOMProperty.hasOverloadedBooleanValue[name] && value === true)) {
        return escapeTextForBrowser(attributeName);
      }
      return processAttributeNameAndPrefix(attributeName) +
        escapeTextForBrowser(value) + '"';
    } else if (DOMProperty.isCustomAttribute(name)) {
      if (value == null) {
        return '';
      }
      return processAttributeNameAndPrefix(name) +
        escapeTextForBrowser(value) + '"';
    } else if ("production" !== process.env.NODE_ENV) {
      warnUnknownProperty(name);
    }
    return null;
  },

  /**
   * Sets the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   * @param {*} value
   */
  setValueForProperty: function(node, name, value) {
    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
        DOMProperty.isStandardName[name]) {
      var mutationMethod = DOMProperty.getMutationMethod[name];
      if (mutationMethod) {
        mutationMethod(node, value);
      } else if (shouldIgnoreValue(name, value)) {
        this.deleteValueForProperty(node, name);
      } else if (DOMProperty.mustUseAttribute[name]) {
        node.setAttribute(DOMProperty.getAttributeName[name], '' + value);
      } else {
        var propName = DOMProperty.getPropertyName[name];
        if (!DOMProperty.hasSideEffects[name] || node[propName] !== value) {
          node[propName] = value;
        }
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      if (value == null) {
        node.removeAttribute(name);
      } else {
        node.setAttribute(name, '' + value);
      }
    } else if ("production" !== process.env.NODE_ENV) {
      warnUnknownProperty(name);
    }
  },

  /**
   * Deletes the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   */
  deleteValueForProperty: function(node, name) {
    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
        DOMProperty.isStandardName[name]) {
      var mutationMethod = DOMProperty.getMutationMethod[name];
      if (mutationMethod) {
        mutationMethod(node, undefined);
      } else if (DOMProperty.mustUseAttribute[name]) {
        node.removeAttribute(DOMProperty.getAttributeName[name]);
      } else {
        var propName = DOMProperty.getPropertyName[name];
        var defaultValue = DOMProperty.getDefaultValueForProperty(
          node.nodeName,
          propName
        );
        if (!DOMProperty.hasSideEffects[name] ||
            node[propName] !== defaultValue) {
          node[propName] = defaultValue;
        }
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      node.removeAttribute(name);
    } else if ("production" !== process.env.NODE_ENV) {
      warnUnknownProperty(name);
    }
  }

};

module.exports = DOMPropertyOperations;

}).call(this,require('_process'))
},{"./DOMProperty":12,"./escapeTextForBrowser":106,"./memoizeStringOnly":131,"./warning":145,"_process":147}],14:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule Danger
 * @typechecks static-only
 */

/*jslint evil: true, sub: true */

"use strict";

var ExecutionEnvironment = require("./ExecutionEnvironment");

var createNodesFromMarkup = require("./createNodesFromMarkup");
var emptyFunction = require("./emptyFunction");
var getMarkupWrap = require("./getMarkupWrap");
var invariant = require("./invariant");

var OPEN_TAG_NAME_EXP = /^(<[^ \/>]+)/;
var RESULT_INDEX_ATTR = 'data-danger-index';

/**
 * Extracts the `nodeName` from a string of markup.
 *
 * NOTE: Extracting the `nodeName` does not require a regular expression match
 * because we make assumptions about React-generated markup (i.e. there are no
 * spaces surrounding the opening tag and there is at least one attribute).
 *
 * @param {string} markup String of markup.
 * @return {string} Node name of the supplied markup.
 * @see http://jsperf.com/extract-nodename
 */
function getNodeName(markup) {
  return markup.substring(1, markup.indexOf(' '));
}

var Danger = {

  /**
   * Renders markup into an array of nodes. The markup is expected to render
   * into a list of root nodes. Also, the length of `resultList` and
   * `markupList` should be the same.
   *
   * @param {array<string>} markupList List of markup strings to render.
   * @return {array<DOMElement>} List of rendered nodes.
   * @internal
   */
  dangerouslyRenderMarkup: function(markupList) {
    ("production" !== process.env.NODE_ENV ? invariant(
      ExecutionEnvironment.canUseDOM,
      'dangerouslyRenderMarkup(...): Cannot render markup in a Worker ' +
      'thread. This is likely a bug in the framework. Please report ' +
      'immediately.'
    ) : invariant(ExecutionEnvironment.canUseDOM));
    var nodeName;
    var markupByNodeName = {};
    // Group markup by `nodeName` if a wrap is necessary, else by '*'.
    for (var i = 0; i < markupList.length; i++) {
      ("production" !== process.env.NODE_ENV ? invariant(
        markupList[i],
        'dangerouslyRenderMarkup(...): Missing markup.'
      ) : invariant(markupList[i]));
      nodeName = getNodeName(markupList[i]);
      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';
      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];
      markupByNodeName[nodeName][i] = markupList[i];
    }
    var resultList = [];
    var resultListAssignmentCount = 0;
    for (nodeName in markupByNodeName) {
      if (!markupByNodeName.hasOwnProperty(nodeName)) {
        continue;
      }
      var markupListByNodeName = markupByNodeName[nodeName];

      // This for-in loop skips the holes of the sparse array. The order of
      // iteration should follow the order of assignment, which happens to match
      // numerical index order, but we don't rely on that.
      for (var resultIndex in markupListByNodeName) {
        if (markupListByNodeName.hasOwnProperty(resultIndex)) {
          var markup = markupListByNodeName[resultIndex];

          // Push the requested markup with an additional RESULT_INDEX_ATTR
          // attribute.  If the markup does not start with a < character, it
          // will be discarded below (with an appropriate console.error).
          markupListByNodeName[resultIndex] = markup.replace(
            OPEN_TAG_NAME_EXP,
            // This index will be parsed back out below.
            '$1 ' + RESULT_INDEX_ATTR + '="' + resultIndex + '" '
          );
        }
      }

      // Render each group of markup with similar wrapping `nodeName`.
      var renderNodes = createNodesFromMarkup(
        markupListByNodeName.join(''),
        emptyFunction // Do nothing special with <script> tags.
      );

      for (i = 0; i < renderNodes.length; ++i) {
        var renderNode = renderNodes[i];
        if (renderNode.hasAttribute &&
            renderNode.hasAttribute(RESULT_INDEX_ATTR)) {

          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);
          renderNode.removeAttribute(RESULT_INDEX_ATTR);

          ("production" !== process.env.NODE_ENV ? invariant(
            !resultList.hasOwnProperty(resultIndex),
            'Danger: Assigning to an already-occupied result index.'
          ) : invariant(!resultList.hasOwnProperty(resultIndex)));

          resultList[resultIndex] = renderNode;

          // This should match resultList.length and markupList.length when
          // we're done.
          resultListAssignmentCount += 1;

        } else if ("production" !== process.env.NODE_ENV) {
          console.error(
            "Danger: Discarding unexpected node:",
            renderNode
          );
        }
      }
    }

    // Although resultList was populated out of order, it should now be a dense
    // array.
    ("production" !== process.env.NODE_ENV ? invariant(
      resultListAssignmentCount === resultList.length,
      'Danger: Did not assign to every index of resultList.'
    ) : invariant(resultListAssignmentCount === resultList.length));

    ("production" !== process.env.NODE_ENV ? invariant(
      resultList.length === markupList.length,
      'Danger: Expected markup to render %s nodes, but rendered %s.',
      markupList.length,
      resultList.length
    ) : invariant(resultList.length === markupList.length));

    return resultList;
  },

  /**
   * Replaces a node with a string of markup at its current position within its
   * parent. The markup must render into a single root node.
   *
   * @param {DOMElement} oldChild Child node to replace.
   * @param {string} markup Markup to render in place of the child node.
   * @internal
   */
  dangerouslyReplaceNodeWithMarkup: function(oldChild, markup) {
    ("production" !== process.env.NODE_ENV ? invariant(
      ExecutionEnvironment.canUseDOM,
      'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' +
      'worker thread. This is likely a bug in the framework. Please report ' +
      'immediately.'
    ) : invariant(ExecutionEnvironment.canUseDOM));
    ("production" !== process.env.NODE_ENV ? invariant(markup, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(markup));
    ("production" !== process.env.NODE_ENV ? invariant(
      oldChild.tagName.toLowerCase() !== 'html',
      'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' +
      '<html> node. This is because browser quirks make this unreliable ' +
      'and/or slow. If you want to render to the root you must use ' +
      'server rendering. See renderComponentToString().'
    ) : invariant(oldChild.tagName.toLowerCase() !== 'html'));

    var newChild = createNodesFromMarkup(markup, emptyFunction)[0];
    oldChild.parentNode.replaceChild(newChild, oldChild);
  }

};

module.exports = Danger;

}).call(this,require('_process'))
},{"./ExecutionEnvironment":23,"./createNodesFromMarkup":102,"./emptyFunction":104,"./getMarkupWrap":114,"./invariant":122,"_process":147}],15:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule DefaultEventPluginOrder
 */

"use strict";

 var keyOf = require("./keyOf");

/**
 * Module that is injectable into `EventPluginHub`, that specifies a
 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
 * plugins, without having to package every one of them. This is better than
 * having plugins be ordered in the same order that they are injected because
 * that ordering would be influenced by the packaging order.
 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
 */
var DefaultEventPluginOrder = [
  keyOf({ResponderEventPlugin: null}),
  keyOf({SimpleEventPlugin: null}),
  keyOf({TapEventPlugin: null}),
  keyOf({EnterLeaveEventPlugin: null}),
  keyOf({ChangeEventPlugin: null}),
  keyOf({SelectEventPlugin: null}),
  keyOf({CompositionEventPlugin: null}),
  keyOf({BeforeInputEventPlugin: null}),
  keyOf({AnalyticsEventPlugin: null}),
  keyOf({MobileSafariClickEventPlugin: null})
];

module.exports = DefaultEventPluginOrder;

},{"./keyOf":129}],16:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule EnterLeaveEventPlugin
 * @typechecks static-only
 */

"use strict";

var EventConstants = require("./EventConstants");
var EventPropagators = require("./EventPropagators");
var SyntheticMouseEvent = require("./SyntheticMouseEvent");

var ReactMount = require("./ReactMount");
var keyOf = require("./keyOf");

var topLevelTypes = EventConstants.topLevelTypes;
var getFirstReactDOM = ReactMount.getFirstReactDOM;

var eventTypes = {
  mouseEnter: {
    registrationName: keyOf({onMouseEnter: null}),
    dependencies: [
      topLevelTypes.topMouseOut,
      topLevelTypes.topMouseOver
    ]
  },
  mouseLeave: {
    registrationName: keyOf({onMouseLeave: null}),
    dependencies: [
      topLevelTypes.topMouseOut,
      topLevelTypes.topMouseOver
    ]
  }
};

var extractedEvents = [null, null];

var EnterLeaveEventPlugin = {

  eventTypes: eventTypes,

  /**
   * For almost every interaction we care about, there will be both a top-level
   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
   * we do not extract duplicate events. However, moving the mouse into the
   * browser from outside will not fire a `mouseout` event. In this case, we use
   * the `mouseover` top-level event.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    if (topLevelType === topLevelTypes.topMouseOver &&
        (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
      return null;
    }
    if (topLevelType !== topLevelTypes.topMouseOut &&
        topLevelType !== topLevelTypes.topMouseOver) {
      // Must not be a mouse in or mouse out - ignoring.
      return null;
    }

    var win;
    if (topLevelTarget.window === topLevelTarget) {
      // `topLevelTarget` is probably a window object.
      win = topLevelTarget;
    } else {
      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
      var doc = topLevelTarget.ownerDocument;
      if (doc) {
        win = doc.defaultView || doc.parentWindow;
      } else {
        win = window;
      }
    }

    var from, to;
    if (topLevelType === topLevelTypes.topMouseOut) {
      from = topLevelTarget;
      to =
        getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement) ||
        win;
    } else {
      from = win;
      to = topLevelTarget;
    }

    if (from === to) {
      // Nothing pertains to our managed components.
      return null;
    }

    var fromID = from ? ReactMount.getID(from) : '';
    var toID = to ? ReactMount.getID(to) : '';

    var leave = SyntheticMouseEvent.getPooled(
      eventTypes.mouseLeave,
      fromID,
      nativeEvent
    );
    leave.type = 'mouseleave';
    leave.target = from;
    leave.relatedTarget = to;

    var enter = SyntheticMouseEvent.getPooled(
      eventTypes.mouseEnter,
      toID,
      nativeEvent
    );
    enter.type = 'mouseenter';
    enter.target = to;
    enter.relatedTarget = from;

    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, fromID, toID);

    extractedEvents[0] = leave;
    extractedEvents[1] = enter;

    return extractedEvents;
  }

};

module.exports = EnterLeaveEventPlugin;

},{"./EventConstants":17,"./EventPropagators":22,"./ReactMount":63,"./SyntheticMouseEvent":90,"./keyOf":129}],17:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule EventConstants
 */

"use strict";

var keyMirror = require("./keyMirror");

var PropagationPhases = keyMirror({bubbled: null, captured: null});

/**
 * Types of raw signals from the browser caught at the top level.
 */
var topLevelTypes = keyMirror({
  topBlur: null,
  topChange: null,
  topClick: null,
  topCompositionEnd: null,
  topCompositionStart: null,
  topCompositionUpdate: null,
  topContextMenu: null,
  topCopy: null,
  topCut: null,
  topDoubleClick: null,
  topDrag: null,
  topDragEnd: null,
  topDragEnter: null,
  topDragExit: null,
  topDragLeave: null,
  topDragOver: null,
  topDragStart: null,
  topDrop: null,
  topError: null,
  topFocus: null,
  topInput: null,
  topKeyDown: null,
  topKeyPress: null,
  topKeyUp: null,
  topLoad: null,
  topMouseDown: null,
  topMouseMove: null,
  topMouseOut: null,
  topMouseOver: null,
  topMouseUp: null,
  topPaste: null,
  topReset: null,
  topScroll: null,
  topSelectionChange: null,
  topSubmit: null,
  topTextInput: null,
  topTouchCancel: null,
  topTouchEnd: null,
  topTouchMove: null,
  topTouchStart: null,
  topWheel: null
});

var EventConstants = {
  topLevelTypes: topLevelTypes,
  PropagationPhases: PropagationPhases
};

module.exports = EventConstants;

},{"./keyMirror":128}],18:[function(require,module,exports){
(function (process){
/**
 * @providesModule EventListener
 * @typechecks
 */

var emptyFunction = require("./emptyFunction");

/**
 * Upstream version of event listener. Does not take into account specific
 * nature of platform.
 */
var EventListener = {
  /**
   * Listen to DOM events during the bubble phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  listen: function(target, eventType, callback) {
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, false);
      return {
        remove: function() {
          target.removeEventListener(eventType, callback, false);
        }
      };
    } else if (target.attachEvent) {
      target.attachEvent('on' + eventType, callback);
      return {
        remove: function() {
          target.detachEvent('on' + eventType, callback);
        }
      };
    }
  },

  /**
   * Listen to DOM events during the capture phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  capture: function(target, eventType, callback) {
    if (!target.addEventListener) {
      if ("production" !== process.env.NODE_ENV) {
        console.error(
          'Attempted to listen to events during the capture phase on a ' +
          'browser that does not support the capture phase. Your application ' +
          'will not receive some events.'
        );
      }
      return {
        remove: emptyFunction
      };
    } else {
      target.addEventListener(eventType, callback, true);
      return {
        remove: function() {
          target.removeEventListener(eventType, callback, true);
        }
      };
    }
  },

  registerDefault: function() {}
};

module.exports = EventListener;

}).call(this,require('_process'))
},{"./emptyFunction":104,"_process":147}],19:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule EventPluginHub
 */

"use strict";

var EventPluginRegistry = require("./EventPluginRegistry");
var EventPluginUtils = require("./EventPluginUtils");

var accumulate = require("./accumulate");
var forEachAccumulated = require("./forEachAccumulated");
var invariant = require("./invariant");
var isEventSupported = require("./isEventSupported");
var monitorCodeUse = require("./monitorCodeUse");

/**
 * Internal store for event listeners
 */
var listenerBank = {};

/**
 * Internal queue of events that have accumulated their dispatches and are
 * waiting to have their dispatches executed.
 */
var eventQueue = null;

/**
 * Dispatches an event and releases it back into the pool, unless persistent.
 *
 * @param {?object} event Synthetic event to be dispatched.
 * @private
 */
var executeDispatchesAndRelease = function(event) {
  if (event) {
    var executeDispatch = EventPluginUtils.executeDispatch;
    // Plugins can provide custom behavior when dispatching events.
    var PluginModule = EventPluginRegistry.getPluginModuleForEvent(event);
    if (PluginModule && PluginModule.executeDispatch) {
      executeDispatch = PluginModule.executeDispatch;
    }
    EventPluginUtils.executeDispatchesInOrder(event, executeDispatch);

    if (!event.isPersistent()) {
      event.constructor.release(event);
    }
  }
};

/**
 * - `InstanceHandle`: [required] Module that performs logical traversals of DOM
 *   hierarchy given ids of the logical DOM elements involved.
 */
var InstanceHandle = null;

function validateInstanceHandle() {
  var invalid = !InstanceHandle||
    !InstanceHandle.traverseTwoPhase ||
    !InstanceHandle.traverseEnterLeave;
  if (invalid) {
    throw new Error('InstanceHandle not injected before use!');
  }
}

/**
 * This is a unified interface for event plugins to be installed and configured.
 *
 * Event plugins can implement the following properties:
 *
 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
 *     Required. When a top-level event is fired, this method is expected to
 *     extract synthetic events that will in turn be queued and dispatched.
 *
 *   `eventTypes` {object}
 *     Optional, plugins that fire events must publish a mapping of registration
 *     names that are used to register listeners. Values of this mapping must
 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
 *
 *   `executeDispatch` {function(object, function, string)}
 *     Optional, allows plugins to override how an event gets dispatched. By
 *     default, the listener is simply invoked.
 *
 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
 *
 * @public
 */
var EventPluginHub = {

  /**
   * Methods for injecting dependencies.
   */
  injection: {

    /**
     * @param {object} InjectedMount
     * @public
     */
    injectMount: EventPluginUtils.injection.injectMount,

    /**
     * @param {object} InjectedInstanceHandle
     * @public
     */
    injectInstanceHandle: function(InjectedInstanceHandle) {
      InstanceHandle = InjectedInstanceHandle;
      if ("production" !== process.env.NODE_ENV) {
        validateInstanceHandle();
      }
    },

    getInstanceHandle: function() {
      if ("production" !== process.env.NODE_ENV) {
        validateInstanceHandle();
      }
      return InstanceHandle;
    },

    /**
     * @param {array} InjectedEventPluginOrder
     * @public
     */
    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

    /**
     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
     */
    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName

  },

  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,

  registrationNameModules: EventPluginRegistry.registrationNameModules,

  /**
   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.
   *
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {?function} listener The callback to store.
   */
  putListener: function(id, registrationName, listener) {
    ("production" !== process.env.NODE_ENV ? invariant(
      !listener || typeof listener === 'function',
      'Expected %s listener to be a function, instead got type %s',
      registrationName, typeof listener
    ) : invariant(!listener || typeof listener === 'function'));

    if ("production" !== process.env.NODE_ENV) {
      // IE8 has no API for event capturing and the `onScroll` event doesn't
      // bubble.
      if (registrationName === 'onScroll' &&
          !isEventSupported('scroll', true)) {
        monitorCodeUse('react_no_scroll_event');
        console.warn('This browser doesn\'t support the `onScroll` event');
      }
    }
    var bankForRegistrationName =
      listenerBank[registrationName] || (listenerBank[registrationName] = {});
    bankForRegistrationName[id] = listener;
  },

  /**
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @return {?function} The stored callback.
   */
  getListener: function(id, registrationName) {
    var bankForRegistrationName = listenerBank[registrationName];
    return bankForRegistrationName && bankForRegistrationName[id];
  },

  /**
   * Deletes a listener from the registration bank.
   *
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   */
  deleteListener: function(id, registrationName) {
    var bankForRegistrationName = listenerBank[registrationName];
    if (bankForRegistrationName) {
      delete bankForRegistrationName[id];
    }
  },

  /**
   * Deletes all listeners for the DOM element with the supplied ID.
   *
   * @param {string} id ID of the DOM element.
   */
  deleteAllListeners: function(id) {
    for (var registrationName in listenerBank) {
      delete listenerBank[registrationName][id];
    }
  },

  /**
   * Allows registered plugins an opportunity to extract events from top-level
   * native browser events.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @internal
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    var events;
    var plugins = EventPluginRegistry.plugins;
    for (var i = 0, l = plugins.length; i < l; i++) {
      // Not every plugin in the ordering may be loaded at runtime.
      var possiblePlugin = plugins[i];
      if (possiblePlugin) {
        var extractedEvents = possiblePlugin.extractEvents(
          topLevelType,
          topLevelTarget,
          topLevelTargetID,
          nativeEvent
        );
        if (extractedEvents) {
          events = accumulate(events, extractedEvents);
        }
      }
    }
    return events;
  },

  /**
   * Enqueues a synthetic event that should be dispatched when
   * `processEventQueue` is invoked.
   *
   * @param {*} events An accumulation of synthetic events.
   * @internal
   */
  enqueueEvents: function(events) {
    if (events) {
      eventQueue = accumulate(eventQueue, events);
    }
  },

  /**
   * Dispatches all synthetic events on the event queue.
   *
   * @internal
   */
  processEventQueue: function() {
    // Set `eventQueue` to null before processing it so that we can tell if more
    // events get enqueued while processing.
    var processingEventQueue = eventQueue;
    eventQueue = null;
    forEachAccumulated(processingEventQueue, executeDispatchesAndRelease);
    ("production" !== process.env.NODE_ENV ? invariant(
      !eventQueue,
      'processEventQueue(): Additional events were enqueued while processing ' +
      'an event queue. Support for this has not yet been implemented.'
    ) : invariant(!eventQueue));
  },

  /**
   * These are needed for tests only. Do not use!
   */
  __purge: function() {
    listenerBank = {};
  },

  __getListenerBank: function() {
    return listenerBank;
  }

};

module.exports = EventPluginHub;

}).call(this,require('_process'))
},{"./EventPluginRegistry":20,"./EventPluginUtils":21,"./accumulate":96,"./forEachAccumulated":109,"./invariant":122,"./isEventSupported":123,"./monitorCodeUse":136,"_process":147}],20:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule EventPluginRegistry
 * @typechecks static-only
 */

"use strict";

var invariant = require("./invariant");

/**
 * Injectable ordering of event plugins.
 */
var EventPluginOrder = null;

/**
 * Injectable mapping from names to event plugin modules.
 */
var namesToPlugins = {};

/**
 * Recomputes the plugin list using the injected plugins and plugin ordering.
 *
 * @private
 */
function recomputePluginOrdering() {
  if (!EventPluginOrder) {
    // Wait until an `EventPluginOrder` is injected.
    return;
  }
  for (var pluginName in namesToPlugins) {
    var PluginModule = namesToPlugins[pluginName];
    var pluginIndex = EventPluginOrder.indexOf(pluginName);
    ("production" !== process.env.NODE_ENV ? invariant(
      pluginIndex > -1,
      'EventPluginRegistry: Cannot inject event plugins that do not exist in ' +
      'the plugin ordering, `%s`.',
      pluginName
    ) : invariant(pluginIndex > -1));
    if (EventPluginRegistry.plugins[pluginIndex]) {
      continue;
    }
    ("production" !== process.env.NODE_ENV ? invariant(
      PluginModule.extractEvents,
      'EventPluginRegistry: Event plugins must implement an `extractEvents` ' +
      'method, but `%s` does not.',
      pluginName
    ) : invariant(PluginModule.extractEvents));
    EventPluginRegistry.plugins[pluginIndex] = PluginModule;
    var publishedEvents = PluginModule.eventTypes;
    for (var eventName in publishedEvents) {
      ("production" !== process.env.NODE_ENV ? invariant(
        publishEventForPlugin(
          publishedEvents[eventName],
          PluginModule,
          eventName
        ),
        'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.',
        eventName,
        pluginName
      ) : invariant(publishEventForPlugin(
        publishedEvents[eventName],
        PluginModule,
        eventName
      )));
    }
  }
}

/**
 * Publishes an event so that it can be dispatched by the supplied plugin.
 *
 * @param {object} dispatchConfig Dispatch configuration for the event.
 * @param {object} PluginModule Plugin publishing the event.
 * @return {boolean} True if the event was successfully published.
 * @private
 */
function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
  ("production" !== process.env.NODE_ENV ? invariant(
    !EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName),
    'EventPluginHub: More than one plugin attempted to publish the same ' +
    'event name, `%s`.',
    eventName
  ) : invariant(!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName)));
  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
  if (phasedRegistrationNames) {
    for (var phaseName in phasedRegistrationNames) {
      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
        var phasedRegistrationName = phasedRegistrationNames[phaseName];
        publishRegistrationName(
          phasedRegistrationName,
          PluginModule,
          eventName
        );
      }
    }
    return true;
  } else if (dispatchConfig.registrationName) {
    publishRegistrationName(
      dispatchConfig.registrationName,
      PluginModule,
      eventName
    );
    return true;
  }
  return false;
}

/**
 * Publishes a registration name that is used to identify dispatched events and
 * can be used with `EventPluginHub.putListener` to register listeners.
 *
 * @param {string} registrationName Registration name to add.
 * @param {object} PluginModule Plugin publishing the event.
 * @private
 */
function publishRegistrationName(registrationName, PluginModule, eventName) {
  ("production" !== process.env.NODE_ENV ? invariant(
    !EventPluginRegistry.registrationNameModules[registrationName],
    'EventPluginHub: More than one plugin attempted to publish the same ' +
    'registration name, `%s`.',
    registrationName
  ) : invariant(!EventPluginRegistry.registrationNameModules[registrationName]));
  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;
  EventPluginRegistry.registrationNameDependencies[registrationName] =
    PluginModule.eventTypes[eventName].dependencies;
}

/**
 * Registers plugins so that they can extract and dispatch events.
 *
 * @see {EventPluginHub}
 */
var EventPluginRegistry = {

  /**
   * Ordered list of injected plugins.
   */
  plugins: [],

  /**
   * Mapping from event name to dispatch config
   */
  eventNameDispatchConfigs: {},

  /**
   * Mapping from registration name to plugin module
   */
  registrationNameModules: {},

  /**
   * Mapping from registration name to event name
   */
  registrationNameDependencies: {},

  /**
   * Injects an ordering of plugins (by plugin name). This allows the ordering
   * to be decoupled from injection of the actual plugins so that ordering is
   * always deterministic regardless of packaging, on-the-fly injection, etc.
   *
   * @param {array} InjectedEventPluginOrder
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginOrder}
   */
  injectEventPluginOrder: function(InjectedEventPluginOrder) {
    ("production" !== process.env.NODE_ENV ? invariant(
      !EventPluginOrder,
      'EventPluginRegistry: Cannot inject event plugin ordering more than ' +
      'once. You are likely trying to load more than one copy of React.'
    ) : invariant(!EventPluginOrder));
    // Clone the ordering so it cannot be dynamically mutated.
    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);
    recomputePluginOrdering();
  },

  /**
   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
   * in the ordering injected by `injectEventPluginOrder`.
   *
   * Plugins can be injected as part of page initialization or on-the-fly.
   *
   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginsByName}
   */
  injectEventPluginsByName: function(injectedNamesToPlugins) {
    var isOrderingDirty = false;
    for (var pluginName in injectedNamesToPlugins) {
      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
        continue;
      }
      var PluginModule = injectedNamesToPlugins[pluginName];
      if (!namesToPlugins.hasOwnProperty(pluginName) ||
          namesToPlugins[pluginName] !== PluginModule) {
        ("production" !== process.env.NODE_ENV ? invariant(
          !namesToPlugins[pluginName],
          'EventPluginRegistry: Cannot inject two different event plugins ' +
          'using the same name, `%s`.',
          pluginName
        ) : invariant(!namesToPlugins[pluginName]));
        namesToPlugins[pluginName] = PluginModule;
        isOrderingDirty = true;
      }
    }
    if (isOrderingDirty) {
      recomputePluginOrdering();
    }
  },

  /**
   * Looks up the plugin for the supplied event.
   *
   * @param {object} event A synthetic event.
   * @return {?object} The plugin that created the supplied event.
   * @internal
   */
  getPluginModuleForEvent: function(event) {
    var dispatchConfig = event.dispatchConfig;
    if (dispatchConfig.registrationName) {
      return EventPluginRegistry.registrationNameModules[
        dispatchConfig.registrationName
      ] || null;
    }
    for (var phase in dispatchConfig.phasedRegistrationNames) {
      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {
        continue;
      }
      var PluginModule = EventPluginRegistry.registrationNameModules[
        dispatchConfig.phasedRegistrationNames[phase]
      ];
      if (PluginModule) {
        return PluginModule;
      }
    }
    return null;
  },

  /**
   * Exposed for unit testing.
   * @private
   */
  _resetEventPlugins: function() {
    EventPluginOrder = null;
    for (var pluginName in namesToPlugins) {
      if (namesToPlugins.hasOwnProperty(pluginName)) {
        delete namesToPlugins[pluginName];
      }
    }
    EventPluginRegistry.plugins.length = 0;

    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
    for (var eventName in eventNameDispatchConfigs) {
      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
        delete eventNameDispatchConfigs[eventName];
      }
    }

    var registrationNameModules = EventPluginRegistry.registrationNameModules;
    for (var registrationName in registrationNameModules) {
      if (registrationNameModules.hasOwnProperty(registrationName)) {
        delete registrationNameModules[registrationName];
      }
    }
  }

};

module.exports = EventPluginRegistry;

}).call(this,require('_process'))
},{"./invariant":122,"_process":147}],21:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule EventPluginUtils
 */

"use strict";

var EventConstants = require("./EventConstants");

var invariant = require("./invariant");

/**
 * Injected dependencies:
 */

/**
 * - `Mount`: [required] Module that can convert between React dom IDs and
 *   actual node references.
 */
var injection = {
  Mount: null,
  injectMount: function(InjectedMount) {
    injection.Mount = InjectedMount;
    if ("production" !== process.env.NODE_ENV) {
      ("production" !== process.env.NODE_ENV ? invariant(
        InjectedMount && InjectedMount.getNode,
        'EventPluginUtils.injection.injectMount(...): Injected Mount module ' +
        'is missing getNode.'
      ) : invariant(InjectedMount && InjectedMount.getNode));
    }
  }
};

var topLevelTypes = EventConstants.topLevelTypes;

function isEndish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseUp ||
         topLevelType === topLevelTypes.topTouchEnd ||
         topLevelType === topLevelTypes.topTouchCancel;
}

function isMoveish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseMove ||
         topLevelType === topLevelTypes.topTouchMove;
}
function isStartish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseDown ||
         topLevelType === topLevelTypes.topTouchStart;
}


var validateEventDispatches;
if ("production" !== process.env.NODE_ENV) {
  validateEventDispatches = function(event) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchIDs = event._dispatchIDs;

    var listenersIsArr = Array.isArray(dispatchListeners);
    var idsIsArr = Array.isArray(dispatchIDs);
    var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;
    var listenersLen = listenersIsArr ?
      dispatchListeners.length :
      dispatchListeners ? 1 : 0;

    ("production" !== process.env.NODE_ENV ? invariant(
      idsIsArr === listenersIsArr && IDsLen === listenersLen,
      'EventPluginUtils: Invalid `event`.'
    ) : invariant(idsIsArr === listenersIsArr && IDsLen === listenersLen));
  };
}

/**
 * Invokes `cb(event, listener, id)`. Avoids using call if no scope is
 * provided. The `(listener,id)` pair effectively forms the "dispatch" but are
 * kept separate to conserve memory.
 */
function forEachEventDispatch(event, cb) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchIDs = event._dispatchIDs;
  if ("production" !== process.env.NODE_ENV) {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and IDs are two parallel arrays that are always in sync.
      cb(event, dispatchListeners[i], dispatchIDs[i]);
    }
  } else if (dispatchListeners) {
    cb(event, dispatchListeners, dispatchIDs);
  }
}

/**
 * Default implementation of PluginModule.executeDispatch().
 * @param {SyntheticEvent} SyntheticEvent to handle
 * @param {function} Application-level callback
 * @param {string} domID DOM id to pass to the callback.
 */
function executeDispatch(event, listener, domID) {
  event.currentTarget = injection.Mount.getNode(domID);
  var returnValue = listener(event, domID);
  event.currentTarget = null;
  return returnValue;
}

/**
 * Standard/simple iteration through an event's collected dispatches.
 */
function executeDispatchesInOrder(event, executeDispatch) {
  forEachEventDispatch(event, executeDispatch);
  event._dispatchListeners = null;
  event._dispatchIDs = null;
}

/**
 * Standard/simple iteration through an event's collected dispatches, but stops
 * at the first dispatch execution returning true, and returns that id.
 *
 * @return id of the first dispatch execution who's listener returns true, or
 * null if no listener returned true.
 */
function executeDispatchesInOrderStopAtTrueImpl(event) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchIDs = event._dispatchIDs;
  if ("production" !== process.env.NODE_ENV) {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and IDs are two parallel arrays that are always in sync.
      if (dispatchListeners[i](event, dispatchIDs[i])) {
        return dispatchIDs[i];
      }
    }
  } else if (dispatchListeners) {
    if (dispatchListeners(event, dispatchIDs)) {
      return dispatchIDs;
    }
  }
  return null;
}

/**
 * @see executeDispatchesInOrderStopAtTrueImpl
 */
function executeDispatchesInOrderStopAtTrue(event) {
  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
  event._dispatchIDs = null;
  event._dispatchListeners = null;
  return ret;
}

/**
 * Execution of a "direct" dispatch - there must be at most one dispatch
 * accumulated on the event or it is considered an error. It doesn't really make
 * sense for an event with multiple dispatches (bubbled) to keep track of the
 * return values at each dispatch execution, but it does tend to make sense when
 * dealing with "direct" dispatches.
 *
 * @return The return value of executing the single dispatch.
 */
function executeDirectDispatch(event) {
  if ("production" !== process.env.NODE_ENV) {
    validateEventDispatches(event);
  }
  var dispatchListener = event._dispatchListeners;
  var dispatchID = event._dispatchIDs;
  ("production" !== process.env.NODE_ENV ? invariant(
    !Array.isArray(dispatchListener),
    'executeDirectDispatch(...): Invalid `event`.'
  ) : invariant(!Array.isArray(dispatchListener)));
  var res = dispatchListener ?
    dispatchListener(event, dispatchID) :
    null;
  event._dispatchListeners = null;
  event._dispatchIDs = null;
  return res;
}

/**
 * @param {SyntheticEvent} event
 * @return {bool} True iff number of dispatches accumulated is greater than 0.
 */
function hasDispatches(event) {
  return !!event._dispatchListeners;
}

/**
 * General utilities that are useful in creating custom Event Plugins.
 */
var EventPluginUtils = {
  isEndish: isEndish,
  isMoveish: isMoveish,
  isStartish: isStartish,

  executeDirectDispatch: executeDirectDispatch,
  executeDispatch: executeDispatch,
  executeDispatchesInOrder: executeDispatchesInOrder,
  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
  hasDispatches: hasDispatches,
  injection: injection,
  useTouchEvents: false
};

module.exports = EventPluginUtils;

}).call(this,require('_process'))
},{"./EventConstants":17,"./invariant":122,"_process":147}],22:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule EventPropagators
 */

"use strict";

var EventConstants = require("./EventConstants");
var EventPluginHub = require("./EventPluginHub");

var accumulate = require("./accumulate");
var forEachAccumulated = require("./forEachAccumulated");

var PropagationPhases = EventConstants.PropagationPhases;
var getListener = EventPluginHub.getListener;

/**
 * Some event types have a notion of different registration names for different
 * "phases" of propagation. This finds listeners by a given phase.
 */
function listenerAtPhase(id, event, propagationPhase) {
  var registrationName =
    event.dispatchConfig.phasedRegistrationNames[propagationPhase];
  return getListener(id, registrationName);
}

/**
 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
 * here, allows us to not have to bind or create functions for each event.
 * Mutating the event's members allows us to not have to create a wrapping
 * "dispatch" object that pairs the event with the listener.
 */
function accumulateDirectionalDispatches(domID, upwards, event) {
  if ("production" !== process.env.NODE_ENV) {
    if (!domID) {
      throw new Error('Dispatching id must not be null');
    }
  }
  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;
  var listener = listenerAtPhase(domID, event, phase);
  if (listener) {
    event._dispatchListeners = accumulate(event._dispatchListeners, listener);
    event._dispatchIDs = accumulate(event._dispatchIDs, domID);
  }
}

/**
 * Collect dispatches (must be entirely collected before dispatching - see unit
 * tests). Lazily allocate the array to conserve memory.  We must loop through
 * each event and perform the traversal for each one. We can not perform a
 * single traversal for the entire collection of events because each event may
 * have a different target.
 */
function accumulateTwoPhaseDispatchesSingle(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(
      event.dispatchMarker,
      accumulateDirectionalDispatches,
      event
    );
  }
}


/**
 * Accumulates without regard to direction, does not look for phased
 * registration names. Same as `accumulateDirectDispatchesSingle` but without
 * requiring that the `dispatchMarker` be the same as the dispatched ID.
 */
function accumulateDispatches(id, ignoredDirection, event) {
  if (event && event.dispatchConfig.registrationName) {
    var registrationName = event.dispatchConfig.registrationName;
    var listener = getListener(id, registrationName);
    if (listener) {
      event._dispatchListeners = accumulate(event._dispatchListeners, listener);
      event._dispatchIDs = accumulate(event._dispatchIDs, id);
    }
  }
}

/**
 * Accumulates dispatches on an `SyntheticEvent`, but only for the
 * `dispatchMarker`.
 * @param {SyntheticEvent} event
 */
function accumulateDirectDispatchesSingle(event) {
  if (event && event.dispatchConfig.registrationName) {
    accumulateDispatches(event.dispatchMarker, null, event);
  }
}

function accumulateTwoPhaseDispatches(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
}

function accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {
  EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(
    fromID,
    toID,
    accumulateDispatches,
    leave,
    enter
  );
}


function accumulateDirectDispatches(events) {
  forEachAccumulated(events, accumulateDirectDispatchesSingle);
}



/**
 * A small set of propagation patterns, each of which will accept a small amount
 * of information, and generate a set of "dispatch ready event objects" - which
 * are sets of events that have already been annotated with a set of dispatched
 * listener functions/ids. The API is designed this way to discourage these
 * propagation strategies from actually executing the dispatches, since we
 * always want to collect the entire set of dispatches before executing event a
 * single one.
 *
 * @constructor EventPropagators
 */
var EventPropagators = {
  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
  accumulateDirectDispatches: accumulateDirectDispatches,
  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
};

module.exports = EventPropagators;

}).call(this,require('_process'))
},{"./EventConstants":17,"./EventPluginHub":19,"./accumulate":96,"./forEachAccumulated":109,"_process":147}],23:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ExecutionEnvironment
 */

/*jslint evil: true */

"use strict";

var canUseDOM = !!(
  typeof window !== 'undefined' &&
  window.document &&
  window.document.createElement
);

/**
 * Simple, lightweight module assisting with the detection and context of
 * Worker. Helps avoid circular dependencies and allows code to reason about
 * whether or not they are in a Worker, even if they never include the main
 * `ReactWorker` dependency.
 */
var ExecutionEnvironment = {

  canUseDOM: canUseDOM,

  canUseWorkers: typeof Worker !== 'undefined',

  canUseEventListeners:
    canUseDOM && !!(window.addEventListener || window.attachEvent),

  canUseViewport: canUseDOM && !!window.screen,

  isInWorker: !canUseDOM // For now, this is true - might change in the future.

};

module.exports = ExecutionEnvironment;

},{}],24:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule HTMLDOMPropertyConfig
 */

/*jslint bitwise: true*/

"use strict";

var DOMProperty = require("./DOMProperty");
var ExecutionEnvironment = require("./ExecutionEnvironment");

var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;
var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
var HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;
var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
var HAS_POSITIVE_NUMERIC_VALUE =
  DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
var HAS_OVERLOADED_BOOLEAN_VALUE =
  DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

var hasSVG;
if (ExecutionEnvironment.canUseDOM) {
  var implementation = document.implementation;
  hasSVG = (
    implementation &&
    implementation.hasFeature &&
    implementation.hasFeature(
      'http://www.w3.org/TR/SVG11/feature#BasicStructure',
      '1.1'
    )
  );
}


var HTMLDOMPropertyConfig = {
  isCustomAttribute: RegExp.prototype.test.bind(
    /^(data|aria)-[a-z_][a-z\d_.\-]*$/
  ),
  Properties: {
    /**
     * Standard Properties
     */
    accept: null,
    accessKey: null,
    action: null,
    allowFullScreen: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    allowTransparency: MUST_USE_ATTRIBUTE,
    alt: null,
    async: HAS_BOOLEAN_VALUE,
    autoComplete: null,
    // autoFocus is polyfilled/normalized by AutoFocusMixin
    // autoFocus: HAS_BOOLEAN_VALUE,
    autoPlay: HAS_BOOLEAN_VALUE,
    cellPadding: null,
    cellSpacing: null,
    charSet: MUST_USE_ATTRIBUTE,
    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    // To set className on SVG elements, it's necessary to use .setAttribute;
    // this works on HTML elements too in all browsers except IE8. Conveniently,
    // IE8 doesn't support SVG and so we can simply use the attribute in
    // browsers that support SVG and the property in browsers that don't,
    // regardless of whether the element is HTML or SVG.
    className: hasSVG ? MUST_USE_ATTRIBUTE : MUST_USE_PROPERTY,
    cols: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    colSpan: null,
    content: null,
    contentEditable: null,
    contextMenu: MUST_USE_ATTRIBUTE,
    controls: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    coords: null,
    crossOrigin: null,
    data: null, // For `<object />` acts as `src`.
    dateTime: MUST_USE_ATTRIBUTE,
    defer: HAS_BOOLEAN_VALUE,
    dir: null,
    disabled: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    download: HAS_OVERLOADED_BOOLEAN_VALUE,
    draggable: null,
    encType: null,
    form: MUST_USE_ATTRIBUTE,
    formNoValidate: HAS_BOOLEAN_VALUE,
    frameBorder: MUST_USE_ATTRIBUTE,
    height: MUST_USE_ATTRIBUTE,
    hidden: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    href: null,
    hrefLang: null,
    htmlFor: null,
    httpEquiv: null,
    icon: null,
    id: MUST_USE_PROPERTY,
    label: null,
    lang: null,
    list: null,
    loop: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    max: null,
    maxLength: MUST_USE_ATTRIBUTE,
    mediaGroup: null,
    method: null,
    min: null,
    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    name: null,
    noValidate: HAS_BOOLEAN_VALUE,
    pattern: null,
    placeholder: null,
    poster: null,
    preload: null,
    radioGroup: null,
    readOnly: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    rel: null,
    required: HAS_BOOLEAN_VALUE,
    role: MUST_USE_ATTRIBUTE,
    rows: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    rowSpan: null,
    sandbox: null,
    scope: null,
    scrollLeft: MUST_USE_PROPERTY,
    scrolling: null,
    scrollTop: MUST_USE_PROPERTY,
    seamless: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    shape: null,
    size: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    span: HAS_POSITIVE_NUMERIC_VALUE,
    spellCheck: null,
    src: null,
    srcDoc: MUST_USE_PROPERTY,
    srcSet: null,
    start: HAS_NUMERIC_VALUE,
    step: null,
    style: null,
    tabIndex: null,
    target: null,
    title: null,
    type: null,
    useMap: null,
    value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,
    width: MUST_USE_ATTRIBUTE,
    wmode: MUST_USE_ATTRIBUTE,

    /**
     * Non-standard Properties
     */
    autoCapitalize: null, // Supported in Mobile Safari for keyboard hints
    autoCorrect: null, // Supported in Mobile Safari for keyboard hints
    itemProp: MUST_USE_ATTRIBUTE, // Microdata: http://schema.org/docs/gs.html
    itemScope: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE, // Microdata: http://schema.org/docs/gs.html
    itemType: MUST_USE_ATTRIBUTE, // Microdata: http://schema.org/docs/gs.html
    property: null // Supports OG in meta tags
  },
  DOMAttributeNames: {
    className: 'class',
    htmlFor: 'for',
    httpEquiv: 'http-equiv'
  },
  DOMPropertyNames: {
    autoCapitalize: 'autocapitalize',
    autoComplete: 'autocomplete',
    autoCorrect: 'autocorrect',
    autoFocus: 'autofocus',
    autoPlay: 'autoplay',
    encType: 'enctype',
    hrefLang: 'hreflang',
    radioGroup: 'radiogroup',
    spellCheck: 'spellcheck',
    srcDoc: 'srcdoc',
    srcSet: 'srcset'
  }
};

module.exports = HTMLDOMPropertyConfig;

},{"./DOMProperty":12,"./ExecutionEnvironment":23}],25:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule LinkedValueUtils
 * @typechecks static-only
 */

"use strict";

var ReactPropTypes = require("./ReactPropTypes");

var invariant = require("./invariant");

var hasReadOnlyValue = {
  'button': true,
  'checkbox': true,
  'image': true,
  'hidden': true,
  'radio': true,
  'reset': true,
  'submit': true
};

function _assertSingleLink(input) {
  ("production" !== process.env.NODE_ENV ? invariant(
    input.props.checkedLink == null || input.props.valueLink == null,
    'Cannot provide a checkedLink and a valueLink. If you want to use ' +
    'checkedLink, you probably don\'t want to use valueLink and vice versa.'
  ) : invariant(input.props.checkedLink == null || input.props.valueLink == null));
}
function _assertValueLink(input) {
  _assertSingleLink(input);
  ("production" !== process.env.NODE_ENV ? invariant(
    input.props.value == null && input.props.onChange == null,
    'Cannot provide a valueLink and a value or onChange event. If you want ' +
    'to use value or onChange, you probably don\'t want to use valueLink.'
  ) : invariant(input.props.value == null && input.props.onChange == null));
}

function _assertCheckedLink(input) {
  _assertSingleLink(input);
  ("production" !== process.env.NODE_ENV ? invariant(
    input.props.checked == null && input.props.onChange == null,
    'Cannot provide a checkedLink and a checked property or onChange event. ' +
    'If you want to use checked or onChange, you probably don\'t want to ' +
    'use checkedLink'
  ) : invariant(input.props.checked == null && input.props.onChange == null));
}

/**
 * @param {SyntheticEvent} e change event to handle
 */
function _handleLinkedValueChange(e) {
  /*jshint validthis:true */
  this.props.valueLink.requestChange(e.target.value);
}

/**
  * @param {SyntheticEvent} e change event to handle
  */
function _handleLinkedCheckChange(e) {
  /*jshint validthis:true */
  this.props.checkedLink.requestChange(e.target.checked);
}

/**
 * Provide a linked `value` attribute for controlled forms. You should not use
 * this outside of the ReactDOM controlled form components.
 */
var LinkedValueUtils = {
  Mixin: {
    propTypes: {
      value: function(props, propName, componentName) {
        if (!props[propName] ||
            hasReadOnlyValue[props.type] ||
            props.onChange ||
            props.readOnly ||
            props.disabled) {
          return;
        }
        return new Error(
          'You provided a `value` prop to a form field without an ' +
          '`onChange` handler. This will render a read-only field. If ' +
          'the field should be mutable use `defaultValue`. Otherwise, ' +
          'set either `onChange` or `readOnly`.'
        );
      },
      checked: function(props, propName, componentName) {
        if (!props[propName] ||
            props.onChange ||
            props.readOnly ||
            props.disabled) {
          return;
        }
        return new Error(
          'You provided a `checked` prop to a form field without an ' +
          '`onChange` handler. This will render a read-only field. If ' +
          'the field should be mutable use `defaultChecked`. Otherwise, ' +
          'set either `onChange` or `readOnly`.'
        );
      },
      onChange: ReactPropTypes.func
    }
  },

  /**
   * @param {ReactComponent} input Form component
   * @return {*} current value of the input either from value prop or link.
   */
  getValue: function(input) {
    if (input.props.valueLink) {
      _assertValueLink(input);
      return input.props.valueLink.value;
    }
    return input.props.value;
  },

  /**
   * @param {ReactComponent} input Form component
   * @return {*} current checked status of the input either from checked prop
   *             or link.
   */
  getChecked: function(input) {
    if (input.props.checkedLink) {
      _assertCheckedLink(input);
      return input.props.checkedLink.value;
    }
    return input.props.checked;
  },

  /**
   * @param {ReactComponent} input Form component
   * @return {function} change callback either from onChange prop or link.
   */
  getOnChange: function(input) {
    if (input.props.valueLink) {
      _assertValueLink(input);
      return _handleLinkedValueChange;
    } else if (input.props.checkedLink) {
      _assertCheckedLink(input);
      return _handleLinkedCheckChange;
    }
    return input.props.onChange;
  }
};

module.exports = LinkedValueUtils;

}).call(this,require('_process'))
},{"./ReactPropTypes":71,"./invariant":122,"_process":147}],26:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule LocalEventTrapMixin
 */

"use strict";

var ReactBrowserEventEmitter = require("./ReactBrowserEventEmitter");

var accumulate = require("./accumulate");
var forEachAccumulated = require("./forEachAccumulated");
var invariant = require("./invariant");

function remove(event) {
  event.remove();
}

var LocalEventTrapMixin = {
  trapBubbledEvent:function(topLevelType, handlerBaseName) {
    ("production" !== process.env.NODE_ENV ? invariant(this.isMounted(), 'Must be mounted to trap events') : invariant(this.isMounted()));
    var listener = ReactBrowserEventEmitter.trapBubbledEvent(
      topLevelType,
      handlerBaseName,
      this.getDOMNode()
    );
    this._localEventListeners = accumulate(this._localEventListeners, listener);
  },

  // trapCapturedEvent would look nearly identical. We don't implement that
  // method because it isn't currently needed.

  componentWillUnmount:function() {
    if (this._localEventListeners) {
      forEachAccumulated(this._localEventListeners, remove);
    }
  }
};

module.exports = LocalEventTrapMixin;

}).call(this,require('_process'))
},{"./ReactBrowserEventEmitter":31,"./accumulate":96,"./forEachAccumulated":109,"./invariant":122,"_process":147}],27:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule MobileSafariClickEventPlugin
 * @typechecks static-only
 */

"use strict";

var EventConstants = require("./EventConstants");

var emptyFunction = require("./emptyFunction");

var topLevelTypes = EventConstants.topLevelTypes;

/**
 * Mobile Safari does not fire properly bubble click events on non-interactive
 * elements, which means delegated click listeners do not fire. The workaround
 * for this bug involves attaching an empty click listener on the target node.
 *
 * This particular plugin works around the bug by attaching an empty click
 * listener on `touchstart` (which does fire on every element).
 */
var MobileSafariClickEventPlugin = {

  eventTypes: null,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    if (topLevelType === topLevelTypes.topTouchStart) {
      var target = nativeEvent.target;
      if (target && !target.onclick) {
        target.onclick = emptyFunction;
      }
    }
  }

};

module.exports = MobileSafariClickEventPlugin;

},{"./EventConstants":17,"./emptyFunction":104}],28:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule PooledClass
 */

"use strict";

var invariant = require("./invariant");

/**
 * Static poolers. Several custom versions for each potential number of
 * arguments. A completely generic pooler is easy to implement, but would
 * require accessing the `arguments` object. In each of these, `this` refers to
 * the Class itself, not an instance. If any others are needed, simply add them
 * here, or in their own files.
 */
var oneArgumentPooler = function(copyFieldsFrom) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, copyFieldsFrom);
    return instance;
  } else {
    return new Klass(copyFieldsFrom);
  }
};

var twoArgumentPooler = function(a1, a2) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2);
    return instance;
  } else {
    return new Klass(a1, a2);
  }
};

var threeArgumentPooler = function(a1, a2, a3) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3);
    return instance;
  } else {
    return new Klass(a1, a2, a3);
  }
};

var fiveArgumentPooler = function(a1, a2, a3, a4, a5) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3, a4, a5);
    return instance;
  } else {
    return new Klass(a1, a2, a3, a4, a5);
  }
};

var standardReleaser = function(instance) {
  var Klass = this;
  ("production" !== process.env.NODE_ENV ? invariant(
    instance instanceof Klass,
    'Trying to release an instance into a pool of a different type.'
  ) : invariant(instance instanceof Klass));
  if (instance.destructor) {
    instance.destructor();
  }
  if (Klass.instancePool.length < Klass.poolSize) {
    Klass.instancePool.push(instance);
  }
};

var DEFAULT_POOL_SIZE = 10;
var DEFAULT_POOLER = oneArgumentPooler;

/**
 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
 * itself (statically) not adding any prototypical fields. Any CopyConstructor
 * you give this may have a `poolSize` property, and will look for a
 * prototypical `destructor` on instances (optional).
 *
 * @param {Function} CopyConstructor Constructor that can be used to reset.
 * @param {Function} pooler Customizable pooler.
 */
var addPoolingTo = function(CopyConstructor, pooler) {
  var NewKlass = CopyConstructor;
  NewKlass.instancePool = [];
  NewKlass.getPooled = pooler || DEFAULT_POOLER;
  if (!NewKlass.poolSize) {
    NewKlass.poolSize = DEFAULT_POOL_SIZE;
  }
  NewKlass.release = standardReleaser;
  return NewKlass;
};

var PooledClass = {
  addPoolingTo: addPoolingTo,
  oneArgumentPooler: oneArgumentPooler,
  twoArgumentPooler: twoArgumentPooler,
  threeArgumentPooler: threeArgumentPooler,
  fiveArgumentPooler: fiveArgumentPooler
};

module.exports = PooledClass;

}).call(this,require('_process'))
},{"./invariant":122,"_process":147}],29:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule React
 */

"use strict";

var DOMPropertyOperations = require("./DOMPropertyOperations");
var EventPluginUtils = require("./EventPluginUtils");
var ReactChildren = require("./ReactChildren");
var ReactComponent = require("./ReactComponent");
var ReactCompositeComponent = require("./ReactCompositeComponent");
var ReactContext = require("./ReactContext");
var ReactCurrentOwner = require("./ReactCurrentOwner");
var ReactDescriptor = require("./ReactDescriptor");
var ReactDOM = require("./ReactDOM");
var ReactDOMComponent = require("./ReactDOMComponent");
var ReactDefaultInjection = require("./ReactDefaultInjection");
var ReactInstanceHandles = require("./ReactInstanceHandles");
var ReactMount = require("./ReactMount");
var ReactMultiChild = require("./ReactMultiChild");
var ReactPerf = require("./ReactPerf");
var ReactPropTypes = require("./ReactPropTypes");
var ReactServerRendering = require("./ReactServerRendering");
var ReactTextComponent = require("./ReactTextComponent");

var onlyChild = require("./onlyChild");

ReactDefaultInjection.inject();

var React = {
  Children: {
    map: ReactChildren.map,
    forEach: ReactChildren.forEach,
    count: ReactChildren.count,
    only: onlyChild
  },
  DOM: ReactDOM,
  PropTypes: ReactPropTypes,
  initializeTouchEvents: function(shouldUseTouch) {
    EventPluginUtils.useTouchEvents = shouldUseTouch;
  },
  createClass: ReactCompositeComponent.createClass,
  createDescriptor: function(type, props, children) {
    var args = Array.prototype.slice.call(arguments, 1);
    return type.apply(null, args);
  },
  constructAndRenderComponent: ReactMount.constructAndRenderComponent,
  constructAndRenderComponentByID: ReactMount.constructAndRenderComponentByID,
  renderComponent: ReactPerf.measure(
    'React',
    'renderComponent',
    ReactMount.renderComponent
  ),
  renderComponentToString: ReactServerRendering.renderComponentToString,
  renderComponentToStaticMarkup:
    ReactServerRendering.renderComponentToStaticMarkup,
  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
  isValidClass: ReactDescriptor.isValidFactory,
  isValidComponent: ReactDescriptor.isValidDescriptor,
  withContext: ReactContext.withContext,
  __internals: {
    Component: ReactComponent,
    CurrentOwner: ReactCurrentOwner,
    DOMComponent: ReactDOMComponent,
    DOMPropertyOperations: DOMPropertyOperations,
    InstanceHandles: ReactInstanceHandles,
    Mount: ReactMount,
    MultiChild: ReactMultiChild,
    TextComponent: ReactTextComponent
  }
};

if ("production" !== process.env.NODE_ENV) {
  var ExecutionEnvironment = require("./ExecutionEnvironment");
  if (ExecutionEnvironment.canUseDOM &&
      window.top === window.self &&
      navigator.userAgent.indexOf('Chrome') > -1) {
    console.debug(
      'Download the React DevTools for a better development experience: ' +
      'http://fb.me/react-devtools'
    );

    var expectedFeatures = [
      // shims
      Array.isArray,
      Array.prototype.every,
      Array.prototype.forEach,
      Array.prototype.indexOf,
      Array.prototype.map,
      Date.now,
      Function.prototype.bind,
      Object.keys,
      String.prototype.split,
      String.prototype.trim,

      // shams
      Object.create,
      Object.freeze
    ];

    for (var i in expectedFeatures) {
      if (!expectedFeatures[i]) {
        console.error(
          'One or more ES5 shim/shams expected by React are not available: ' +
          'http://fb.me/react-warning-polyfills'
        );
        break;
      }
    }
  }
}

// Version exists only in the open-source version of React, not in Facebook's
// internal version.
React.version = '0.11.1';

module.exports = React;

}).call(this,require('_process'))
},{"./DOMPropertyOperations":13,"./EventPluginUtils":21,"./ExecutionEnvironment":23,"./ReactChildren":32,"./ReactComponent":33,"./ReactCompositeComponent":35,"./ReactContext":36,"./ReactCurrentOwner":37,"./ReactDOM":38,"./ReactDOMComponent":40,"./ReactDefaultInjection":50,"./ReactDescriptor":53,"./ReactInstanceHandles":61,"./ReactMount":63,"./ReactMultiChild":64,"./ReactPerf":67,"./ReactPropTypes":71,"./ReactServerRendering":75,"./ReactTextComponent":77,"./onlyChild":137,"_process":147}],30:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactBrowserComponentMixin
 */

"use strict";

var ReactEmptyComponent = require("./ReactEmptyComponent");
var ReactMount = require("./ReactMount");

var invariant = require("./invariant");

var ReactBrowserComponentMixin = {
  /**
   * Returns the DOM node rendered by this component.
   *
   * @return {DOMElement} The root node of this component.
   * @final
   * @protected
   */
  getDOMNode: function() {
    ("production" !== process.env.NODE_ENV ? invariant(
      this.isMounted(),
      'getDOMNode(): A component must be mounted to have a DOM node.'
    ) : invariant(this.isMounted()));
    if (ReactEmptyComponent.isNullComponentID(this._rootNodeID)) {
      return null;
    }
    return ReactMount.getNode(this._rootNodeID);
  }
};

module.exports = ReactBrowserComponentMixin;

}).call(this,require('_process'))
},{"./ReactEmptyComponent":55,"./ReactMount":63,"./invariant":122,"_process":147}],31:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactBrowserEventEmitter
 * @typechecks static-only
 */

"use strict";

var EventConstants = require("./EventConstants");
var EventPluginHub = require("./EventPluginHub");
var EventPluginRegistry = require("./EventPluginRegistry");
var ReactEventEmitterMixin = require("./ReactEventEmitterMixin");
var ViewportMetrics = require("./ViewportMetrics");

var isEventSupported = require("./isEventSupported");
var merge = require("./merge");

/**
 * Summary of `ReactBrowserEventEmitter` event handling:
 *
 *  - Top-level delegation is used to trap most native browser events. This
 *    may only occur in the main thread and is the responsibility of
 *    ReactEventListener, which is injected and can therefore support pluggable
 *    event sources. This is the only work that occurs in the main thread.
 *
 *  - We normalize and de-duplicate events to account for browser quirks. This
 *    may be done in the worker thread.
 *
 *  - Forward these native events (with the associated top-level type used to
 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
 *    to extract any synthetic events.
 *
 *  - The `EventPluginHub` will then process each event by annotating them with
 *    "dispatches", a sequence of listeners and IDs that care about that event.
 *
 *  - The `EventPluginHub` then dispatches the events.
 *
 * Overview of React and the event system:
 *
 * +------------+    .
 * |    DOM     |    .
 * +------------+    .
 *       |           .
 *       v           .
 * +------------+    .
 * | ReactEvent |    .
 * |  Listener  |    .
 * +------------+    .                         +-----------+
 *       |           .               +--------+|SimpleEvent|
 *       |           .               |         |Plugin     |
 * +-----|------+    .               v         +-----------+
 * |     |      |    .    +--------------+                    +------------+
 * |     +-----------.--->|EventPluginHub|                    |    Event   |
 * |            |    .    |              |     +-----------+  | Propagators|
 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
 * |            |    .    |              |     +-----------+  |  utilities |
 * |     +-----------.--->|              |                    +------------+
 * |     |      |    .    +--------------+
 * +-----|------+    .                ^        +-----------+
 *       |           .                |        |Enter/Leave|
 *       +           .                +-------+|Plugin     |
 * +-------------+   .                         +-----------+
 * | application |   .
 * |-------------|   .
 * |             |   .
 * |             |   .
 * +-------------+   .
 *                   .
 *    React Core     .  General Purpose Event Plugin System
 */

var alreadyListeningTo = {};
var isMonitoringScrollValue = false;
var reactTopListenersCounter = 0;

// For events like 'submit' which don't consistently bubble (which we trap at a
// lower node than `document`), binding at `document` would cause duplicate
// events so we don't include them here
var topEventMapping = {
  topBlur: 'blur',
  topChange: 'change',
  topClick: 'click',
  topCompositionEnd: 'compositionend',
  topCompositionStart: 'compositionstart',
  topCompositionUpdate: 'compositionupdate',
  topContextMenu: 'contextmenu',
  topCopy: 'copy',
  topCut: 'cut',
  topDoubleClick: 'dblclick',
  topDrag: 'drag',
  topDragEnd: 'dragend',
  topDragEnter: 'dragenter',
  topDragExit: 'dragexit',
  topDragLeave: 'dragleave',
  topDragOver: 'dragover',
  topDragStart: 'dragstart',
  topDrop: 'drop',
  topFocus: 'focus',
  topInput: 'input',
  topKeyDown: 'keydown',
  topKeyPress: 'keypress',
  topKeyUp: 'keyup',
  topMouseDown: 'mousedown',
  topMouseMove: 'mousemove',
  topMouseOut: 'mouseout',
  topMouseOver: 'mouseover',
  topMouseUp: 'mouseup',
  topPaste: 'paste',
  topScroll: 'scroll',
  topSelectionChange: 'selectionchange',
  topTextInput: 'textInput',
  topTouchCancel: 'touchcancel',
  topTouchEnd: 'touchend',
  topTouchMove: 'touchmove',
  topTouchStart: 'touchstart',
  topWheel: 'wheel'
};

/**
 * To ensure no conflicts with other potential React instances on the page
 */
var topListenersIDKey = "_reactListenersID" + String(Math.random()).slice(2);

function getListeningForDocument(mountAt) {
  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
  // directly.
  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
    mountAt[topListenersIDKey] = reactTopListenersCounter++;
    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
  }
  return alreadyListeningTo[mountAt[topListenersIDKey]];
}

/**
 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
 * example:
 *
 *   ReactBrowserEventEmitter.putListener('myID', 'onClick', myFunction);
 *
 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
 *
 * @internal
 */
var ReactBrowserEventEmitter = merge(ReactEventEmitterMixin, {

  /**
   * Injectable event backend
   */
  ReactEventListener: null,

  injection: {
    /**
     * @param {object} ReactEventListener
     */
    injectReactEventListener: function(ReactEventListener) {
      ReactEventListener.setHandleTopLevel(
        ReactBrowserEventEmitter.handleTopLevel
      );
      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
    }
  },

  /**
   * Sets whether or not any created callbacks should be enabled.
   *
   * @param {boolean} enabled True if callbacks should be enabled.
   */
  setEnabled: function(enabled) {
    if (ReactBrowserEventEmitter.ReactEventListener) {
      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
    }
  },

  /**
   * @return {boolean} True if callbacks are enabled.
   */
  isEnabled: function() {
    return !!(
      ReactBrowserEventEmitter.ReactEventListener &&
      ReactBrowserEventEmitter.ReactEventListener.isEnabled()
    );
  },

  /**
   * We listen for bubbled touch events on the document object.
   *
   * Firefox v8.01 (and possibly others) exhibited strange behavior when
   * mounting `onmousemove` events at some node that was not the document
   * element. The symptoms were that if your mouse is not moving over something
   * contained within that mount point (for example on the background) the
   * top-level listeners for `onmousemove` won't be called. However, if you
   * register the `mousemove` on the document object, then it will of course
   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
   * top-level listeners to the document object only, at least for these
   * movement types of events and possibly all events.
   *
   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
   *
   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
   * they bubble to document.
   *
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {object} contentDocumentHandle Document which owns the container
   */
  listenTo: function(registrationName, contentDocumentHandle) {
    var mountAt = contentDocumentHandle;
    var isListening = getListeningForDocument(mountAt);
    var dependencies = EventPluginRegistry.
      registrationNameDependencies[registrationName];

    var topLevelTypes = EventConstants.topLevelTypes;
    for (var i = 0, l = dependencies.length; i < l; i++) {
      var dependency = dependencies[i];
      if (!(
            isListening.hasOwnProperty(dependency) &&
            isListening[dependency]
          )) {
        if (dependency === topLevelTypes.topWheel) {
          if (isEventSupported('wheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topWheel,
              'wheel',
              mountAt
            );
          } else if (isEventSupported('mousewheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topWheel,
              'mousewheel',
              mountAt
            );
          } else {
            // Firefox needs to capture a different mouse scroll event.
            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topWheel,
              'DOMMouseScroll',
              mountAt
            );
          }
        } else if (dependency === topLevelTypes.topScroll) {

          if (isEventSupported('scroll', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
              topLevelTypes.topScroll,
              'scroll',
              mountAt
            );
          } else {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topScroll,
              'scroll',
              ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE
            );
          }
        } else if (dependency === topLevelTypes.topFocus ||
            dependency === topLevelTypes.topBlur) {

          if (isEventSupported('focus', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
              topLevelTypes.topFocus,
              'focus',
              mountAt
            );
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
              topLevelTypes.topBlur,
              'blur',
              mountAt
            );
          } else if (isEventSupported('focusin')) {
            // IE has `focusin` and `focusout` events which bubble.
            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topFocus,
              'focusin',
              mountAt
            );
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topBlur,
              'focusout',
              mountAt
            );
          }

          // to make sure blur and focus event listeners are only attached once
          isListening[topLevelTypes.topBlur] = true;
          isListening[topLevelTypes.topFocus] = true;
        } else if (topEventMapping.hasOwnProperty(dependency)) {
          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
            dependency,
            topEventMapping[dependency],
            mountAt
          );
        }

        isListening[dependency] = true;
      }
    }
  },

  trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
      topLevelType,
      handlerBaseName,
      handle
    );
  },

  trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
      topLevelType,
      handlerBaseName,
      handle
    );
  },

  /**
   * Listens to window scroll and resize events. We cache scroll values so that
   * application code can access them without triggering reflows.
   *
   * NOTE: Scroll events do not bubble.
   *
   * @see http://www.quirksmode.org/dom/events/scroll.html
   */
  ensureScrollValueMonitoring: function(){
    if (!isMonitoringScrollValue) {
      var refresh = ViewportMetrics.refreshScrollValues;
      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
      isMonitoringScrollValue = true;
    }
  },

  eventNameDispatchConfigs: EventPluginHub.eventNameDispatchConfigs,

  registrationNameModules: EventPluginHub.registrationNameModules,

  putListener: EventPluginHub.putListener,

  getListener: EventPluginHub.getListener,

  deleteListener: EventPluginHub.deleteListener,

  deleteAllListeners: EventPluginHub.deleteAllListeners

});

module.exports = ReactBrowserEventEmitter;

},{"./EventConstants":17,"./EventPluginHub":19,"./EventPluginRegistry":20,"./ReactEventEmitterMixin":57,"./ViewportMetrics":95,"./isEventSupported":123,"./merge":132}],32:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactChildren
 */

"use strict";

var PooledClass = require("./PooledClass");

var traverseAllChildren = require("./traverseAllChildren");
var warning = require("./warning");

var twoArgumentPooler = PooledClass.twoArgumentPooler;
var threeArgumentPooler = PooledClass.threeArgumentPooler;

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * traversal. Allows avoiding binding callbacks.
 *
 * @constructor ForEachBookKeeping
 * @param {!function} forEachFunction Function to perform traversal with.
 * @param {?*} forEachContext Context to perform context with.
 */
function ForEachBookKeeping(forEachFunction, forEachContext) {
  this.forEachFunction = forEachFunction;
  this.forEachContext = forEachContext;
}
PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

function forEachSingleChild(traverseContext, child, name, i) {
  var forEachBookKeeping = traverseContext;
  forEachBookKeeping.forEachFunction.call(
    forEachBookKeeping.forEachContext, child, i);
}

/**
 * Iterates through children that are typically specified as `props.children`.
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc.
 * @param {*} forEachContext Context for forEachContext.
 */
function forEachChildren(children, forEachFunc, forEachContext) {
  if (children == null) {
    return children;
  }

  var traverseContext =
    ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
  traverseAllChildren(children, forEachSingleChild, traverseContext);
  ForEachBookKeeping.release(traverseContext);
}

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * mapping. Allows avoiding binding callbacks.
 *
 * @constructor MapBookKeeping
 * @param {!*} mapResult Object containing the ordered map of results.
 * @param {!function} mapFunction Function to perform mapping with.
 * @param {?*} mapContext Context to perform mapping with.
 */
function MapBookKeeping(mapResult, mapFunction, mapContext) {
  this.mapResult = mapResult;
  this.mapFunction = mapFunction;
  this.mapContext = mapContext;
}
PooledClass.addPoolingTo(MapBookKeeping, threeArgumentPooler);

function mapSingleChildIntoContext(traverseContext, child, name, i) {
  var mapBookKeeping = traverseContext;
  var mapResult = mapBookKeeping.mapResult;

  var keyUnique = !mapResult.hasOwnProperty(name);
  ("production" !== process.env.NODE_ENV ? warning(
    keyUnique,
    'ReactChildren.map(...): Encountered two children with the same key, ' +
    '`%s`. Child keys must be unique; when two children share a key, only ' +
    'the first child will be used.',
    name
  ) : null);

  if (keyUnique) {
    var mappedChild =
      mapBookKeeping.mapFunction.call(mapBookKeeping.mapContext, child, i);
    mapResult[name] = mappedChild;
  }
}

/**
 * Maps children that are typically specified as `props.children`.
 *
 * The provided mapFunction(child, key, index) will be called for each
 * leaf child.
 *
 * TODO: This may likely break any calls to `ReactChildren.map` that were
 * previously relying on the fact that we guarded against null children.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} mapFunction.
 * @param {*} mapContext Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */
function mapChildren(children, func, context) {
  if (children == null) {
    return children;
  }

  var mapResult = {};
  var traverseContext = MapBookKeeping.getPooled(mapResult, func, context);
  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
  MapBookKeeping.release(traverseContext);
  return mapResult;
}

function forEachSingleChildDummy(traverseContext, child, name, i) {
  return null;
}

/**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */
function countChildren(children, context) {
  return traverseAllChildren(children, forEachSingleChildDummy, null);
}

var ReactChildren = {
  forEach: forEachChildren,
  map: mapChildren,
  count: countChildren
};

module.exports = ReactChildren;

}).call(this,require('_process'))
},{"./PooledClass":28,"./traverseAllChildren":144,"./warning":145,"_process":147}],33:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactComponent
 */

"use strict";

var ReactDescriptor = require("./ReactDescriptor");
var ReactOwner = require("./ReactOwner");
var ReactUpdates = require("./ReactUpdates");

var invariant = require("./invariant");
var keyMirror = require("./keyMirror");
var merge = require("./merge");

/**
 * Every React component is in one of these life cycles.
 */
var ComponentLifeCycle = keyMirror({
  /**
   * Mounted components have a DOM node representation and are capable of
   * receiving new props.
   */
  MOUNTED: null,
  /**
   * Unmounted components are inactive and cannot receive new props.
   */
  UNMOUNTED: null
});

var injected = false;

/**
 * Optionally injectable environment dependent cleanup hook. (server vs.
 * browser etc). Example: A browser system caches DOM nodes based on component
 * ID and must remove that cache entry when this instance is unmounted.
 *
 * @private
 */
var unmountIDFromEnvironment = null;

/**
 * The "image" of a component tree, is the platform specific (typically
 * serialized) data that represents a tree of lower level UI building blocks.
 * On the web, this "image" is HTML markup which describes a construction of
 * low level `div` and `span` nodes. Other platforms may have different
 * encoding of this "image". This must be injected.
 *
 * @private
 */
var mountImageIntoNode = null;

/**
 * Components are the basic units of composition in React.
 *
 * Every component accepts a set of keyed input parameters known as "props" that
 * are initialized by the constructor. Once a component is mounted, the props
 * can be mutated using `setProps` or `replaceProps`.
 *
 * Every component is capable of the following operations:
 *
 *   `mountComponent`
 *     Initializes the component, renders markup, and registers event listeners.
 *
 *   `receiveComponent`
 *     Updates the rendered DOM nodes to match the given component.
 *
 *   `unmountComponent`
 *     Releases any resources allocated by this component.
 *
 * Components can also be "owned" by other components. Being owned by another
 * component means being constructed by that component. This is different from
 * being the child of a component, which means having a DOM representation that
 * is a child of the DOM representation of that component.
 *
 * @class ReactComponent
 */
var ReactComponent = {

  injection: {
    injectEnvironment: function(ReactComponentEnvironment) {
      ("production" !== process.env.NODE_ENV ? invariant(
        !injected,
        'ReactComponent: injectEnvironment() can only be called once.'
      ) : invariant(!injected));
      mountImageIntoNode = ReactComponentEnvironment.mountImageIntoNode;
      unmountIDFromEnvironment =
        ReactComponentEnvironment.unmountIDFromEnvironment;
      ReactComponent.BackendIDOperations =
        ReactComponentEnvironment.BackendIDOperations;
      injected = true;
    }
  },

  /**
   * @internal
   */
  LifeCycle: ComponentLifeCycle,

  /**
   * Injected module that provides ability to mutate individual properties.
   * Injected into the base class because many different subclasses need access
   * to this.
   *
   * @internal
   */
  BackendIDOperations: null,

  /**
   * Base functionality for every ReactComponent constructor. Mixed into the
   * `ReactComponent` prototype, but exposed statically for easy access.
   *
   * @lends {ReactComponent.prototype}
   */
  Mixin: {

    /**
     * Checks whether or not this component is mounted.
     *
     * @return {boolean} True if mounted, false otherwise.
     * @final
     * @protected
     */
    isMounted: function() {
      return this._lifeCycleState === ComponentLifeCycle.MOUNTED;
    },

    /**
     * Sets a subset of the props.
     *
     * @param {object} partialProps Subset of the next props.
     * @param {?function} callback Called after props are updated.
     * @final
     * @public
     */
    setProps: function(partialProps, callback) {
      // Merge with the pending descriptor if it exists, otherwise with existing
      // descriptor props.
      var descriptor = this._pendingDescriptor || this._descriptor;
      this.replaceProps(
        merge(descriptor.props, partialProps),
        callback
      );
    },

    /**
     * Replaces all of the props.
     *
     * @param {object} props New props.
     * @param {?function} callback Called after props are updated.
     * @final
     * @public
     */
    replaceProps: function(props, callback) {
      ("production" !== process.env.NODE_ENV ? invariant(
        this.isMounted(),
        'replaceProps(...): Can only update a mounted component.'
      ) : invariant(this.isMounted()));
      ("production" !== process.env.NODE_ENV ? invariant(
        this._mountDepth === 0,
        'replaceProps(...): You called `setProps` or `replaceProps` on a ' +
        'component with a parent. This is an anti-pattern since props will ' +
        'get reactively updated when rendered. Instead, change the owner\'s ' +
        '`render` method to pass the correct value as props to the component ' +
        'where it is created.'
      ) : invariant(this._mountDepth === 0));
      // This is a deoptimized path. We optimize for always having a descriptor.
      // This creates an extra internal descriptor.
      this._pendingDescriptor = ReactDescriptor.cloneAndReplaceProps(
        this._pendingDescriptor || this._descriptor,
        props
      );
      ReactUpdates.enqueueUpdate(this, callback);
    },

    /**
     * Schedule a partial update to the props. Only used for internal testing.
     *
     * @param {object} partialProps Subset of the next props.
     * @param {?function} callback Called after props are updated.
     * @final
     * @internal
     */
    _setPropsInternal: function(partialProps, callback) {
      // This is a deoptimized path. We optimize for always having a descriptor.
      // This creates an extra internal descriptor.
      var descriptor = this._pendingDescriptor || this._descriptor;
      this._pendingDescriptor = ReactDescriptor.cloneAndReplaceProps(
        descriptor,
        merge(descriptor.props, partialProps)
      );
      ReactUpdates.enqueueUpdate(this, callback);
    },

    /**
     * Base constructor for all React components.
     *
     * Subclasses that override this method should make sure to invoke
     * `ReactComponent.Mixin.construct.call(this, ...)`.
     *
     * @param {ReactDescriptor} descriptor
     * @internal
     */
    construct: function(descriptor) {
      // This is the public exposed props object after it has been processed
      // with default props. The descriptor's props represents the true internal
      // state of the props.
      this.props = descriptor.props;
      // Record the component responsible for creating this component.
      // This is accessible through the descriptor but we maintain an extra
      // field for compatibility with devtools and as a way to make an
      // incremental update. TODO: Consider deprecating this field.
      this._owner = descriptor._owner;

      // All components start unmounted.
      this._lifeCycleState = ComponentLifeCycle.UNMOUNTED;

      // See ReactUpdates.
      this._pendingCallbacks = null;

      // We keep the old descriptor and a reference to the pending descriptor
      // to track updates.
      this._descriptor = descriptor;
      this._pendingDescriptor = null;
    },

    /**
     * Initializes the component, renders markup, and registers event listeners.
     *
     * NOTE: This does not insert any nodes into the DOM.
     *
     * Subclasses that override this method should make sure to invoke
     * `ReactComponent.Mixin.mountComponent.call(this, ...)`.
     *
     * @param {string} rootID DOM ID of the root node.
     * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
     * @param {number} mountDepth number of components in the owner hierarchy.
     * @return {?string} Rendered markup to be inserted into the DOM.
     * @internal
     */
    mountComponent: function(rootID, transaction, mountDepth) {
      ("production" !== process.env.NODE_ENV ? invariant(
        !this.isMounted(),
        'mountComponent(%s, ...): Can only mount an unmounted component. ' +
        'Make sure to avoid storing components between renders or reusing a ' +
        'single component instance in multiple places.',
        rootID
      ) : invariant(!this.isMounted()));
      var props = this._descriptor.props;
      if (props.ref != null) {
        var owner = this._descriptor._owner;
        ReactOwner.addComponentAsRefTo(this, props.ref, owner);
      }
      this._rootNodeID = rootID;
      this._lifeCycleState = ComponentLifeCycle.MOUNTED;
      this._mountDepth = mountDepth;
      // Effectively: return '';
    },

    /**
     * Releases any resources allocated by `mountComponent`.
     *
     * NOTE: This does not remove any nodes from the DOM.
     *
     * Subclasses that override this method should make sure to invoke
     * `ReactComponent.Mixin.unmountComponent.call(this)`.
     *
     * @internal
     */
    unmountComponent: function() {
      ("production" !== process.env.NODE_ENV ? invariant(
        this.isMounted(),
        'unmountComponent(): Can only unmount a mounted component.'
      ) : invariant(this.isMounted()));
      var props = this.props;
      if (props.ref != null) {
        ReactOwner.removeComponentAsRefFrom(this, props.ref, this._owner);
      }
      unmountIDFromEnvironment(this._rootNodeID);
      this._rootNodeID = null;
      this._lifeCycleState = ComponentLifeCycle.UNMOUNTED;
    },

    /**
     * Given a new instance of this component, updates the rendered DOM nodes
     * as if that instance was rendered instead.
     *
     * Subclasses that override this method should make sure to invoke
     * `ReactComponent.Mixin.receiveComponent.call(this, ...)`.
     *
     * @param {object} nextComponent Next set of properties.
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    receiveComponent: function(nextDescriptor, transaction) {
      ("production" !== process.env.NODE_ENV ? invariant(
        this.isMounted(),
        'receiveComponent(...): Can only update a mounted component.'
      ) : invariant(this.isMounted()));
      this._pendingDescriptor = nextDescriptor;
      this.performUpdateIfNecessary(transaction);
    },

    /**
     * If `_pendingDescriptor` is set, update the component.
     *
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    performUpdateIfNecessary: function(transaction) {
      if (this._pendingDescriptor == null) {
        return;
      }
      var prevDescriptor = this._descriptor;
      var nextDescriptor = this._pendingDescriptor;
      this._descriptor = nextDescriptor;
      this.props = nextDescriptor.props;
      this._owner = nextDescriptor._owner;
      this._pendingDescriptor = null;
      this.updateComponent(transaction, prevDescriptor);
    },

    /**
     * Updates the component's currently mounted representation.
     *
     * @param {ReactReconcileTransaction} transaction
     * @param {object} prevDescriptor
     * @internal
     */
    updateComponent: function(transaction, prevDescriptor) {
      var nextDescriptor = this._descriptor;

      // If either the owner or a `ref` has changed, make sure the newest owner
      // has stored a reference to `this`, and the previous owner (if different)
      // has forgotten the reference to `this`. We use the descriptor instead
      // of the public this.props because the post processing cannot determine
      // a ref. The ref conceptually lives on the descriptor.

      // TODO: Should this even be possible? The owner cannot change because
      // it's forbidden by shouldUpdateReactComponent. The ref can change
      // if you swap the keys of but not the refs. Reconsider where this check
      // is made. It probably belongs where the key checking and
      // instantiateReactComponent is done.

      if (nextDescriptor._owner !== prevDescriptor._owner ||
          nextDescriptor.props.ref !== prevDescriptor.props.ref) {
        if (prevDescriptor.props.ref != null) {
          ReactOwner.removeComponentAsRefFrom(
            this, prevDescriptor.props.ref, prevDescriptor._owner
          );
        }
        // Correct, even if the owner is the same, and only the ref has changed.
        if (nextDescriptor.props.ref != null) {
          ReactOwner.addComponentAsRefTo(
            this,
            nextDescriptor.props.ref,
            nextDescriptor._owner
          );
        }
      }
    },

    /**
     * Mounts this component and inserts it into the DOM.
     *
     * @param {string} rootID DOM ID of the root node.
     * @param {DOMElement} container DOM element to mount into.
     * @param {boolean} shouldReuseMarkup If true, do not insert markup
     * @final
     * @internal
     * @see {ReactMount.renderComponent}
     */
    mountComponentIntoNode: function(rootID, container, shouldReuseMarkup) {
      var transaction = ReactUpdates.ReactReconcileTransaction.getPooled();
      transaction.perform(
        this._mountComponentIntoNode,
        this,
        rootID,
        container,
        transaction,
        shouldReuseMarkup
      );
      ReactUpdates.ReactReconcileTransaction.release(transaction);
    },

    /**
     * @param {string} rootID DOM ID of the root node.
     * @param {DOMElement} container DOM element to mount into.
     * @param {ReactReconcileTransaction} transaction
     * @param {boolean} shouldReuseMarkup If true, do not insert markup
     * @final
     * @private
     */
    _mountComponentIntoNode: function(
        rootID,
        container,
        transaction,
        shouldReuseMarkup) {
      var markup = this.mountComponent(rootID, transaction, 0);
      mountImageIntoNode(markup, container, shouldReuseMarkup);
    },

    /**
     * Checks if this component is owned by the supplied `owner` component.
     *
     * @param {ReactComponent} owner Component to check.
     * @return {boolean} True if `owners` owns this component.
     * @final
     * @internal
     */
    isOwnedBy: function(owner) {
      return this._owner === owner;
    },

    /**
     * Gets another component, that shares the same owner as this one, by ref.
     *
     * @param {string} ref of a sibling Component.
     * @return {?ReactComponent} the actual sibling Component.
     * @final
     * @internal
     */
    getSiblingByRef: function(ref) {
      var owner = this._owner;
      if (!owner || !owner.refs) {
        return null;
      }
      return owner.refs[ref];
    }
  }
};

module.exports = ReactComponent;

}).call(this,require('_process'))
},{"./ReactDescriptor":53,"./ReactOwner":66,"./ReactUpdates":78,"./invariant":122,"./keyMirror":128,"./merge":132,"_process":147}],34:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactComponentBrowserEnvironment
 */

/*jslint evil: true */

"use strict";

var ReactDOMIDOperations = require("./ReactDOMIDOperations");
var ReactMarkupChecksum = require("./ReactMarkupChecksum");
var ReactMount = require("./ReactMount");
var ReactPerf = require("./ReactPerf");
var ReactReconcileTransaction = require("./ReactReconcileTransaction");

var getReactRootElementInContainer = require("./getReactRootElementInContainer");
var invariant = require("./invariant");
var setInnerHTML = require("./setInnerHTML");


var ELEMENT_NODE_TYPE = 1;
var DOC_NODE_TYPE = 9;


/**
 * Abstracts away all functionality of `ReactComponent` requires knowledge of
 * the browser context.
 */
var ReactComponentBrowserEnvironment = {
  ReactReconcileTransaction: ReactReconcileTransaction,

  BackendIDOperations: ReactDOMIDOperations,

  /**
   * If a particular environment requires that some resources be cleaned up,
   * specify this in the injected Mixin. In the DOM, we would likely want to
   * purge any cached node ID lookups.
   *
   * @private
   */
  unmountIDFromEnvironment: function(rootNodeID) {
    ReactMount.purgeID(rootNodeID);
  },

  /**
   * @param {string} markup Markup string to place into the DOM Element.
   * @param {DOMElement} container DOM Element to insert markup into.
   * @param {boolean} shouldReuseMarkup Should reuse the existing markup in the
   * container if possible.
   */
  mountImageIntoNode: ReactPerf.measure(
    'ReactComponentBrowserEnvironment',
    'mountImageIntoNode',
    function(markup, container, shouldReuseMarkup) {
      ("production" !== process.env.NODE_ENV ? invariant(
        container && (
          container.nodeType === ELEMENT_NODE_TYPE ||
            container.nodeType === DOC_NODE_TYPE
        ),
        'mountComponentIntoNode(...): Target container is not valid.'
      ) : invariant(container && (
        container.nodeType === ELEMENT_NODE_TYPE ||
          container.nodeType === DOC_NODE_TYPE
      )));

      if (shouldReuseMarkup) {
        if (ReactMarkupChecksum.canReuseMarkup(
          markup,
          getReactRootElementInContainer(container))) {
          return;
        } else {
          ("production" !== process.env.NODE_ENV ? invariant(
            container.nodeType !== DOC_NODE_TYPE,
            'You\'re trying to render a component to the document using ' +
            'server rendering but the checksum was invalid. This usually ' +
            'means you rendered a different component type or props on ' +
            'the client from the one on the server, or your render() ' +
            'methods are impure. React cannot handle this case due to ' +
            'cross-browser quirks by rendering at the document root. You ' +
            'should look for environment dependent code in your components ' +
            'and ensure the props are the same client and server side.'
          ) : invariant(container.nodeType !== DOC_NODE_TYPE));

          if ("production" !== process.env.NODE_ENV) {
            console.warn(
              'React attempted to use reuse markup in a container but the ' +
              'checksum was invalid. This generally means that you are ' +
              'using server rendering and the markup generated on the ' +
              'server was not what the client was expecting. React injected ' +
              'new markup to compensate which works but you have lost many ' +
              'of the benefits of server rendering. Instead, figure out ' +
              'why the markup being generated is different on the client ' +
              'or server.'
            );
          }
        }
      }

      ("production" !== process.env.NODE_ENV ? invariant(
        container.nodeType !== DOC_NODE_TYPE,
        'You\'re trying to render a component to the document but ' +
          'you didn\'t use server rendering. We can\'t do this ' +
          'without using server rendering due to cross-browser quirks. ' +
          'See renderComponentToString() for server rendering.'
      ) : invariant(container.nodeType !== DOC_NODE_TYPE));

      setInnerHTML(container, markup);
    }
  )
};

module.exports = ReactComponentBrowserEnvironment;

}).call(this,require('_process'))
},{"./ReactDOMIDOperations":42,"./ReactMarkupChecksum":62,"./ReactMount":63,"./ReactPerf":67,"./ReactReconcileTransaction":73,"./getReactRootElementInContainer":116,"./invariant":122,"./setInnerHTML":140,"_process":147}],35:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactCompositeComponent
 */

"use strict";

var ReactComponent = require("./ReactComponent");
var ReactContext = require("./ReactContext");
var ReactCurrentOwner = require("./ReactCurrentOwner");
var ReactDescriptor = require("./ReactDescriptor");
var ReactDescriptorValidator = require("./ReactDescriptorValidator");
var ReactEmptyComponent = require("./ReactEmptyComponent");
var ReactErrorUtils = require("./ReactErrorUtils");
var ReactOwner = require("./ReactOwner");
var ReactPerf = require("./ReactPerf");
var ReactPropTransferer = require("./ReactPropTransferer");
var ReactPropTypeLocations = require("./ReactPropTypeLocations");
var ReactPropTypeLocationNames = require("./ReactPropTypeLocationNames");
var ReactUpdates = require("./ReactUpdates");

var instantiateReactComponent = require("./instantiateReactComponent");
var invariant = require("./invariant");
var keyMirror = require("./keyMirror");
var merge = require("./merge");
var mixInto = require("./mixInto");
var monitorCodeUse = require("./monitorCodeUse");
var mapObject = require("./mapObject");
var shouldUpdateReactComponent = require("./shouldUpdateReactComponent");
var warning = require("./warning");

/**
 * Policies that describe methods in `ReactCompositeComponentInterface`.
 */
var SpecPolicy = keyMirror({
  /**
   * These methods may be defined only once by the class specification or mixin.
   */
  DEFINE_ONCE: null,
  /**
   * These methods may be defined by both the class specification and mixins.
   * Subsequent definitions will be chained. These methods must return void.
   */
  DEFINE_MANY: null,
  /**
   * These methods are overriding the base ReactCompositeComponent class.
   */
  OVERRIDE_BASE: null,
  /**
   * These methods are similar to DEFINE_MANY, except we assume they return
   * objects. We try to merge the keys of the return values of all the mixed in
   * functions. If there is a key conflict we throw.
   */
  DEFINE_MANY_MERGED: null
});


var injectedMixins = [];

/**
 * Composite components are higher-level components that compose other composite
 * or native components.
 *
 * To create a new type of `ReactCompositeComponent`, pass a specification of
 * your new class to `React.createClass`. The only requirement of your class
 * specification is that you implement a `render` method.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return <div>Hello World</div>;
 *     }
 *   });
 *
 * The class specification supports a specific protocol of methods that have
 * special meaning (e.g. `render`). See `ReactCompositeComponentInterface` for
 * more the comprehensive protocol. Any other properties and methods in the
 * class specification will available on the prototype.
 *
 * @interface ReactCompositeComponentInterface
 * @internal
 */
var ReactCompositeComponentInterface = {

  /**
   * An array of Mixin objects to include when defining your component.
   *
   * @type {array}
   * @optional
   */
  mixins: SpecPolicy.DEFINE_MANY,

  /**
   * An object containing properties and methods that should be defined on
   * the component's constructor instead of its prototype (static methods).
   *
   * @type {object}
   * @optional
   */
  statics: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of prop types for this component.
   *
   * @type {object}
   * @optional
   */
  propTypes: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of context types for this component.
   *
   * @type {object}
   * @optional
   */
  contextTypes: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of context types this component sets for its children.
   *
   * @type {object}
   * @optional
   */
  childContextTypes: SpecPolicy.DEFINE_MANY,

  // ==== Definition methods ====

  /**
   * Invoked when the component is mounted. Values in the mapping will be set on
   * `this.props` if that prop is not specified (i.e. using an `in` check).
   *
   * This method is invoked before `getInitialState` and therefore cannot rely
   * on `this.state` or use `this.setState`.
   *
   * @return {object}
   * @optional
   */
  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * Invoked once before the component is mounted. The return value will be used
   * as the initial value of `this.state`.
   *
   *   getInitialState: function() {
   *     return {
   *       isOn: false,
   *       fooBaz: new BazFoo()
   *     }
   *   }
   *
   * @return {object}
   * @optional
   */
  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * @return {object}
   * @optional
   */
  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * Uses props from `this.props` and state from `this.state` to render the
   * structure of the component.
   *
   * No guarantees are made about when or how often this method is invoked, so
   * it must not have side effects.
   *
   *   render: function() {
   *     var name = this.props.name;
   *     return <div>Hello, {name}!</div>;
   *   }
   *
   * @return {ReactComponent}
   * @nosideeffects
   * @required
   */
  render: SpecPolicy.DEFINE_ONCE,



  // ==== Delegate methods ====

  /**
   * Invoked when the component is initially created and about to be mounted.
   * This may have side effects, but any external subscriptions or data created
   * by this method must be cleaned up in `componentWillUnmount`.
   *
   * @optional
   */
  componentWillMount: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component has been mounted and has a DOM representation.
   * However, there is no guarantee that the DOM node is in the document.
   *
   * Use this as an opportunity to operate on the DOM when the component has
   * been mounted (initialized and rendered) for the first time.
   *
   * @param {DOMElement} rootNode DOM element representing the component.
   * @optional
   */
  componentDidMount: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked before the component receives new props.
   *
   * Use this as an opportunity to react to a prop transition by updating the
   * state using `this.setState`. Current props are accessed via `this.props`.
   *
   *   componentWillReceiveProps: function(nextProps, nextContext) {
   *     this.setState({
   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
   *     });
   *   }
   *
   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
   * transition may cause a state change, but the opposite is not true. If you
   * need it, you are probably looking for `componentWillUpdate`.
   *
   * @param {object} nextProps
   * @optional
   */
  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked while deciding if the component should be updated as a result of
   * receiving new props, state and/or context.
   *
   * Use this as an opportunity to `return false` when you're certain that the
   * transition to the new props/state/context will not require a component
   * update.
   *
   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
   *     return !equal(nextProps, this.props) ||
   *       !equal(nextState, this.state) ||
   *       !equal(nextContext, this.context);
   *   }
   *
   * @param {object} nextProps
   * @param {?object} nextState
   * @param {?object} nextContext
   * @return {boolean} True if the component should update.
   * @optional
   */
  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,

  /**
   * Invoked when the component is about to update due to a transition from
   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
   * and `nextContext`.
   *
   * Use this as an opportunity to perform preparation before an update occurs.
   *
   * NOTE: You **cannot** use `this.setState()` in this method.
   *
   * @param {object} nextProps
   * @param {?object} nextState
   * @param {?object} nextContext
   * @param {ReactReconcileTransaction} transaction
   * @optional
   */
  componentWillUpdate: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component's DOM representation has been updated.
   *
   * Use this as an opportunity to operate on the DOM when the component has
   * been updated.
   *
   * @param {object} prevProps
   * @param {?object} prevState
   * @param {?object} prevContext
   * @param {DOMElement} rootNode DOM element representing the component.
   * @optional
   */
  componentDidUpdate: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component is about to be removed from its parent and have
   * its DOM representation destroyed.
   *
   * Use this as an opportunity to deallocate any external resources.
   *
   * NOTE: There is no `componentDidUnmount` since your component will have been
   * destroyed by that point.
   *
   * @optional
   */
  componentWillUnmount: SpecPolicy.DEFINE_MANY,



  // ==== Advanced methods ====

  /**
   * Updates the component's currently mounted DOM representation.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   * @overridable
   */
  updateComponent: SpecPolicy.OVERRIDE_BASE

};

/**
 * Mapping from class specification keys to special processing functions.
 *
 * Although these are declared like instance properties in the specification
 * when defining classes using `React.createClass`, they are actually static
 * and are accessible on the constructor instead of the prototype. Despite
 * being static, they must be defined outside of the "statics" key under
 * which all other static methods are defined.
 */
var RESERVED_SPEC_KEYS = {
  displayName: function(Constructor, displayName) {
    Constructor.displayName = displayName;
  },
  mixins: function(Constructor, mixins) {
    if (mixins) {
      for (var i = 0; i < mixins.length; i++) {
        mixSpecIntoComponent(Constructor, mixins[i]);
      }
    }
  },
  childContextTypes: function(Constructor, childContextTypes) {
    validateTypeDef(
      Constructor,
      childContextTypes,
      ReactPropTypeLocations.childContext
    );
    Constructor.childContextTypes = merge(
      Constructor.childContextTypes,
      childContextTypes
    );
  },
  contextTypes: function(Constructor, contextTypes) {
    validateTypeDef(
      Constructor,
      contextTypes,
      ReactPropTypeLocations.context
    );
    Constructor.contextTypes = merge(Constructor.contextTypes, contextTypes);
  },
  /**
   * Special case getDefaultProps which should move into statics but requires
   * automatic merging.
   */
  getDefaultProps: function(Constructor, getDefaultProps) {
    if (Constructor.getDefaultProps) {
      Constructor.getDefaultProps = createMergedResultFunction(
        Constructor.getDefaultProps,
        getDefaultProps
      );
    } else {
      Constructor.getDefaultProps = getDefaultProps;
    }
  },
  propTypes: function(Constructor, propTypes) {
    validateTypeDef(
      Constructor,
      propTypes,
      ReactPropTypeLocations.prop
    );
    Constructor.propTypes = merge(Constructor.propTypes, propTypes);
  },
  statics: function(Constructor, statics) {
    mixStaticSpecIntoComponent(Constructor, statics);
  }
};

function getDeclarationErrorAddendum(component) {
  var owner = component._owner || null;
  if (owner && owner.constructor && owner.constructor.displayName) {
    return ' Check the render method of `' + owner.constructor.displayName +
      '`.';
  }
  return '';
}

function validateTypeDef(Constructor, typeDef, location) {
  for (var propName in typeDef) {
    if (typeDef.hasOwnProperty(propName)) {
      ("production" !== process.env.NODE_ENV ? invariant(
        typeof typeDef[propName] == 'function',
        '%s: %s type `%s` is invalid; it must be a function, usually from ' +
        'React.PropTypes.',
        Constructor.displayName || 'ReactCompositeComponent',
        ReactPropTypeLocationNames[location],
        propName
      ) : invariant(typeof typeDef[propName] == 'function'));
    }
  }
}

function validateMethodOverride(proto, name) {
  var specPolicy = ReactCompositeComponentInterface.hasOwnProperty(name) ?
    ReactCompositeComponentInterface[name] :
    null;

  // Disallow overriding of base class methods unless explicitly allowed.
  if (ReactCompositeComponentMixin.hasOwnProperty(name)) {
    ("production" !== process.env.NODE_ENV ? invariant(
      specPolicy === SpecPolicy.OVERRIDE_BASE,
      'ReactCompositeComponentInterface: You are attempting to override ' +
      '`%s` from your class specification. Ensure that your method names ' +
      'do not overlap with React methods.',
      name
    ) : invariant(specPolicy === SpecPolicy.OVERRIDE_BASE));
  }

  // Disallow defining methods more than once unless explicitly allowed.
  if (proto.hasOwnProperty(name)) {
    ("production" !== process.env.NODE_ENV ? invariant(
      specPolicy === SpecPolicy.DEFINE_MANY ||
      specPolicy === SpecPolicy.DEFINE_MANY_MERGED,
      'ReactCompositeComponentInterface: You are attempting to define ' +
      '`%s` on your component more than once. This conflict may be due ' +
      'to a mixin.',
      name
    ) : invariant(specPolicy === SpecPolicy.DEFINE_MANY ||
    specPolicy === SpecPolicy.DEFINE_MANY_MERGED));
  }
}

function validateLifeCycleOnReplaceState(instance) {
  var compositeLifeCycleState = instance._compositeLifeCycleState;
  ("production" !== process.env.NODE_ENV ? invariant(
    instance.isMounted() ||
      compositeLifeCycleState === CompositeLifeCycle.MOUNTING,
    'replaceState(...): Can only update a mounted or mounting component.'
  ) : invariant(instance.isMounted() ||
    compositeLifeCycleState === CompositeLifeCycle.MOUNTING));
  ("production" !== process.env.NODE_ENV ? invariant(compositeLifeCycleState !== CompositeLifeCycle.RECEIVING_STATE,
    'replaceState(...): Cannot update during an existing state transition ' +
    '(such as within `render`). This could potentially cause an infinite ' +
    'loop so it is forbidden.'
  ) : invariant(compositeLifeCycleState !== CompositeLifeCycle.RECEIVING_STATE));
  ("production" !== process.env.NODE_ENV ? invariant(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING,
    'replaceState(...): Cannot update while unmounting component. This ' +
    'usually means you called setState() on an unmounted component.'
  ) : invariant(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING));
}

/**
 * Custom version of `mixInto` which handles policy validation and reserved
 * specification keys when building `ReactCompositeComponent` classses.
 */
function mixSpecIntoComponent(Constructor, spec) {
  ("production" !== process.env.NODE_ENV ? invariant(
    !ReactDescriptor.isValidFactory(spec),
    'ReactCompositeComponent: You\'re attempting to ' +
    'use a component class as a mixin. Instead, just use a regular object.'
  ) : invariant(!ReactDescriptor.isValidFactory(spec)));
  ("production" !== process.env.NODE_ENV ? invariant(
    !ReactDescriptor.isValidDescriptor(spec),
    'ReactCompositeComponent: You\'re attempting to ' +
    'use a component as a mixin. Instead, just use a regular object.'
  ) : invariant(!ReactDescriptor.isValidDescriptor(spec)));

  var proto = Constructor.prototype;
  for (var name in spec) {
    var property = spec[name];
    if (!spec.hasOwnProperty(name)) {
      continue;
    }

    validateMethodOverride(proto, name);

    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
      RESERVED_SPEC_KEYS[name](Constructor, property);
    } else {
      // Setup methods on prototype:
      // The following member methods should not be automatically bound:
      // 1. Expected ReactCompositeComponent methods (in the "interface").
      // 2. Overridden methods (that were mixed in).
      var isCompositeComponentMethod =
        ReactCompositeComponentInterface.hasOwnProperty(name);
      var isAlreadyDefined = proto.hasOwnProperty(name);
      var markedDontBind = property && property.__reactDontBind;
      var isFunction = typeof property === 'function';
      var shouldAutoBind =
        isFunction &&
        !isCompositeComponentMethod &&
        !isAlreadyDefined &&
        !markedDontBind;

      if (shouldAutoBind) {
        if (!proto.__reactAutoBindMap) {
          proto.__reactAutoBindMap = {};
        }
        proto.__reactAutoBindMap[name] = property;
        proto[name] = property;
      } else {
        if (isAlreadyDefined) {
          var specPolicy = ReactCompositeComponentInterface[name];

          // These cases should already be caught by validateMethodOverride
          ("production" !== process.env.NODE_ENV ? invariant(
            isCompositeComponentMethod && (
              specPolicy === SpecPolicy.DEFINE_MANY_MERGED ||
              specPolicy === SpecPolicy.DEFINE_MANY
            ),
            'ReactCompositeComponent: Unexpected spec policy %s for key %s ' +
            'when mixing in component specs.',
            specPolicy,
            name
          ) : invariant(isCompositeComponentMethod && (
            specPolicy === SpecPolicy.DEFINE_MANY_MERGED ||
            specPolicy === SpecPolicy.DEFINE_MANY
          )));

          // For methods which are defined more than once, call the existing
          // methods before calling the new property, merging if appropriate.
          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {
            proto[name] = createMergedResultFunction(proto[name], property);
          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {
            proto[name] = createChainedFunction(proto[name], property);
          }
        } else {
          proto[name] = property;
          if ("production" !== process.env.NODE_ENV) {
            // Add verbose displayName to the function, which helps when looking
            // at profiling tools.
            if (typeof property === 'function' && spec.displayName) {
              proto[name].displayName = spec.displayName + '_' + name;
            }
          }
        }
      }
    }
  }
}

function mixStaticSpecIntoComponent(Constructor, statics) {
  if (!statics) {
    return;
  }
  for (var name in statics) {
    var property = statics[name];
    if (!statics.hasOwnProperty(name)) {
      continue;
    }

    var isInherited = name in Constructor;
    var result = property;
    if (isInherited) {
      var existingProperty = Constructor[name];
      var existingType = typeof existingProperty;
      var propertyType = typeof property;
      ("production" !== process.env.NODE_ENV ? invariant(
        existingType === 'function' && propertyType === 'function',
        'ReactCompositeComponent: You are attempting to define ' +
        '`%s` on your component more than once, but that is only supported ' +
        'for functions, which are chained together. This conflict may be ' +
        'due to a mixin.',
        name
      ) : invariant(existingType === 'function' && propertyType === 'function'));
      result = createChainedFunction(existingProperty, property);
    }
    Constructor[name] = result;
  }
}

/**
 * Merge two objects, but throw if both contain the same key.
 *
 * @param {object} one The first object, which is mutated.
 * @param {object} two The second object
 * @return {object} one after it has been mutated to contain everything in two.
 */
function mergeObjectsWithNoDuplicateKeys(one, two) {
  ("production" !== process.env.NODE_ENV ? invariant(
    one && two && typeof one === 'object' && typeof two === 'object',
    'mergeObjectsWithNoDuplicateKeys(): Cannot merge non-objects'
  ) : invariant(one && two && typeof one === 'object' && typeof two === 'object'));

  mapObject(two, function(value, key) {
    ("production" !== process.env.NODE_ENV ? invariant(
      one[key] === undefined,
      'mergeObjectsWithNoDuplicateKeys(): ' +
      'Tried to merge two objects with the same key: %s',
      key
    ) : invariant(one[key] === undefined));
    one[key] = value;
  });
  return one;
}

/**
 * Creates a function that invokes two functions and merges their return values.
 *
 * @param {function} one Function to invoke first.
 * @param {function} two Function to invoke second.
 * @return {function} Function that invokes the two argument functions.
 * @private
 */
function createMergedResultFunction(one, two) {
  return function mergedResult() {
    var a = one.apply(this, arguments);
    var b = two.apply(this, arguments);
    if (a == null) {
      return b;
    } else if (b == null) {
      return a;
    }
    return mergeObjectsWithNoDuplicateKeys(a, b);
  };
}

/**
 * Creates a function that invokes two functions and ignores their return vales.
 *
 * @param {function} one Function to invoke first.
 * @param {function} two Function to invoke second.
 * @return {function} Function that invokes the two argument functions.
 * @private
 */
function createChainedFunction(one, two) {
  return function chainedFunction() {
    one.apply(this, arguments);
    two.apply(this, arguments);
  };
}

/**
 * `ReactCompositeComponent` maintains an auxiliary life cycle state in
 * `this._compositeLifeCycleState` (which can be null).
 *
 * This is different from the life cycle state maintained by `ReactComponent` in
 * `this._lifeCycleState`. The following diagram shows how the states overlap in
 * time. There are times when the CompositeLifeCycle is null - at those times it
 * is only meaningful to look at ComponentLifeCycle alone.
 *
 * Top Row: ReactComponent.ComponentLifeCycle
 * Low Row: ReactComponent.CompositeLifeCycle
 *
 * +-------+------------------------------------------------------+--------+
 * |  UN   |                    MOUNTED                           |   UN   |
 * |MOUNTED|                                                      | MOUNTED|
 * +-------+------------------------------------------------------+--------+
 * |       ^--------+   +------+   +------+   +------+   +--------^        |
 * |       |        |   |      |   |      |   |      |   |        |        |
 * |    0--|MOUNTING|-0-|RECEIV|-0-|RECEIV|-0-|RECEIV|-0-|   UN   |--->0   |
 * |       |        |   |PROPS |   | PROPS|   | STATE|   |MOUNTING|        |
 * |       |        |   |      |   |      |   |      |   |        |        |
 * |       |        |   |      |   |      |   |      |   |        |        |
 * |       +--------+   +------+   +------+   +------+   +--------+        |
 * |       |                                                      |        |
 * +-------+------------------------------------------------------+--------+
 */
var CompositeLifeCycle = keyMirror({
  /**
   * Components in the process of being mounted respond to state changes
   * differently.
   */
  MOUNTING: null,
  /**
   * Components in the process of being unmounted are guarded against state
   * changes.
   */
  UNMOUNTING: null,
  /**
   * Components that are mounted and receiving new props respond to state
   * changes differently.
   */
  RECEIVING_PROPS: null,
  /**
   * Components that are mounted and receiving new state are guarded against
   * additional state changes.
   */
  RECEIVING_STATE: null
});

/**
 * @lends {ReactCompositeComponent.prototype}
 */
var ReactCompositeComponentMixin = {

  /**
   * Base constructor for all composite component.
   *
   * @param {ReactDescriptor} descriptor
   * @final
   * @internal
   */
  construct: function(descriptor) {
    // Children can be either an array or more than one argument
    ReactComponent.Mixin.construct.apply(this, arguments);
    ReactOwner.Mixin.construct.apply(this, arguments);

    this.state = null;
    this._pendingState = null;

    // This is the public post-processed context. The real context and pending
    // context lives on the descriptor.
    this.context = null;

    this._compositeLifeCycleState = null;
  },

  /**
   * Checks whether or not this composite component is mounted.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function() {
    return ReactComponent.Mixin.isMounted.call(this) &&
      this._compositeLifeCycleState !== CompositeLifeCycle.MOUNTING;
  },

  /**
   * Initializes the component, renders markup, and registers event listeners.
   *
   * @param {string} rootID DOM ID of the root node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {number} mountDepth number of components in the owner hierarchy
   * @return {?string} Rendered markup to be inserted into the DOM.
   * @final
   * @internal
   */
  mountComponent: ReactPerf.measure(
    'ReactCompositeComponent',
    'mountComponent',
    function(rootID, transaction, mountDepth) {
      ReactComponent.Mixin.mountComponent.call(
        this,
        rootID,
        transaction,
        mountDepth
      );
      this._compositeLifeCycleState = CompositeLifeCycle.MOUNTING;

      if (this.__reactAutoBindMap) {
        this._bindAutoBindMethods();
      }

      this.context = this._processContext(this._descriptor._context);
      this.props = this._processProps(this.props);

      this.state = this.getInitialState ? this.getInitialState() : null;
      ("production" !== process.env.NODE_ENV ? invariant(
        typeof this.state === 'object' && !Array.isArray(this.state),
        '%s.getInitialState(): must return an object or null',
        this.constructor.displayName || 'ReactCompositeComponent'
      ) : invariant(typeof this.state === 'object' && !Array.isArray(this.state)));

      this._pendingState = null;
      this._pendingForceUpdate = false;

      if (this.componentWillMount) {
        this.componentWillMount();
        // When mounting, calls to `setState` by `componentWillMount` will set
        // `this._pendingState` without triggering a re-render.
        if (this._pendingState) {
          this.state = this._pendingState;
          this._pendingState = null;
        }
      }

      this._renderedComponent = instantiateReactComponent(
        this._renderValidatedComponent()
      );

      // Done with mounting, `setState` will now trigger UI changes.
      this._compositeLifeCycleState = null;
      var markup = this._renderedComponent.mountComponent(
        rootID,
        transaction,
        mountDepth + 1
      );
      if (this.componentDidMount) {
        transaction.getReactMountReady().enqueue(this.componentDidMount, this);
      }
      return markup;
    }
  ),

  /**
   * Releases any resources allocated by `mountComponent`.
   *
   * @final
   * @internal
   */
  unmountComponent: function() {
    this._compositeLifeCycleState = CompositeLifeCycle.UNMOUNTING;
    if (this.componentWillUnmount) {
      this.componentWillUnmount();
    }
    this._compositeLifeCycleState = null;

    this._renderedComponent.unmountComponent();
    this._renderedComponent = null;

    ReactComponent.Mixin.unmountComponent.call(this);

    // Some existing components rely on this.props even after they've been
    // destroyed (in event handlers).
    // TODO: this.props = null;
    // TODO: this.state = null;
  },

  /**
   * Sets a subset of the state. Always use this or `replaceState` to mutate
   * state. You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * There is no guarantee that calls to `setState` will run synchronously,
   * as they may eventually be batched together.  You can provide an optional
   * callback that will be executed when the call to setState is actually
   * completed.
   *
   * @param {object} partialState Next partial state to be merged with state.
   * @param {?function} callback Called after state is updated.
   * @final
   * @protected
   */
  setState: function(partialState, callback) {
    ("production" !== process.env.NODE_ENV ? invariant(
      typeof partialState === 'object' || partialState == null,
      'setState(...): takes an object of state variables to update.'
    ) : invariant(typeof partialState === 'object' || partialState == null));
    if ("production" !== process.env.NODE_ENV){
      ("production" !== process.env.NODE_ENV ? warning(
        partialState != null,
        'setState(...): You passed an undefined or null state object; ' +
        'instead, use forceUpdate().'
      ) : null);
    }
    // Merge with `_pendingState` if it exists, otherwise with existing state.
    this.replaceState(
      merge(this._pendingState || this.state, partialState),
      callback
    );
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {object} completeState Next state.
   * @param {?function} callback Called after state is updated.
   * @final
   * @protected
   */
  replaceState: function(completeState, callback) {
    validateLifeCycleOnReplaceState(this);
    this._pendingState = completeState;
    if (this._compositeLifeCycleState !== CompositeLifeCycle.MOUNTING) {
      // If we're in a componentWillMount handler, don't enqueue a rerender
      // because ReactUpdates assumes we're in a browser context (which is wrong
      // for server rendering) and we're about to do a render anyway.
      // TODO: The callback here is ignored when setState is called from
      // componentWillMount. Either fix it or disallow doing so completely in
      // favor of getInitialState.
      ReactUpdates.enqueueUpdate(this, callback);
    }
  },

  /**
   * Filters the context object to only contain keys specified in
   * `contextTypes`, and asserts that they are valid.
   *
   * @param {object} context
   * @return {?object}
   * @private
   */
  _processContext: function(context) {
    var maskedContext = null;
    var contextTypes = this.constructor.contextTypes;
    if (contextTypes) {
      maskedContext = {};
      for (var contextName in contextTypes) {
        maskedContext[contextName] = context[contextName];
      }
      if ("production" !== process.env.NODE_ENV) {
        this._checkPropTypes(
          contextTypes,
          maskedContext,
          ReactPropTypeLocations.context
        );
      }
    }
    return maskedContext;
  },

  /**
   * @param {object} currentContext
   * @return {object}
   * @private
   */
  _processChildContext: function(currentContext) {
    var childContext = this.getChildContext && this.getChildContext();
    var displayName = this.constructor.displayName || 'ReactCompositeComponent';
    if (childContext) {
      ("production" !== process.env.NODE_ENV ? invariant(
        typeof this.constructor.childContextTypes === 'object',
        '%s.getChildContext(): childContextTypes must be defined in order to ' +
        'use getChildContext().',
        displayName
      ) : invariant(typeof this.constructor.childContextTypes === 'object'));
      if ("production" !== process.env.NODE_ENV) {
        this._checkPropTypes(
          this.constructor.childContextTypes,
          childContext,
          ReactPropTypeLocations.childContext
        );
      }
      for (var name in childContext) {
        ("production" !== process.env.NODE_ENV ? invariant(
          name in this.constructor.childContextTypes,
          '%s.getChildContext(): key "%s" is not defined in childContextTypes.',
          displayName,
          name
        ) : invariant(name in this.constructor.childContextTypes));
      }
      return merge(currentContext, childContext);
    }
    return currentContext;
  },

  /**
   * Processes props by setting default values for unspecified props and
   * asserting that the props are valid. Does not mutate its argument; returns
   * a new props object with defaults merged in.
   *
   * @param {object} newProps
   * @return {object}
   * @private
   */
  _processProps: function(newProps) {
    var defaultProps = this.constructor.defaultProps;
    var props;
    if (defaultProps) {
      props = merge(newProps);
      for (var propName in defaultProps) {
        if (typeof props[propName] === 'undefined') {
          props[propName] = defaultProps[propName];
        }
      }
    } else {
      props = newProps;
    }
    if ("production" !== process.env.NODE_ENV) {
      var propTypes = this.constructor.propTypes;
      if (propTypes) {
        this._checkPropTypes(propTypes, props, ReactPropTypeLocations.prop);
      }
    }
    return props;
  },

  /**
   * Assert that the props are valid
   *
   * @param {object} propTypes Map of prop name to a ReactPropType
   * @param {object} props
   * @param {string} location e.g. "prop", "context", "child context"
   * @private
   */
  _checkPropTypes: function(propTypes, props, location) {
    // TODO: Stop validating prop types here and only use the descriptor
    // validation.
    var componentName = this.constructor.displayName;
    for (var propName in propTypes) {
      if (propTypes.hasOwnProperty(propName)) {
        var error =
          propTypes[propName](props, propName, componentName, location);
        if (error instanceof Error) {
          // We may want to extend this logic for similar errors in
          // renderComponent calls, so I'm abstracting it away into
          // a function to minimize refactoring in the future
          var addendum = getDeclarationErrorAddendum(this);
          ("production" !== process.env.NODE_ENV ? warning(false, error.message + addendum) : null);
        }
      }
    }
  },

  /**
   * If any of `_pendingDescriptor`, `_pendingState`, or `_pendingForceUpdate`
   * is set, update the component.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  performUpdateIfNecessary: function(transaction) {
    var compositeLifeCycleState = this._compositeLifeCycleState;
    // Do not trigger a state transition if we are in the middle of mounting or
    // receiving props because both of those will already be doing this.
    if (compositeLifeCycleState === CompositeLifeCycle.MOUNTING ||
        compositeLifeCycleState === CompositeLifeCycle.RECEIVING_PROPS) {
      return;
    }

    if (this._pendingDescriptor == null &&
        this._pendingState == null &&
        !this._pendingForceUpdate) {
      return;
    }

    var nextContext = this.context;
    var nextProps = this.props;
    var nextDescriptor = this._descriptor;
    if (this._pendingDescriptor != null) {
      nextDescriptor = this._pendingDescriptor;
      nextContext = this._processContext(nextDescriptor._context);
      nextProps = this._processProps(nextDescriptor.props);
      this._pendingDescriptor = null;

      this._compositeLifeCycleState = CompositeLifeCycle.RECEIVING_PROPS;
      if (this.componentWillReceiveProps) {
        this.componentWillReceiveProps(nextProps, nextContext);
      }
    }

    this._compositeLifeCycleState = CompositeLifeCycle.RECEIVING_STATE;

    var nextState = this._pendingState || this.state;
    this._pendingState = null;

    try {
      var shouldUpdate =
        this._pendingForceUpdate ||
        !this.shouldComponentUpdate ||
        this.shouldComponentUpdate(nextProps, nextState, nextContext);

      if ("production" !== process.env.NODE_ENV) {
        if (typeof shouldUpdate === "undefined") {
          console.warn(
            (this.constructor.displayName || 'ReactCompositeComponent') +
            '.shouldComponentUpdate(): Returned undefined instead of a ' +
            'boolean value. Make sure to return true or false.'
          );
        }
      }

      if (shouldUpdate) {
        this._pendingForceUpdate = false;
        // Will set `this.props`, `this.state` and `this.context`.
        this._performComponentUpdate(
          nextDescriptor,
          nextProps,
          nextState,
          nextContext,
          transaction
        );
      } else {
        // If it's determined that a component should not update, we still want
        // to set props and state.
        this._descriptor = nextDescriptor;
        this.props = nextProps;
        this.state = nextState;
        this.context = nextContext;

        // Owner cannot change because shouldUpdateReactComponent doesn't allow
        // it. TODO: Remove this._owner completely.
        this._owner = nextDescriptor._owner;
      }
    } finally {
      this._compositeLifeCycleState = null;
    }
  },

  /**
   * Merges new props and state, notifies delegate methods of update and
   * performs update.
   *
   * @param {ReactDescriptor} nextDescriptor Next descriptor
   * @param {object} nextProps Next public object to set as properties.
   * @param {?object} nextState Next object to set as state.
   * @param {?object} nextContext Next public object to set as context.
   * @param {ReactReconcileTransaction} transaction
   * @private
   */
  _performComponentUpdate: function(
    nextDescriptor,
    nextProps,
    nextState,
    nextContext,
    transaction
  ) {
    var prevDescriptor = this._descriptor;
    var prevProps = this.props;
    var prevState = this.state;
    var prevContext = this.context;

    if (this.componentWillUpdate) {
      this.componentWillUpdate(nextProps, nextState, nextContext);
    }

    this._descriptor = nextDescriptor;
    this.props = nextProps;
    this.state = nextState;
    this.context = nextContext;

    // Owner cannot change because shouldUpdateReactComponent doesn't allow
    // it. TODO: Remove this._owner completely.
    this._owner = nextDescriptor._owner;

    this.updateComponent(
      transaction,
      prevDescriptor
    );

    if (this.componentDidUpdate) {
      transaction.getReactMountReady().enqueue(
        this.componentDidUpdate.bind(this, prevProps, prevState, prevContext),
        this
      );
    }
  },

  receiveComponent: function(nextDescriptor, transaction) {
    if (nextDescriptor === this._descriptor &&
        nextDescriptor._owner != null) {
      // Since descriptors are immutable after the owner is rendered,
      // we can do a cheap identity compare here to determine if this is a
      // superfluous reconcile. It's possible for state to be mutable but such
      // change should trigger an update of the owner which would recreate
      // the descriptor. We explicitly check for the existence of an owner since
      // it's possible for a descriptor created outside a composite to be
      // deeply mutated and reused.
      return;
    }

    ReactComponent.Mixin.receiveComponent.call(
      this,
      nextDescriptor,
      transaction
    );
  },

  /**
   * Updates the component's currently mounted DOM representation.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactDescriptor} prevDescriptor
   * @internal
   * @overridable
   */
  updateComponent: ReactPerf.measure(
    'ReactCompositeComponent',
    'updateComponent',
    function(transaction, prevParentDescriptor) {
      ReactComponent.Mixin.updateComponent.call(
        this,
        transaction,
        prevParentDescriptor
      );

      var prevComponentInstance = this._renderedComponent;
      var prevDescriptor = prevComponentInstance._descriptor;
      var nextDescriptor = this._renderValidatedComponent();
      if (shouldUpdateReactComponent(prevDescriptor, nextDescriptor)) {
        prevComponentInstance.receiveComponent(nextDescriptor, transaction);
      } else {
        // These two IDs are actually the same! But nothing should rely on that.
        var thisID = this._rootNodeID;
        var prevComponentID = prevComponentInstance._rootNodeID;
        prevComponentInstance.unmountComponent();
        this._renderedComponent = instantiateReactComponent(nextDescriptor);
        var nextMarkup = this._renderedComponent.mountComponent(
          thisID,
          transaction,
          this._mountDepth + 1
        );
        ReactComponent.BackendIDOperations.dangerouslyReplaceNodeWithMarkupByID(
          prevComponentID,
          nextMarkup
        );
      }
    }
  ),

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldUpdateComponent`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {?function} callback Called after update is complete.
   * @final
   * @protected
   */
  forceUpdate: function(callback) {
    var compositeLifeCycleState = this._compositeLifeCycleState;
    ("production" !== process.env.NODE_ENV ? invariant(
      this.isMounted() ||
        compositeLifeCycleState === CompositeLifeCycle.MOUNTING,
      'forceUpdate(...): Can only force an update on mounted or mounting ' +
        'components.'
    ) : invariant(this.isMounted() ||
      compositeLifeCycleState === CompositeLifeCycle.MOUNTING));
    ("production" !== process.env.NODE_ENV ? invariant(
      compositeLifeCycleState !== CompositeLifeCycle.RECEIVING_STATE &&
      compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING,
      'forceUpdate(...): Cannot force an update while unmounting component ' +
      'or during an existing state transition (such as within `render`).'
    ) : invariant(compositeLifeCycleState !== CompositeLifeCycle.RECEIVING_STATE &&
    compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING));
    this._pendingForceUpdate = true;
    ReactUpdates.enqueueUpdate(this, callback);
  },

  /**
   * @private
   */
  _renderValidatedComponent: ReactPerf.measure(
    'ReactCompositeComponent',
    '_renderValidatedComponent',
    function() {
      var renderedComponent;
      var previousContext = ReactContext.current;
      ReactContext.current = this._processChildContext(
        this._descriptor._context
      );
      ReactCurrentOwner.current = this;
      try {
        renderedComponent = this.render();
        if (renderedComponent === null || renderedComponent === false) {
          renderedComponent = ReactEmptyComponent.getEmptyComponent();
          ReactEmptyComponent.registerNullComponentID(this._rootNodeID);
        } else {
          ReactEmptyComponent.deregisterNullComponentID(this._rootNodeID);
        }
      } finally {
        ReactContext.current = previousContext;
        ReactCurrentOwner.current = null;
      }
      ("production" !== process.env.NODE_ENV ? invariant(
        ReactDescriptor.isValidDescriptor(renderedComponent),
        '%s.render(): A valid ReactComponent must be returned. You may have ' +
          'returned undefined, an array or some other invalid object.',
        this.constructor.displayName || 'ReactCompositeComponent'
      ) : invariant(ReactDescriptor.isValidDescriptor(renderedComponent)));
      return renderedComponent;
    }
  ),

  /**
   * @private
   */
  _bindAutoBindMethods: function() {
    for (var autoBindKey in this.__reactAutoBindMap) {
      if (!this.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {
        continue;
      }
      var method = this.__reactAutoBindMap[autoBindKey];
      this[autoBindKey] = this._bindAutoBindMethod(ReactErrorUtils.guard(
        method,
        this.constructor.displayName + '.' + autoBindKey
      ));
    }
  },

  /**
   * Binds a method to the component.
   *
   * @param {function} method Method to be bound.
   * @private
   */
  _bindAutoBindMethod: function(method) {
    var component = this;
    var boundMethod = function() {
      return method.apply(component, arguments);
    };
    if ("production" !== process.env.NODE_ENV) {
      boundMethod.__reactBoundContext = component;
      boundMethod.__reactBoundMethod = method;
      boundMethod.__reactBoundArguments = null;
      var componentName = component.constructor.displayName;
      var _bind = boundMethod.bind;
      boundMethod.bind = function(newThis ) {var args=Array.prototype.slice.call(arguments,1);
        // User is trying to bind() an autobound method; we effectively will
        // ignore the value of "this" that the user is trying to use, so
        // let's warn.
        if (newThis !== component && newThis !== null) {
          monitorCodeUse('react_bind_warning', { component: componentName });
          console.warn(
            'bind(): React component methods may only be bound to the ' +
            'component instance. See ' + componentName
          );
        } else if (!args.length) {
          monitorCodeUse('react_bind_warning', { component: componentName });
          console.warn(
            'bind(): You are binding a component method to the component. ' +
            'React does this for you automatically in a high-performance ' +
            'way, so you can safely remove this call. See ' + componentName
          );
          return boundMethod;
        }
        var reboundMethod = _bind.apply(boundMethod, arguments);
        reboundMethod.__reactBoundContext = component;
        reboundMethod.__reactBoundMethod = method;
        reboundMethod.__reactBoundArguments = args;
        return reboundMethod;
      };
    }
    return boundMethod;
  }
};

var ReactCompositeComponentBase = function() {};
mixInto(ReactCompositeComponentBase, ReactComponent.Mixin);
mixInto(ReactCompositeComponentBase, ReactOwner.Mixin);
mixInto(ReactCompositeComponentBase, ReactPropTransferer.Mixin);
mixInto(ReactCompositeComponentBase, ReactCompositeComponentMixin);

/**
 * Module for creating composite components.
 *
 * @class ReactCompositeComponent
 * @extends ReactComponent
 * @extends ReactOwner
 * @extends ReactPropTransferer
 */
var ReactCompositeComponent = {

  LifeCycle: CompositeLifeCycle,

  Base: ReactCompositeComponentBase,

  /**
   * Creates a composite component class given a class specification.
   *
   * @param {object} spec Class specification (which must define `render`).
   * @return {function} Component constructor function.
   * @public
   */
  createClass: function(spec) {
    var Constructor = function(props, owner) {
      this.construct(props, owner);
    };
    Constructor.prototype = new ReactCompositeComponentBase();
    Constructor.prototype.constructor = Constructor;

    injectedMixins.forEach(
      mixSpecIntoComponent.bind(null, Constructor)
    );

    mixSpecIntoComponent(Constructor, spec);

    // Initialize the defaultProps property after all mixins have been merged
    if (Constructor.getDefaultProps) {
      Constructor.defaultProps = Constructor.getDefaultProps();
    }

    ("production" !== process.env.NODE_ENV ? invariant(
      Constructor.prototype.render,
      'createClass(...): Class specification must implement a `render` method.'
    ) : invariant(Constructor.prototype.render));

    if ("production" !== process.env.NODE_ENV) {
      if (Constructor.prototype.componentShouldUpdate) {
        monitorCodeUse(
          'react_component_should_update_warning',
          { component: spec.displayName }
        );
        console.warn(
          (spec.displayName || 'A component') + ' has a method called ' +
          'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
          'The name is phrased as a question because the function is ' +
          'expected to return a value.'
         );
      }
    }

    // Reduce time spent doing lookups by setting these on the prototype.
    for (var methodName in ReactCompositeComponentInterface) {
      if (!Constructor.prototype[methodName]) {
        Constructor.prototype[methodName] = null;
      }
    }

    var descriptorFactory = ReactDescriptor.createFactory(Constructor);

    if ("production" !== process.env.NODE_ENV) {
      return ReactDescriptorValidator.createFactory(
        descriptorFactory,
        Constructor.propTypes,
        Constructor.contextTypes
      );
    }

    return descriptorFactory;
  },

  injection: {
    injectMixin: function(mixin) {
      injectedMixins.push(mixin);
    }
  }
};

module.exports = ReactCompositeComponent;

}).call(this,require('_process'))
},{"./ReactComponent":33,"./ReactContext":36,"./ReactCurrentOwner":37,"./ReactDescriptor":53,"./ReactDescriptorValidator":54,"./ReactEmptyComponent":55,"./ReactErrorUtils":56,"./ReactOwner":66,"./ReactPerf":67,"./ReactPropTransferer":68,"./ReactPropTypeLocationNames":69,"./ReactPropTypeLocations":70,"./ReactUpdates":78,"./instantiateReactComponent":121,"./invariant":122,"./keyMirror":128,"./mapObject":130,"./merge":132,"./mixInto":135,"./monitorCodeUse":136,"./shouldUpdateReactComponent":142,"./warning":145,"_process":147}],36:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactContext
 */

"use strict";

var merge = require("./merge");

/**
 * Keeps track of the current context.
 *
 * The context is automatically passed down the component ownership hierarchy
 * and is accessible via `this.context` on ReactCompositeComponents.
 */
var ReactContext = {

  /**
   * @internal
   * @type {object}
   */
  current: {},

  /**
   * Temporarily extends the current context while executing scopedCallback.
   *
   * A typical use case might look like
   *
   *  render: function() {
   *    var children = ReactContext.withContext({foo: 'foo'} () => (
   *
   *    ));
   *    return <div>{children}</div>;
   *  }
   *
   * @param {object} newContext New context to merge into the existing context
   * @param {function} scopedCallback Callback to run with the new context
   * @return {ReactComponent|array<ReactComponent>}
   */
  withContext: function(newContext, scopedCallback) {
    var result;
    var previousContext = ReactContext.current;
    ReactContext.current = merge(previousContext, newContext);
    try {
      result = scopedCallback();
    } finally {
      ReactContext.current = previousContext;
    }
    return result;
  }

};

module.exports = ReactContext;

},{"./merge":132}],37:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactCurrentOwner
 */

"use strict";

/**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 *
 * The depth indicate how many composite components are above this render level.
 */
var ReactCurrentOwner = {

  /**
   * @internal
   * @type {ReactComponent}
   */
  current: null

};

module.exports = ReactCurrentOwner;

},{}],38:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactDOM
 * @typechecks static-only
 */

"use strict";

var ReactDescriptor = require("./ReactDescriptor");
var ReactDescriptorValidator = require("./ReactDescriptorValidator");
var ReactDOMComponent = require("./ReactDOMComponent");

var mergeInto = require("./mergeInto");
var mapObject = require("./mapObject");

/**
 * Creates a new React class that is idempotent and capable of containing other
 * React components. It accepts event listeners and DOM properties that are
 * valid according to `DOMProperty`.
 *
 *  - Event listeners: `onClick`, `onMouseDown`, etc.
 *  - DOM properties: `className`, `name`, `title`, etc.
 *
 * The `style` property functions differently from the DOM API. It accepts an
 * object mapping of style properties to values.
 *
 * @param {boolean} omitClose True if the close tag should be omitted.
 * @param {string} tag Tag name (e.g. `div`).
 * @private
 */
function createDOMComponentClass(omitClose, tag) {
  var Constructor = function(descriptor) {
    this.construct(descriptor);
  };
  Constructor.prototype = new ReactDOMComponent(tag, omitClose);
  Constructor.prototype.constructor = Constructor;
  Constructor.displayName = tag;

  var ConvenienceConstructor = ReactDescriptor.createFactory(Constructor);

  if ("production" !== process.env.NODE_ENV) {
    return ReactDescriptorValidator.createFactory(
      ConvenienceConstructor
    );
  }

  return ConvenienceConstructor;
}

/**
 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
 * This is also accessible via `React.DOM`.
 *
 * @public
 */
var ReactDOM = mapObject({
  a: false,
  abbr: false,
  address: false,
  area: true,
  article: false,
  aside: false,
  audio: false,
  b: false,
  base: true,
  bdi: false,
  bdo: false,
  big: false,
  blockquote: false,
  body: false,
  br: true,
  button: false,
  canvas: false,
  caption: false,
  cite: false,
  code: false,
  col: true,
  colgroup: false,
  data: false,
  datalist: false,
  dd: false,
  del: false,
  details: false,
  dfn: false,
  div: false,
  dl: false,
  dt: false,
  em: false,
  embed: true,
  fieldset: false,
  figcaption: false,
  figure: false,
  footer: false,
  form: false, // NOTE: Injected, see `ReactDOMForm`.
  h1: false,
  h2: false,
  h3: false,
  h4: false,
  h5: false,
  h6: false,
  head: false,
  header: false,
  hr: true,
  html: false,
  i: false,
  iframe: false,
  img: true,
  input: true,
  ins: false,
  kbd: false,
  keygen: true,
  label: false,
  legend: false,
  li: false,
  link: true,
  main: false,
  map: false,
  mark: false,
  menu: false,
  menuitem: false, // NOTE: Close tag should be omitted, but causes problems.
  meta: true,
  meter: false,
  nav: false,
  noscript: false,
  object: false,
  ol: false,
  optgroup: false,
  option: false,
  output: false,
  p: false,
  param: true,
  pre: false,
  progress: false,
  q: false,
  rp: false,
  rt: false,
  ruby: false,
  s: false,
  samp: false,
  script: false,
  section: false,
  select: false,
  small: false,
  source: true,
  span: false,
  strong: false,
  style: false,
  sub: false,
  summary: false,
  sup: false,
  table: false,
  tbody: false,
  td: false,
  textarea: false, // NOTE: Injected, see `ReactDOMTextarea`.
  tfoot: false,
  th: false,
  thead: false,
  time: false,
  title: false,
  tr: false,
  track: true,
  u: false,
  ul: false,
  'var': false,
  video: false,
  wbr: true,

  // SVG
  circle: false,
  defs: false,
  ellipse: false,
  g: false,
  line: false,
  linearGradient: false,
  mask: false,
  path: false,
  pattern: false,
  polygon: false,
  polyline: false,
  radialGradient: false,
  rect: false,
  stop: false,
  svg: false,
  text: false,
  tspan: false
}, createDOMComponentClass);

var injection = {
  injectComponentClasses: function(componentClasses) {
    mergeInto(ReactDOM, componentClasses);
  }
};

ReactDOM.injection = injection;

module.exports = ReactDOM;

}).call(this,require('_process'))
},{"./ReactDOMComponent":40,"./ReactDescriptor":53,"./ReactDescriptorValidator":54,"./mapObject":130,"./mergeInto":134,"_process":147}],39:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactDOMButton
 */

"use strict";

var AutoFocusMixin = require("./AutoFocusMixin");
var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");
var ReactCompositeComponent = require("./ReactCompositeComponent");
var ReactDOM = require("./ReactDOM");

var keyMirror = require("./keyMirror");

// Store a reference to the <button> `ReactDOMComponent`.
var button = ReactDOM.button;

var mouseListenerNames = keyMirror({
  onClick: true,
  onDoubleClick: true,
  onMouseDown: true,
  onMouseMove: true,
  onMouseUp: true,
  onClickCapture: true,
  onDoubleClickCapture: true,
  onMouseDownCapture: true,
  onMouseMoveCapture: true,
  onMouseUpCapture: true
});

/**
 * Implements a <button> native component that does not receive mouse events
 * when `disabled` is set.
 */
var ReactDOMButton = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMButton',

  mixins: [AutoFocusMixin, ReactBrowserComponentMixin],

  render: function() {
    var props = {};

    // Copy the props; except the mouse listeners if we're disabled
    for (var key in this.props) {
      if (this.props.hasOwnProperty(key) &&
          (!this.props.disabled || !mouseListenerNames[key])) {
        props[key] = this.props[key];
      }
    }

    return button(props, this.props.children);
  }

});

module.exports = ReactDOMButton;

},{"./AutoFocusMixin":3,"./ReactBrowserComponentMixin":30,"./ReactCompositeComponent":35,"./ReactDOM":38,"./keyMirror":128}],40:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactDOMComponent
 * @typechecks static-only
 */

"use strict";

var CSSPropertyOperations = require("./CSSPropertyOperations");
var DOMProperty = require("./DOMProperty");
var DOMPropertyOperations = require("./DOMPropertyOperations");
var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");
var ReactComponent = require("./ReactComponent");
var ReactBrowserEventEmitter = require("./ReactBrowserEventEmitter");
var ReactMount = require("./ReactMount");
var ReactMultiChild = require("./ReactMultiChild");
var ReactPerf = require("./ReactPerf");

var escapeTextForBrowser = require("./escapeTextForBrowser");
var invariant = require("./invariant");
var keyOf = require("./keyOf");
var merge = require("./merge");
var mixInto = require("./mixInto");

var deleteListener = ReactBrowserEventEmitter.deleteListener;
var listenTo = ReactBrowserEventEmitter.listenTo;
var registrationNameModules = ReactBrowserEventEmitter.registrationNameModules;

// For quickly matching children type, to test if can be treated as content.
var CONTENT_TYPES = {'string': true, 'number': true};

var STYLE = keyOf({style: null});

var ELEMENT_NODE_TYPE = 1;

/**
 * @param {?object} props
 */
function assertValidProps(props) {
  if (!props) {
    return;
  }
  // Note the use of `==` which checks for null or undefined.
  ("production" !== process.env.NODE_ENV ? invariant(
    props.children == null || props.dangerouslySetInnerHTML == null,
    'Can only set one of `children` or `props.dangerouslySetInnerHTML`.'
  ) : invariant(props.children == null || props.dangerouslySetInnerHTML == null));
  ("production" !== process.env.NODE_ENV ? invariant(
    props.style == null || typeof props.style === 'object',
    'The `style` prop expects a mapping from style properties to values, ' +
    'not a string.'
  ) : invariant(props.style == null || typeof props.style === 'object'));
}

function putListener(id, registrationName, listener, transaction) {
  var container = ReactMount.findReactContainerForID(id);
  if (container) {
    var doc = container.nodeType === ELEMENT_NODE_TYPE ?
      container.ownerDocument :
      container;
    listenTo(registrationName, doc);
  }
  transaction.getPutListenerQueue().enqueuePutListener(
    id,
    registrationName,
    listener
  );
}


/**
 * @constructor ReactDOMComponent
 * @extends ReactComponent
 * @extends ReactMultiChild
 */
function ReactDOMComponent(tag, omitClose) {
  this._tagOpen = '<' + tag;
  this._tagClose = omitClose ? '' : '</' + tag + '>';
  this.tagName = tag.toUpperCase();
}

ReactDOMComponent.Mixin = {

  /**
   * Generates root tag markup then recurses. This method has side effects and
   * is not idempotent.
   *
   * @internal
   * @param {string} rootID The root DOM ID for this node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {number} mountDepth number of components in the owner hierarchy
   * @return {string} The computed markup.
   */
  mountComponent: ReactPerf.measure(
    'ReactDOMComponent',
    'mountComponent',
    function(rootID, transaction, mountDepth) {
      ReactComponent.Mixin.mountComponent.call(
        this,
        rootID,
        transaction,
        mountDepth
      );
      assertValidProps(this.props);
      return (
        this._createOpenTagMarkupAndPutListeners(transaction) +
        this._createContentMarkup(transaction) +
        this._tagClose
      );
    }
  ),

  /**
   * Creates markup for the open tag and all attributes.
   *
   * This method has side effects because events get registered.
   *
   * Iterating over object properties is faster than iterating over arrays.
   * @see http://jsperf.com/obj-vs-arr-iteration
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {string} Markup of opening tag.
   */
  _createOpenTagMarkupAndPutListeners: function(transaction) {
    var props = this.props;
    var ret = this._tagOpen;

    for (var propKey in props) {
      if (!props.hasOwnProperty(propKey)) {
        continue;
      }
      var propValue = props[propKey];
      if (propValue == null) {
        continue;
      }
      if (registrationNameModules.hasOwnProperty(propKey)) {
        putListener(this._rootNodeID, propKey, propValue, transaction);
      } else {
        if (propKey === STYLE) {
          if (propValue) {
            propValue = props.style = merge(props.style);
          }
          propValue = CSSPropertyOperations.createMarkupForStyles(propValue);
        }
        var markup =
          DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
        if (markup) {
          ret += ' ' + markup;
        }
      }
    }

    // For static pages, no need to put React ID and checksum. Saves lots of
    // bytes.
    if (transaction.renderToStaticMarkup) {
      return ret + '>';
    }

    var markupForID = DOMPropertyOperations.createMarkupForID(this._rootNodeID);
    return ret + ' ' + markupForID + '>';
  },

  /**
   * Creates markup for the content between the tags.
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {string} Content markup.
   */
  _createContentMarkup: function(transaction) {
    // Intentional use of != to avoid catching zero/false.
    var innerHTML = this.props.dangerouslySetInnerHTML;
    if (innerHTML != null) {
      if (innerHTML.__html != null) {
        return innerHTML.__html;
      }
    } else {
      var contentToUse =
        CONTENT_TYPES[typeof this.props.children] ? this.props.children : null;
      var childrenToUse = contentToUse != null ? null : this.props.children;
      if (contentToUse != null) {
        return escapeTextForBrowser(contentToUse);
      } else if (childrenToUse != null) {
        var mountImages = this.mountChildren(
          childrenToUse,
          transaction
        );
        return mountImages.join('');
      }
    }
    return '';
  },

  receiveComponent: function(nextDescriptor, transaction) {
    if (nextDescriptor === this._descriptor &&
        nextDescriptor._owner != null) {
      // Since descriptors are immutable after the owner is rendered,
      // we can do a cheap identity compare here to determine if this is a
      // superfluous reconcile. It's possible for state to be mutable but such
      // change should trigger an update of the owner which would recreate
      // the descriptor. We explicitly check for the existence of an owner since
      // it's possible for a descriptor created outside a composite to be
      // deeply mutated and reused.
      return;
    }

    ReactComponent.Mixin.receiveComponent.call(
      this,
      nextDescriptor,
      transaction
    );
  },

  /**
   * Updates a native DOM component after it has already been allocated and
   * attached to the DOM. Reconciles the root DOM node, then recurses.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactDescriptor} prevDescriptor
   * @internal
   * @overridable
   */
  updateComponent: ReactPerf.measure(
    'ReactDOMComponent',
    'updateComponent',
    function(transaction, prevDescriptor) {
      assertValidProps(this._descriptor.props);
      ReactComponent.Mixin.updateComponent.call(
        this,
        transaction,
        prevDescriptor
      );
      this._updateDOMProperties(prevDescriptor.props, transaction);
      this._updateDOMChildren(prevDescriptor.props, transaction);
    }
  ),

  /**
   * Reconciles the properties by detecting differences in property values and
   * updating the DOM as necessary. This function is probably the single most
   * critical path for performance optimization.
   *
   * TODO: Benchmark whether checking for changed values in memory actually
   *       improves performance (especially statically positioned elements).
   * TODO: Benchmark the effects of putting this at the top since 99% of props
   *       do not change for a given reconciliation.
   * TODO: Benchmark areas that can be improved with caching.
   *
   * @private
   * @param {object} lastProps
   * @param {ReactReconcileTransaction} transaction
   */
  _updateDOMProperties: function(lastProps, transaction) {
    var nextProps = this.props;
    var propKey;
    var styleName;
    var styleUpdates;
    for (propKey in lastProps) {
      if (nextProps.hasOwnProperty(propKey) ||
         !lastProps.hasOwnProperty(propKey)) {
        continue;
      }
      if (propKey === STYLE) {
        var lastStyle = lastProps[propKey];
        for (styleName in lastStyle) {
          if (lastStyle.hasOwnProperty(styleName)) {
            styleUpdates = styleUpdates || {};
            styleUpdates[styleName] = '';
          }
        }
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        deleteListener(this._rootNodeID, propKey);
      } else if (
          DOMProperty.isStandardName[propKey] ||
          DOMProperty.isCustomAttribute(propKey)) {
        ReactComponent.BackendIDOperations.deletePropertyByID(
          this._rootNodeID,
          propKey
        );
      }
    }
    for (propKey in nextProps) {
      var nextProp = nextProps[propKey];
      var lastProp = lastProps[propKey];
      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp) {
        continue;
      }
      if (propKey === STYLE) {
        if (nextProp) {
          nextProp = nextProps.style = merge(nextProp);
        }
        if (lastProp) {
          // Unset styles on `lastProp` but not on `nextProp`.
          for (styleName in lastProp) {
            if (lastProp.hasOwnProperty(styleName) &&
                (!nextProp || !nextProp.hasOwnProperty(styleName))) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = '';
            }
          }
          // Update styles that changed since `lastProp`.
          for (styleName in nextProp) {
            if (nextProp.hasOwnProperty(styleName) &&
                lastProp[styleName] !== nextProp[styleName]) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = nextProp[styleName];
            }
          }
        } else {
          // Relies on `updateStylesByID` not mutating `styleUpdates`.
          styleUpdates = nextProp;
        }
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        putListener(this._rootNodeID, propKey, nextProp, transaction);
      } else if (
          DOMProperty.isStandardName[propKey] ||
          DOMProperty.isCustomAttribute(propKey)) {
        ReactComponent.BackendIDOperations.updatePropertyByID(
          this._rootNodeID,
          propKey,
          nextProp
        );
      }
    }
    if (styleUpdates) {
      ReactComponent.BackendIDOperations.updateStylesByID(
        this._rootNodeID,
        styleUpdates
      );
    }
  },

  /**
   * Reconciles the children with the various properties that affect the
   * children content.
   *
   * @param {object} lastProps
   * @param {ReactReconcileTransaction} transaction
   */
  _updateDOMChildren: function(lastProps, transaction) {
    var nextProps = this.props;

    var lastContent =
      CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
    var nextContent =
      CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

    var lastHtml =
      lastProps.dangerouslySetInnerHTML &&
      lastProps.dangerouslySetInnerHTML.__html;
    var nextHtml =
      nextProps.dangerouslySetInnerHTML &&
      nextProps.dangerouslySetInnerHTML.__html;

    // Note the use of `!=` which checks for null or undefined.
    var lastChildren = lastContent != null ? null : lastProps.children;
    var nextChildren = nextContent != null ? null : nextProps.children;

    // If we're switching from children to content/html or vice versa, remove
    // the old content
    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
    if (lastChildren != null && nextChildren == null) {
      this.updateChildren(null, transaction);
    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
      this.updateTextContent('');
    }

    if (nextContent != null) {
      if (lastContent !== nextContent) {
        this.updateTextContent('' + nextContent);
      }
    } else if (nextHtml != null) {
      if (lastHtml !== nextHtml) {
        ReactComponent.BackendIDOperations.updateInnerHTMLByID(
          this._rootNodeID,
          nextHtml
        );
      }
    } else if (nextChildren != null) {
      this.updateChildren(nextChildren, transaction);
    }
  },

  /**
   * Destroys all event registrations for this instance. Does not remove from
   * the DOM. That must be done by the parent.
   *
   * @internal
   */
  unmountComponent: function() {
    this.unmountChildren();
    ReactBrowserEventEmitter.deleteAllListeners(this._rootNodeID);
    ReactComponent.Mixin.unmountComponent.call(this);
  }

};

mixInto(ReactDOMComponent, ReactComponent.Mixin);
mixInto(ReactDOMComponent, ReactDOMComponent.Mixin);
mixInto(ReactDOMComponent, ReactMultiChild.Mixin);
mixInto(ReactDOMComponent, ReactBrowserComponentMixin);

module.exports = ReactDOMComponent;

}).call(this,require('_process'))
},{"./CSSPropertyOperations":6,"./DOMProperty":12,"./DOMPropertyOperations":13,"./ReactBrowserComponentMixin":30,"./ReactBrowserEventEmitter":31,"./ReactComponent":33,"./ReactMount":63,"./ReactMultiChild":64,"./ReactPerf":67,"./escapeTextForBrowser":106,"./invariant":122,"./keyOf":129,"./merge":132,"./mixInto":135,"_process":147}],41:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactDOMForm
 */

"use strict";

var EventConstants = require("./EventConstants");
var LocalEventTrapMixin = require("./LocalEventTrapMixin");
var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");
var ReactCompositeComponent = require("./ReactCompositeComponent");
var ReactDOM = require("./ReactDOM");

// Store a reference to the <form> `ReactDOMComponent`.
var form = ReactDOM.form;

/**
 * Since onSubmit doesn't bubble OR capture on the top level in IE8, we need
 * to capture it on the <form> element itself. There are lots of hacks we could
 * do to accomplish this, but the most reliable is to make <form> a
 * composite component and use `componentDidMount` to attach the event handlers.
 */
var ReactDOMForm = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMForm',

  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

  render: function() {
    // TODO: Instead of using `ReactDOM` directly, we should use JSX. However,
    // `jshint` fails to parse JSX so in order for linting to work in the open
    // source repo, we need to just use `ReactDOM.form`.
    return this.transferPropsTo(form(null, this.props.children));
  },

  componentDidMount: function() {
    this.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset');
    this.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit');
  }
});

module.exports = ReactDOMForm;

},{"./EventConstants":17,"./LocalEventTrapMixin":26,"./ReactBrowserComponentMixin":30,"./ReactCompositeComponent":35,"./ReactDOM":38}],42:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactDOMIDOperations
 * @typechecks static-only
 */

/*jslint evil: true */

"use strict";

var CSSPropertyOperations = require("./CSSPropertyOperations");
var DOMChildrenOperations = require("./DOMChildrenOperations");
var DOMPropertyOperations = require("./DOMPropertyOperations");
var ReactMount = require("./ReactMount");
var ReactPerf = require("./ReactPerf");

var invariant = require("./invariant");
var setInnerHTML = require("./setInnerHTML");

/**
 * Errors for properties that should not be updated with `updatePropertyById()`.
 *
 * @type {object}
 * @private
 */
var INVALID_PROPERTY_ERRORS = {
  dangerouslySetInnerHTML:
    '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',
  style: '`style` must be set using `updateStylesByID()`.'
};

/**
 * Operations used to process updates to DOM nodes. This is made injectable via
 * `ReactComponent.BackendIDOperations`.
 */
var ReactDOMIDOperations = {

  /**
   * Updates a DOM node with new property values. This should only be used to
   * update DOM properties in `DOMProperty`.
   *
   * @param {string} id ID of the node to update.
   * @param {string} name A valid property name, see `DOMProperty`.
   * @param {*} value New value of the property.
   * @internal
   */
  updatePropertyByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'updatePropertyByID',
    function(id, name, value) {
      var node = ReactMount.getNode(id);
      ("production" !== process.env.NODE_ENV ? invariant(
        !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),
        'updatePropertyByID(...): %s',
        INVALID_PROPERTY_ERRORS[name]
      ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));

      // If we're updating to null or undefined, we should remove the property
      // from the DOM node instead of inadvertantly setting to a string. This
      // brings us in line with the same behavior we have on initial render.
      if (value != null) {
        DOMPropertyOperations.setValueForProperty(node, name, value);
      } else {
        DOMPropertyOperations.deleteValueForProperty(node, name);
      }
    }
  ),

  /**
   * Updates a DOM node to remove a property. This should only be used to remove
   * DOM properties in `DOMProperty`.
   *
   * @param {string} id ID of the node to update.
   * @param {string} name A property name to remove, see `DOMProperty`.
   * @internal
   */
  deletePropertyByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'deletePropertyByID',
    function(id, name, value) {
      var node = ReactMount.getNode(id);
      ("production" !== process.env.NODE_ENV ? invariant(
        !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),
        'updatePropertyByID(...): %s',
        INVALID_PROPERTY_ERRORS[name]
      ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));
      DOMPropertyOperations.deleteValueForProperty(node, name, value);
    }
  ),

  /**
   * Updates a DOM node with new style values. If a value is specified as '',
   * the corresponding style property will be unset.
   *
   * @param {string} id ID of the node to update.
   * @param {object} styles Mapping from styles to values.
   * @internal
   */
  updateStylesByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'updateStylesByID',
    function(id, styles) {
      var node = ReactMount.getNode(id);
      CSSPropertyOperations.setValueForStyles(node, styles);
    }
  ),

  /**
   * Updates a DOM node's innerHTML.
   *
   * @param {string} id ID of the node to update.
   * @param {string} html An HTML string.
   * @internal
   */
  updateInnerHTMLByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'updateInnerHTMLByID',
    function(id, html) {
      var node = ReactMount.getNode(id);
      setInnerHTML(node, html);
    }
  ),

  /**
   * Updates a DOM node's text content set by `props.content`.
   *
   * @param {string} id ID of the node to update.
   * @param {string} content Text content.
   * @internal
   */
  updateTextContentByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'updateTextContentByID',
    function(id, content) {
      var node = ReactMount.getNode(id);
      DOMChildrenOperations.updateTextContent(node, content);
    }
  ),

  /**
   * Replaces a DOM node that exists in the document with markup.
   *
   * @param {string} id ID of child to be replaced.
   * @param {string} markup Dangerous markup to inject in place of child.
   * @internal
   * @see {Danger.dangerouslyReplaceNodeWithMarkup}
   */
  dangerouslyReplaceNodeWithMarkupByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'dangerouslyReplaceNodeWithMarkupByID',
    function(id, markup) {
      var node = ReactMount.getNode(id);
      DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);
    }
  ),

  /**
   * Updates a component's children by processing a series of updates.
   *
   * @param {array<object>} updates List of update configurations.
   * @param {array<string>} markup List of markup strings.
   * @internal
   */
  dangerouslyProcessChildrenUpdates: ReactPerf.measure(
    'ReactDOMIDOperations',
    'dangerouslyProcessChildrenUpdates',
    function(updates, markup) {
      for (var i = 0; i < updates.length; i++) {
        updates[i].parentNode = ReactMount.getNode(updates[i].parentID);
      }
      DOMChildrenOperations.processUpdates(updates, markup);
    }
  )
};

module.exports = ReactDOMIDOperations;

}).call(this,require('_process'))
},{"./CSSPropertyOperations":6,"./DOMChildrenOperations":11,"./DOMPropertyOperations":13,"./ReactMount":63,"./ReactPerf":67,"./invariant":122,"./setInnerHTML":140,"_process":147}],43:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactDOMImg
 */

"use strict";

var EventConstants = require("./EventConstants");
var LocalEventTrapMixin = require("./LocalEventTrapMixin");
var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");
var ReactCompositeComponent = require("./ReactCompositeComponent");
var ReactDOM = require("./ReactDOM");

// Store a reference to the <img> `ReactDOMComponent`.
var img = ReactDOM.img;

/**
 * Since onLoad doesn't bubble OR capture on the top level in IE8, we need to
 * capture it on the <img> element itself. There are lots of hacks we could do
 * to accomplish this, but the most reliable is to make <img> a composite
 * component and use `componentDidMount` to attach the event handlers.
 */
var ReactDOMImg = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMImg',
  tagName: 'IMG',

  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

  render: function() {
    return img(this.props);
  },

  componentDidMount: function() {
    this.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load');
    this.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error');
  }
});

module.exports = ReactDOMImg;

},{"./EventConstants":17,"./LocalEventTrapMixin":26,"./ReactBrowserComponentMixin":30,"./ReactCompositeComponent":35,"./ReactDOM":38}],44:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactDOMInput
 */

"use strict";

var AutoFocusMixin = require("./AutoFocusMixin");
var DOMPropertyOperations = require("./DOMPropertyOperations");
var LinkedValueUtils = require("./LinkedValueUtils");
var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");
var ReactCompositeComponent = require("./ReactCompositeComponent");
var ReactDOM = require("./ReactDOM");
var ReactMount = require("./ReactMount");

var invariant = require("./invariant");
var merge = require("./merge");

// Store a reference to the <input> `ReactDOMComponent`.
var input = ReactDOM.input;

var instancesByReactID = {};

/**
 * Implements an <input> native component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */
var ReactDOMInput = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMInput',

  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

  getInitialState: function() {
    var defaultValue = this.props.defaultValue;
    return {
      checked: this.props.defaultChecked || false,
      value: defaultValue != null ? defaultValue : null
    };
  },

  shouldComponentUpdate: function() {
    // Defer any updates to this component during the `onChange` handler.
    return !this._isChanging;
  },

  render: function() {
    // Clone `this.props` so we don't mutate the input.
    var props = merge(this.props);

    props.defaultChecked = null;
    props.defaultValue = null;

    var value = LinkedValueUtils.getValue(this);
    props.value = value != null ? value : this.state.value;

    var checked = LinkedValueUtils.getChecked(this);
    props.checked = checked != null ? checked : this.state.checked;

    props.onChange = this._handleChange;

    return input(props, this.props.children);
  },

  componentDidMount: function() {
    var id = ReactMount.getID(this.getDOMNode());
    instancesByReactID[id] = this;
  },

  componentWillUnmount: function() {
    var rootNode = this.getDOMNode();
    var id = ReactMount.getID(rootNode);
    delete instancesByReactID[id];
  },

  componentDidUpdate: function(prevProps, prevState, prevContext) {
    var rootNode = this.getDOMNode();
    if (this.props.checked != null) {
      DOMPropertyOperations.setValueForProperty(
        rootNode,
        'checked',
        this.props.checked || false
      );
    }

    var value = LinkedValueUtils.getValue(this);
    if (value != null) {
      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);
    }
  },

  _handleChange: function(event) {
    var returnValue;
    var onChange = LinkedValueUtils.getOnChange(this);
    if (onChange) {
      this._isChanging = true;
      returnValue = onChange.call(this, event);
      this._isChanging = false;
    }
    this.setState({
      checked: event.target.checked,
      value: event.target.value
    });

    var name = this.props.name;
    if (this.props.type === 'radio' && name != null) {
      var rootNode = this.getDOMNode();
      var queryRoot = rootNode;

      while (queryRoot.parentNode) {
        queryRoot = queryRoot.parentNode;
      }

      // If `rootNode.form` was non-null, then we could try `form.elements`,
      // but that sometimes behaves strangely in IE8. We could also try using
      // `form.getElementsByName`, but that will only return direct children
      // and won't include inputs that use the HTML5 `form=` attribute. Since
      // the input might not even be in a form, let's just use the global
      // `querySelectorAll` to ensure we don't miss anything.
      var group = queryRoot.querySelectorAll(
        'input[name=' + JSON.stringify('' + name) + '][type="radio"]');

      for (var i = 0, groupLen = group.length; i < groupLen; i++) {
        var otherNode = group[i];
        if (otherNode === rootNode ||
            otherNode.form !== rootNode.form) {
          continue;
        }
        var otherID = ReactMount.getID(otherNode);
        ("production" !== process.env.NODE_ENV ? invariant(
          otherID,
          'ReactDOMInput: Mixing React and non-React radio inputs with the ' +
          'same `name` is not supported.'
        ) : invariant(otherID));
        var otherInstance = instancesByReactID[otherID];
        ("production" !== process.env.NODE_ENV ? invariant(
          otherInstance,
          'ReactDOMInput: Unknown radio button ID %s.',
          otherID
        ) : invariant(otherInstance));
        // In some cases, this will actually change the `checked` state value.
        // In other cases, there's no change but this forces a reconcile upon
        // which componentDidUpdate will reset the DOM property to whatever it
        // should be.
        otherInstance.setState({
          checked: false
        });
      }
    }

    return returnValue;
  }

});

module.exports = ReactDOMInput;

}).call(this,require('_process'))
},{"./AutoFocusMixin":3,"./DOMPropertyOperations":13,"./LinkedValueUtils":25,"./ReactBrowserComponentMixin":30,"./ReactCompositeComponent":35,"./ReactDOM":38,"./ReactMount":63,"./invariant":122,"./merge":132,"_process":147}],45:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactDOMOption
 */

"use strict";

var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");
var ReactCompositeComponent = require("./ReactCompositeComponent");
var ReactDOM = require("./ReactDOM");

var warning = require("./warning");

// Store a reference to the <option> `ReactDOMComponent`.
var option = ReactDOM.option;

/**
 * Implements an <option> native component that warns when `selected` is set.
 */
var ReactDOMOption = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMOption',

  mixins: [ReactBrowserComponentMixin],

  componentWillMount: function() {
    // TODO (yungsters): Remove support for `selected` in <option>.
    if ("production" !== process.env.NODE_ENV) {
      ("production" !== process.env.NODE_ENV ? warning(
        this.props.selected == null,
        'Use the `defaultValue` or `value` props on <select> instead of ' +
        'setting `selected` on <option>.'
      ) : null);
    }
  },

  render: function() {
    return option(this.props, this.props.children);
  }

});

module.exports = ReactDOMOption;

}).call(this,require('_process'))
},{"./ReactBrowserComponentMixin":30,"./ReactCompositeComponent":35,"./ReactDOM":38,"./warning":145,"_process":147}],46:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactDOMSelect
 */

"use strict";

var AutoFocusMixin = require("./AutoFocusMixin");
var LinkedValueUtils = require("./LinkedValueUtils");
var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");
var ReactCompositeComponent = require("./ReactCompositeComponent");
var ReactDOM = require("./ReactDOM");

var merge = require("./merge");

// Store a reference to the <select> `ReactDOMComponent`.
var select = ReactDOM.select;

/**
 * Validation function for `value` and `defaultValue`.
 * @private
 */
function selectValueType(props, propName, componentName) {
  if (props[propName] == null) {
    return;
  }
  if (props.multiple) {
    if (!Array.isArray(props[propName])) {
      return new Error(
        ("The `" + propName + "` prop supplied to <select> must be an array if ") +
        ("`multiple` is true.")
      );
    }
  } else {
    if (Array.isArray(props[propName])) {
      return new Error(
        ("The `" + propName + "` prop supplied to <select> must be a scalar ") +
        ("value if `multiple` is false.")
      );
    }
  }
}

/**
 * If `value` is supplied, updates <option> elements on mount and update.
 * @param {ReactComponent} component Instance of ReactDOMSelect
 * @param {?*} propValue For uncontrolled components, null/undefined. For
 * controlled components, a string (or with `multiple`, a list of strings).
 * @private
 */
function updateOptions(component, propValue) {
  var multiple = component.props.multiple;
  var value = propValue != null ? propValue : component.state.value;
  var options = component.getDOMNode().options;
  var selectedValue, i, l;
  if (multiple) {
    selectedValue = {};
    for (i = 0, l = value.length; i < l; ++i) {
      selectedValue['' + value[i]] = true;
    }
  } else {
    selectedValue = '' + value;
  }
  for (i = 0, l = options.length; i < l; i++) {
    var selected = multiple ?
      selectedValue.hasOwnProperty(options[i].value) :
      options[i].value === selectedValue;

    if (selected !== options[i].selected) {
      options[i].selected = selected;
    }
  }
}

/**
 * Implements a <select> native component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * string. If `multiple` is true, the prop must be an array of strings.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */
var ReactDOMSelect = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMSelect',

  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

  propTypes: {
    defaultValue: selectValueType,
    value: selectValueType
  },

  getInitialState: function() {
    return {value: this.props.defaultValue || (this.props.multiple ? [] : '')};
  },

  componentWillReceiveProps: function(nextProps) {
    if (!this.props.multiple && nextProps.multiple) {
      this.setState({value: [this.state.value]});
    } else if (this.props.multiple && !nextProps.multiple) {
      this.setState({value: this.state.value[0]});
    }
  },

  shouldComponentUpdate: function() {
    // Defer any updates to this component during the `onChange` handler.
    return !this._isChanging;
  },

  render: function() {
    // Clone `this.props` so we don't mutate the input.
    var props = merge(this.props);

    props.onChange = this._handleChange;
    props.value = null;

    return select(props, this.props.children);
  },

  componentDidMount: function() {
    updateOptions(this, LinkedValueUtils.getValue(this));
  },

  componentDidUpdate: function(prevProps) {
    var value = LinkedValueUtils.getValue(this);
    var prevMultiple = !!prevProps.multiple;
    var multiple = !!this.props.multiple;
    if (value != null || prevMultiple !== multiple) {
      updateOptions(this, value);
    }
  },

  _handleChange: function(event) {
    var returnValue;
    var onChange = LinkedValueUtils.getOnChange(this);
    if (onChange) {
      this._isChanging = true;
      returnValue = onChange.call(this, event);
      this._isChanging = false;
    }

    var selectedValue;
    if (this.props.multiple) {
      selectedValue = [];
      var options = event.target.options;
      for (var i = 0, l = options.length; i < l; i++) {
        if (options[i].selected) {
          selectedValue.push(options[i].value);
        }
      }
    } else {
      selectedValue = event.target.value;
    }

    this.setState({value: selectedValue});
    return returnValue;
  }

});

module.exports = ReactDOMSelect;

},{"./AutoFocusMixin":3,"./LinkedValueUtils":25,"./ReactBrowserComponentMixin":30,"./ReactCompositeComponent":35,"./ReactDOM":38,"./merge":132}],47:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactDOMSelection
 */

"use strict";

var ExecutionEnvironment = require("./ExecutionEnvironment");

var getNodeForCharacterOffset = require("./getNodeForCharacterOffset");
var getTextContentAccessor = require("./getTextContentAccessor");

/**
 * While `isCollapsed` is available on the Selection object and `collapsed`
 * is available on the Range object, IE11 sometimes gets them wrong.
 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
 */
function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
  return anchorNode === focusNode && anchorOffset === focusOffset;
}

/**
 * Get the appropriate anchor and focus node/offset pairs for IE.
 *
 * The catch here is that IE's selection API doesn't provide information
 * about whether the selection is forward or backward, so we have to
 * behave as though it's always forward.
 *
 * IE text differs from modern selection in that it behaves as though
 * block elements end with a new line. This means character offsets will
 * differ between the two APIs.
 *
 * @param {DOMElement} node
 * @return {object}
 */
function getIEOffsets(node) {
  var selection = document.selection;
  var selectedRange = selection.createRange();
  var selectedLength = selectedRange.text.length;

  // Duplicate selection so we can move range without breaking user selection.
  var fromStart = selectedRange.duplicate();
  fromStart.moveToElementText(node);
  fromStart.setEndPoint('EndToStart', selectedRange);

  var startOffset = fromStart.text.length;
  var endOffset = startOffset + selectedLength;

  return {
    start: startOffset,
    end: endOffset
  };
}

/**
 * @param {DOMElement} node
 * @return {?object}
 */
function getModernOffsets(node) {
  var selection = window.getSelection();

  if (selection.rangeCount === 0) {
    return null;
  }

  var anchorNode = selection.anchorNode;
  var anchorOffset = selection.anchorOffset;
  var focusNode = selection.focusNode;
  var focusOffset = selection.focusOffset;

  var currentRange = selection.getRangeAt(0);

  // If the node and offset values are the same, the selection is collapsed.
  // `Selection.isCollapsed` is available natively, but IE sometimes gets
  // this value wrong.
  var isSelectionCollapsed = isCollapsed(
    selection.anchorNode,
    selection.anchorOffset,
    selection.focusNode,
    selection.focusOffset
  );

  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

  var tempRange = currentRange.cloneRange();
  tempRange.selectNodeContents(node);
  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

  var isTempRangeCollapsed = isCollapsed(
    tempRange.startContainer,
    tempRange.startOffset,
    tempRange.endContainer,
    tempRange.endOffset
  );

  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
  var end = start + rangeLength;

  // Detect whether the selection is backward.
  var detectionRange = document.createRange();
  detectionRange.setStart(anchorNode, anchorOffset);
  detectionRange.setEnd(focusNode, focusOffset);
  var isBackward = detectionRange.collapsed;
  detectionRange.detach();

  return {
    start: isBackward ? end : start,
    end: isBackward ? start : end
  };
}

/**
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setIEOffsets(node, offsets) {
  var range = document.selection.createRange().duplicate();
  var start, end;

  if (typeof offsets.end === 'undefined') {
    start = offsets.start;
    end = start;
  } else if (offsets.start > offsets.end) {
    start = offsets.end;
    end = offsets.start;
  } else {
    start = offsets.start;
    end = offsets.end;
  }

  range.moveToElementText(node);
  range.moveStart('character', start);
  range.setEndPoint('EndToStart', range);
  range.moveEnd('character', end - start);
  range.select();
}

/**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setModernOffsets(node, offsets) {
  var selection = window.getSelection();

  var length = node[getTextContentAccessor()].length;
  var start = Math.min(offsets.start, length);
  var end = typeof offsets.end === 'undefined' ?
            start : Math.min(offsets.end, length);

  // IE 11 uses modern selection, but doesn't support the extend method.
  // Flip backward selections, so we can set with a single range.
  if (!selection.extend && start > end) {
    var temp = end;
    end = start;
    start = temp;
  }

  var startMarker = getNodeForCharacterOffset(node, start);
  var endMarker = getNodeForCharacterOffset(node, end);

  if (startMarker && endMarker) {
    var range = document.createRange();
    range.setStart(startMarker.node, startMarker.offset);
    selection.removeAllRanges();

    if (start > end) {
      selection.addRange(range);
      selection.extend(endMarker.node, endMarker.offset);
    } else {
      range.setEnd(endMarker.node, endMarker.offset);
      selection.addRange(range);
    }

    range.detach();
  }
}

var useIEOffsets = ExecutionEnvironment.canUseDOM && document.selection;

var ReactDOMSelection = {
  /**
   * @param {DOMElement} node
   */
  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

  /**
   * @param {DOMElement|DOMTextNode} node
   * @param {object} offsets
   */
  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
};

module.exports = ReactDOMSelection;

},{"./ExecutionEnvironment":23,"./getNodeForCharacterOffset":115,"./getTextContentAccessor":117}],48:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactDOMTextarea
 */

"use strict";

var AutoFocusMixin = require("./AutoFocusMixin");
var DOMPropertyOperations = require("./DOMPropertyOperations");
var LinkedValueUtils = require("./LinkedValueUtils");
var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");
var ReactCompositeComponent = require("./ReactCompositeComponent");
var ReactDOM = require("./ReactDOM");

var invariant = require("./invariant");
var merge = require("./merge");

var warning = require("./warning");

// Store a reference to the <textarea> `ReactDOMComponent`.
var textarea = ReactDOM.textarea;

/**
 * Implements a <textarea> native component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */
var ReactDOMTextarea = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMTextarea',

  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

  getInitialState: function() {
    var defaultValue = this.props.defaultValue;
    // TODO (yungsters): Remove support for children content in <textarea>.
    var children = this.props.children;
    if (children != null) {
      if ("production" !== process.env.NODE_ENV) {
        ("production" !== process.env.NODE_ENV ? warning(
          false,
          'Use the `defaultValue` or `value` props instead of setting ' +
          'children on <textarea>.'
        ) : null);
      }
      ("production" !== process.env.NODE_ENV ? invariant(
        defaultValue == null,
        'If you supply `defaultValue` on a <textarea>, do not pass children.'
      ) : invariant(defaultValue == null));
      if (Array.isArray(children)) {
        ("production" !== process.env.NODE_ENV ? invariant(
          children.length <= 1,
          '<textarea> can only have at most one child.'
        ) : invariant(children.length <= 1));
        children = children[0];
      }

      defaultValue = '' + children;
    }
    if (defaultValue == null) {
      defaultValue = '';
    }
    var value = LinkedValueUtils.getValue(this);
    return {
      // We save the initial value so that `ReactDOMComponent` doesn't update
      // `textContent` (unnecessary since we update value).
      // The initial value can be a boolean or object so that's why it's
      // forced to be a string.
      initialValue: '' + (value != null ? value : defaultValue)
    };
  },

  shouldComponentUpdate: function() {
    // Defer any updates to this component during the `onChange` handler.
    return !this._isChanging;
  },

  render: function() {
    // Clone `this.props` so we don't mutate the input.
    var props = merge(this.props);

    ("production" !== process.env.NODE_ENV ? invariant(
      props.dangerouslySetInnerHTML == null,
      '`dangerouslySetInnerHTML` does not make sense on <textarea>.'
    ) : invariant(props.dangerouslySetInnerHTML == null));

    props.defaultValue = null;
    props.value = null;
    props.onChange = this._handleChange;

    // Always set children to the same thing. In IE9, the selection range will
    // get reset if `textContent` is mutated.
    return textarea(props, this.state.initialValue);
  },

  componentDidUpdate: function(prevProps, prevState, prevContext) {
    var value = LinkedValueUtils.getValue(this);
    if (value != null) {
      var rootNode = this.getDOMNode();
      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);
    }
  },

  _handleChange: function(event) {
    var returnValue;
    var onChange = LinkedValueUtils.getOnChange(this);
    if (onChange) {
      this._isChanging = true;
      returnValue = onChange.call(this, event);
      this._isChanging = false;
    }
    this.setState({value: event.target.value});
    return returnValue;
  }

});

module.exports = ReactDOMTextarea;

}).call(this,require('_process'))
},{"./AutoFocusMixin":3,"./DOMPropertyOperations":13,"./LinkedValueUtils":25,"./ReactBrowserComponentMixin":30,"./ReactCompositeComponent":35,"./ReactDOM":38,"./invariant":122,"./merge":132,"./warning":145,"_process":147}],49:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactDefaultBatchingStrategy
 */

"use strict";

var ReactUpdates = require("./ReactUpdates");
var Transaction = require("./Transaction");

var emptyFunction = require("./emptyFunction");
var mixInto = require("./mixInto");

var RESET_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: function() {
    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
  }
};

var FLUSH_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
};

var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

function ReactDefaultBatchingStrategyTransaction() {
  this.reinitializeTransaction();
}

mixInto(ReactDefaultBatchingStrategyTransaction, Transaction.Mixin);
mixInto(ReactDefaultBatchingStrategyTransaction, {
  getTransactionWrappers: function() {
    return TRANSACTION_WRAPPERS;
  }
});

var transaction = new ReactDefaultBatchingStrategyTransaction();

var ReactDefaultBatchingStrategy = {
  isBatchingUpdates: false,

  /**
   * Call the provided function in a context within which calls to `setState`
   * and friends are batched such that components aren't updated unnecessarily.
   */
  batchedUpdates: function(callback, a, b) {
    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

    // The code is written this way to avoid extra allocations
    if (alreadyBatchingUpdates) {
      callback(a, b);
    } else {
      transaction.perform(callback, null, a, b);
    }
  }
};

module.exports = ReactDefaultBatchingStrategy;

},{"./ReactUpdates":78,"./Transaction":94,"./emptyFunction":104,"./mixInto":135}],50:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactDefaultInjection
 */

"use strict";

var BeforeInputEventPlugin = require("./BeforeInputEventPlugin");
var ChangeEventPlugin = require("./ChangeEventPlugin");
var ClientReactRootIndex = require("./ClientReactRootIndex");
var CompositionEventPlugin = require("./CompositionEventPlugin");
var DefaultEventPluginOrder = require("./DefaultEventPluginOrder");
var EnterLeaveEventPlugin = require("./EnterLeaveEventPlugin");
var ExecutionEnvironment = require("./ExecutionEnvironment");
var HTMLDOMPropertyConfig = require("./HTMLDOMPropertyConfig");
var MobileSafariClickEventPlugin = require("./MobileSafariClickEventPlugin");
var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");
var ReactComponentBrowserEnvironment =
  require("./ReactComponentBrowserEnvironment");
var ReactDefaultBatchingStrategy = require("./ReactDefaultBatchingStrategy");
var ReactDOM = require("./ReactDOM");
var ReactDOMButton = require("./ReactDOMButton");
var ReactDOMForm = require("./ReactDOMForm");
var ReactDOMImg = require("./ReactDOMImg");
var ReactDOMInput = require("./ReactDOMInput");
var ReactDOMOption = require("./ReactDOMOption");
var ReactDOMSelect = require("./ReactDOMSelect");
var ReactDOMTextarea = require("./ReactDOMTextarea");
var ReactEventListener = require("./ReactEventListener");
var ReactInjection = require("./ReactInjection");
var ReactInstanceHandles = require("./ReactInstanceHandles");
var ReactMount = require("./ReactMount");
var SelectEventPlugin = require("./SelectEventPlugin");
var ServerReactRootIndex = require("./ServerReactRootIndex");
var SimpleEventPlugin = require("./SimpleEventPlugin");
var SVGDOMPropertyConfig = require("./SVGDOMPropertyConfig");

var createFullPageComponent = require("./createFullPageComponent");

function inject() {
  ReactInjection.EventEmitter.injectReactEventListener(
    ReactEventListener
  );

  /**
   * Inject modules for resolving DOM hierarchy and plugin ordering.
   */
  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
  ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles);
  ReactInjection.EventPluginHub.injectMount(ReactMount);

  /**
   * Some important event plugins included by default (without having to require
   * them).
   */
  ReactInjection.EventPluginHub.injectEventPluginsByName({
    SimpleEventPlugin: SimpleEventPlugin,
    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
    ChangeEventPlugin: ChangeEventPlugin,
    CompositionEventPlugin: CompositionEventPlugin,
    MobileSafariClickEventPlugin: MobileSafariClickEventPlugin,
    SelectEventPlugin: SelectEventPlugin,
    BeforeInputEventPlugin: BeforeInputEventPlugin
  });

  ReactInjection.DOM.injectComponentClasses({
    button: ReactDOMButton,
    form: ReactDOMForm,
    img: ReactDOMImg,
    input: ReactDOMInput,
    option: ReactDOMOption,
    select: ReactDOMSelect,
    textarea: ReactDOMTextarea,

    html: createFullPageComponent(ReactDOM.html),
    head: createFullPageComponent(ReactDOM.head),
    body: createFullPageComponent(ReactDOM.body)
  });

  // This needs to happen after createFullPageComponent() otherwise the mixin
  // gets double injected.
  ReactInjection.CompositeComponent.injectMixin(ReactBrowserComponentMixin);

  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

  ReactInjection.EmptyComponent.injectEmptyComponent(ReactDOM.noscript);

  ReactInjection.Updates.injectReconcileTransaction(
    ReactComponentBrowserEnvironment.ReactReconcileTransaction
  );
  ReactInjection.Updates.injectBatchingStrategy(
    ReactDefaultBatchingStrategy
  );

  ReactInjection.RootIndex.injectCreateReactRootIndex(
    ExecutionEnvironment.canUseDOM ?
      ClientReactRootIndex.createReactRootIndex :
      ServerReactRootIndex.createReactRootIndex
  );

  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);

  if ("production" !== process.env.NODE_ENV) {
    var url = (ExecutionEnvironment.canUseDOM && window.location.href) || '';
    if ((/[?&]react_perf\b/).test(url)) {
      var ReactDefaultPerf = require("./ReactDefaultPerf");
      ReactDefaultPerf.start();
    }
  }
}

module.exports = {
  inject: inject
};

}).call(this,require('_process'))
},{"./BeforeInputEventPlugin":4,"./ChangeEventPlugin":8,"./ClientReactRootIndex":9,"./CompositionEventPlugin":10,"./DefaultEventPluginOrder":15,"./EnterLeaveEventPlugin":16,"./ExecutionEnvironment":23,"./HTMLDOMPropertyConfig":24,"./MobileSafariClickEventPlugin":27,"./ReactBrowserComponentMixin":30,"./ReactComponentBrowserEnvironment":34,"./ReactDOM":38,"./ReactDOMButton":39,"./ReactDOMForm":41,"./ReactDOMImg":43,"./ReactDOMInput":44,"./ReactDOMOption":45,"./ReactDOMSelect":46,"./ReactDOMTextarea":48,"./ReactDefaultBatchingStrategy":49,"./ReactDefaultPerf":51,"./ReactEventListener":58,"./ReactInjection":59,"./ReactInstanceHandles":61,"./ReactMount":63,"./SVGDOMPropertyConfig":79,"./SelectEventPlugin":80,"./ServerReactRootIndex":81,"./SimpleEventPlugin":82,"./createFullPageComponent":101,"_process":147}],51:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactDefaultPerf
 * @typechecks static-only
 */

"use strict";

var DOMProperty = require("./DOMProperty");
var ReactDefaultPerfAnalysis = require("./ReactDefaultPerfAnalysis");
var ReactMount = require("./ReactMount");
var ReactPerf = require("./ReactPerf");

var performanceNow = require("./performanceNow");

function roundFloat(val) {
  return Math.floor(val * 100) / 100;
}

function addValue(obj, key, val) {
  obj[key] = (obj[key] || 0) + val;
}

var ReactDefaultPerf = {
  _allMeasurements: [], // last item in the list is the current one
  _mountStack: [0],
  _injected: false,

  start: function() {
    if (!ReactDefaultPerf._injected) {
      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);
    }

    ReactDefaultPerf._allMeasurements.length = 0;
    ReactPerf.enableMeasure = true;
  },

  stop: function() {
    ReactPerf.enableMeasure = false;
  },

  getLastMeasurements: function() {
    return ReactDefaultPerf._allMeasurements;
  },

  printExclusive: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);
    console.table(summary.map(function(item) {
      return {
        'Component class name': item.componentName,
        'Total inclusive time (ms)': roundFloat(item.inclusive),
        'Exclusive mount time (ms)': roundFloat(item.exclusive),
        'Exclusive render time (ms)': roundFloat(item.render),
        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),
        'Render time per instance (ms)': roundFloat(item.render / item.count),
        'Instances': item.count
      };
    }));
    // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct
    // number.
  },

  printInclusive: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);
    console.table(summary.map(function(item) {
      return {
        'Owner > component': item.componentName,
        'Inclusive time (ms)': roundFloat(item.time),
        'Instances': item.count
      };
    }));
    console.log(
      'Total time:',
      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
    );
  },

  printWasted: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(
      measurements,
      true
    );
    console.table(summary.map(function(item) {
      return {
        'Owner > component': item.componentName,
        'Wasted time (ms)': item.time,
        'Instances': item.count
      };
    }));
    console.log(
      'Total time:',
      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
    );
  },

  printDOM: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);
    console.table(summary.map(function(item) {
      var result = {};
      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;
      result['type'] = item.type;
      result['args'] = JSON.stringify(item.args);
      return result;
    }));
    console.log(
      'Total time:',
      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
    );
  },

  _recordWrite: function(id, fnName, totalTime, args) {
    // TODO: totalTime isn't that useful since it doesn't count paints/reflows
    var writes =
      ReactDefaultPerf
        ._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1]
        .writes;
    writes[id] = writes[id] || [];
    writes[id].push({
      type: fnName,
      time: totalTime,
      args: args
    });
  },

  measure: function(moduleName, fnName, func) {
    return function() {var args=Array.prototype.slice.call(arguments,0);
      var totalTime;
      var rv;
      var start;

      if (fnName === '_renderNewRootComponent' ||
          fnName === 'flushBatchedUpdates') {
        // A "measurement" is a set of metrics recorded for each flush. We want
        // to group the metrics for a given flush together so we can look at the
        // components that rendered and the DOM operations that actually
        // happened to determine the amount of "wasted work" performed.
        ReactDefaultPerf._allMeasurements.push({
          exclusive: {},
          inclusive: {},
          render: {},
          counts: {},
          writes: {},
          displayNames: {},
          totalTime: 0
        });
        start = performanceNow();
        rv = func.apply(this, args);
        ReactDefaultPerf._allMeasurements[
          ReactDefaultPerf._allMeasurements.length - 1
        ].totalTime = performanceNow() - start;
        return rv;
      } else if (moduleName === 'ReactDOMIDOperations' ||
        moduleName === 'ReactComponentBrowserEnvironment') {
        start = performanceNow();
        rv = func.apply(this, args);
        totalTime = performanceNow() - start;

        if (fnName === 'mountImageIntoNode') {
          var mountID = ReactMount.getID(args[1]);
          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);
        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {
          // special format
          args[0].forEach(function(update) {
            var writeArgs = {};
            if (update.fromIndex !== null) {
              writeArgs.fromIndex = update.fromIndex;
            }
            if (update.toIndex !== null) {
              writeArgs.toIndex = update.toIndex;
            }
            if (update.textContent !== null) {
              writeArgs.textContent = update.textContent;
            }
            if (update.markupIndex !== null) {
              writeArgs.markup = args[1][update.markupIndex];
            }
            ReactDefaultPerf._recordWrite(
              update.parentID,
              update.type,
              totalTime,
              writeArgs
            );
          });
        } else {
          // basic format
          ReactDefaultPerf._recordWrite(
            args[0],
            fnName,
            totalTime,
            Array.prototype.slice.call(args, 1)
          );
        }
        return rv;
      } else if (moduleName === 'ReactCompositeComponent' && (
        fnName === 'mountComponent' ||
        fnName === 'updateComponent' || // TODO: receiveComponent()?
        fnName === '_renderValidatedComponent')) {

        var rootNodeID = fnName === 'mountComponent' ?
          args[0] :
          this._rootNodeID;
        var isRender = fnName === '_renderValidatedComponent';
        var isMount = fnName === 'mountComponent';

        var mountStack = ReactDefaultPerf._mountStack;
        var entry = ReactDefaultPerf._allMeasurements[
          ReactDefaultPerf._allMeasurements.length - 1
        ];

        if (isRender) {
          addValue(entry.counts, rootNodeID, 1);
        } else if (isMount) {
          mountStack.push(0);
        }

        start = performanceNow();
        rv = func.apply(this, args);
        totalTime = performanceNow() - start;

        if (isRender) {
          addValue(entry.render, rootNodeID, totalTime);
        } else if (isMount) {
          var subMountTime = mountStack.pop();
          mountStack[mountStack.length - 1] += totalTime;
          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);
          addValue(entry.inclusive, rootNodeID, totalTime);
        } else {
          addValue(entry.inclusive, rootNodeID, totalTime);
        }

        entry.displayNames[rootNodeID] = {
          current: this.constructor.displayName,
          owner: this._owner ? this._owner.constructor.displayName : '<root>'
        };

        return rv;
      } else {
        return func.apply(this, args);
      }
    };
  }
};

module.exports = ReactDefaultPerf;

},{"./DOMProperty":12,"./ReactDefaultPerfAnalysis":52,"./ReactMount":63,"./ReactPerf":67,"./performanceNow":139}],52:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactDefaultPerfAnalysis
 */

var merge = require("./merge");

// Don't try to save users less than 1.2ms (a number I made up)
var DONT_CARE_THRESHOLD = 1.2;
var DOM_OPERATION_TYPES = {
  'mountImageIntoNode': 'set innerHTML',
  INSERT_MARKUP: 'set innerHTML',
  MOVE_EXISTING: 'move',
  REMOVE_NODE: 'remove',
  TEXT_CONTENT: 'set textContent',
  'updatePropertyByID': 'update attribute',
  'deletePropertyByID': 'delete attribute',
  'updateStylesByID': 'update styles',
  'updateInnerHTMLByID': 'set innerHTML',
  'dangerouslyReplaceNodeWithMarkupByID': 'replace'
};

function getTotalTime(measurements) {
  // TODO: return number of DOM ops? could be misleading.
  // TODO: measure dropped frames after reconcile?
  // TODO: log total time of each reconcile and the top-level component
  // class that triggered it.
  var totalTime = 0;
  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    totalTime += measurement.totalTime;
  }
  return totalTime;
}

function getDOMSummary(measurements) {
  var items = [];
  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var id;

    for (id in measurement.writes) {
      measurement.writes[id].forEach(function(write) {
        items.push({
          id: id,
          type: DOM_OPERATION_TYPES[write.type] || write.type,
          args: write.args
        });
      });
    }
  }
  return items;
}

function getExclusiveSummary(measurements) {
  var candidates = {};
  var displayName;

  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var allIDs = merge(measurement.exclusive, measurement.inclusive);

    for (var id in allIDs) {
      displayName = measurement.displayNames[id].current;

      candidates[displayName] = candidates[displayName] || {
        componentName: displayName,
        inclusive: 0,
        exclusive: 0,
        render: 0,
        count: 0
      };
      if (measurement.render[id]) {
        candidates[displayName].render += measurement.render[id];
      }
      if (measurement.exclusive[id]) {
        candidates[displayName].exclusive += measurement.exclusive[id];
      }
      if (measurement.inclusive[id]) {
        candidates[displayName].inclusive += measurement.inclusive[id];
      }
      if (measurement.counts[id]) {
        candidates[displayName].count += measurement.counts[id];
      }
    }
  }

  // Now make a sorted array with the results.
  var arr = [];
  for (displayName in candidates) {
    if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {
      arr.push(candidates[displayName]);
    }
  }

  arr.sort(function(a, b) {
    return b.exclusive - a.exclusive;
  });

  return arr;
}

function getInclusiveSummary(measurements, onlyClean) {
  var candidates = {};
  var inclusiveKey;

  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var allIDs = merge(measurement.exclusive, measurement.inclusive);
    var cleanComponents;

    if (onlyClean) {
      cleanComponents = getUnchangedComponents(measurement);
    }

    for (var id in allIDs) {
      if (onlyClean && !cleanComponents[id]) {
        continue;
      }

      var displayName = measurement.displayNames[id];

      // Inclusive time is not useful for many components without knowing where
      // they are instantiated. So we aggregate inclusive time with both the
      // owner and current displayName as the key.
      inclusiveKey = displayName.owner + ' > ' + displayName.current;

      candidates[inclusiveKey] = candidates[inclusiveKey] || {
        componentName: inclusiveKey,
        time: 0,
        count: 0
      };

      if (measurement.inclusive[id]) {
        candidates[inclusiveKey].time += measurement.inclusive[id];
      }
      if (measurement.counts[id]) {
        candidates[inclusiveKey].count += measurement.counts[id];
      }
    }
  }

  // Now make a sorted array with the results.
  var arr = [];
  for (inclusiveKey in candidates) {
    if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {
      arr.push(candidates[inclusiveKey]);
    }
  }

  arr.sort(function(a, b) {
    return b.time - a.time;
  });

  return arr;
}

function getUnchangedComponents(measurement) {
  // For a given reconcile, look at which components did not actually
  // render anything to the DOM and return a mapping of their ID to
  // the amount of time it took to render the entire subtree.
  var cleanComponents = {};
  var dirtyLeafIDs = Object.keys(measurement.writes);
  var allIDs = merge(measurement.exclusive, measurement.inclusive);

  for (var id in allIDs) {
    var isDirty = false;
    // For each component that rendered, see if a component that triggerd
    // a DOM op is in its subtree.
    for (var i = 0; i < dirtyLeafIDs.length; i++) {
      if (dirtyLeafIDs[i].indexOf(id) === 0) {
        isDirty = true;
        break;
      }
    }
    if (!isDirty && measurement.counts[id] > 0) {
      cleanComponents[id] = true;
    }
  }
  return cleanComponents;
}

var ReactDefaultPerfAnalysis = {
  getExclusiveSummary: getExclusiveSummary,
  getInclusiveSummary: getInclusiveSummary,
  getDOMSummary: getDOMSummary,
  getTotalTime: getTotalTime
};

module.exports = ReactDefaultPerfAnalysis;

},{"./merge":132}],53:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactDescriptor
 */

"use strict";

var ReactContext = require("./ReactContext");
var ReactCurrentOwner = require("./ReactCurrentOwner");

var merge = require("./merge");
var warning = require("./warning");

/**
 * Warn for mutations.
 *
 * @internal
 * @param {object} object
 * @param {string} key
 */
function defineWarningProperty(object, key) {
  Object.defineProperty(object, key, {

    configurable: false,
    enumerable: true,

    get: function() {
      if (!this._store) {
        return null;
      }
      return this._store[key];
    },

    set: function(value) {
      ("production" !== process.env.NODE_ENV ? warning(
        false,
        'Don\'t set the ' + key + ' property of the component. ' +
        'Mutate the existing props object instead.'
      ) : null);
      this._store[key] = value;
    }

  });
}

/**
 * This is updated to true if the membrane is successfully created.
 */
var useMutationMembrane = false;

/**
 * Warn for mutations.
 *
 * @internal
 * @param {object} descriptor
 */
function defineMutationMembrane(prototype) {
  try {
    var pseudoFrozenProperties = {
      props: true
    };
    for (var key in pseudoFrozenProperties) {
      defineWarningProperty(prototype, key);
    }
    useMutationMembrane = true;
  } catch (x) {
    // IE will fail on defineProperty
  }
}

/**
 * Transfer static properties from the source to the target. Functions are
 * rebound to have this reflect the original source.
 */
function proxyStaticMethods(target, source) {
  if (typeof source !== 'function') {
    return;
  }
  for (var key in source) {
    if (source.hasOwnProperty(key)) {
      var value = source[key];
      if (typeof value === 'function') {
        var bound = value.bind(source);
        // Copy any properties defined on the function, such as `isRequired` on
        // a PropTypes validator. (mergeInto refuses to work on functions.)
        for (var k in value) {
          if (value.hasOwnProperty(k)) {
            bound[k] = value[k];
          }
        }
        target[key] = bound;
      } else {
        target[key] = value;
      }
    }
  }
}

/**
 * Base constructor for all React descriptors. This is only used to make this
 * work with a dynamic instanceof check. Nothing should live on this prototype.
 *
 * @param {*} type
 * @internal
 */
var ReactDescriptor = function() {};

if ("production" !== process.env.NODE_ENV) {
  defineMutationMembrane(ReactDescriptor.prototype);
}

ReactDescriptor.createFactory = function(type) {

  var descriptorPrototype = Object.create(ReactDescriptor.prototype);

  var factory = function(props, children) {
    // For consistency we currently allocate a new object for every descriptor.
    // This protects the descriptor from being mutated by the original props
    // object being mutated. It also protects the original props object from
    // being mutated by children arguments and default props. This behavior
    // comes with a performance cost and could be deprecated in the future.
    // It could also be optimized with a smarter JSX transform.
    if (props == null) {
      props = {};
    } else if (typeof props === 'object') {
      props = merge(props);
    }

    // Children can be more than one argument, and those are transferred onto
    // the newly allocated props object.
    var childrenLength = arguments.length - 1;
    if (childrenLength === 1) {
      props.children = children;
    } else if (childrenLength > 1) {
      var childArray = Array(childrenLength);
      for (var i = 0; i < childrenLength; i++) {
        childArray[i] = arguments[i + 1];
      }
      props.children = childArray;
    }

    // Initialize the descriptor object
    var descriptor = Object.create(descriptorPrototype);

    // Record the component responsible for creating this descriptor.
    descriptor._owner = ReactCurrentOwner.current;

    // TODO: Deprecate withContext, and then the context becomes accessible
    // through the owner.
    descriptor._context = ReactContext.current;

    if ("production" !== process.env.NODE_ENV) {
      // The validation flag and props are currently mutative. We put them on
      // an external backing store so that we can freeze the whole object.
      // This can be replaced with a WeakMap once they are implemented in
      // commonly used development environments.
      descriptor._store = { validated: false, props: props };

      // We're not allowed to set props directly on the object so we early
      // return and rely on the prototype membrane to forward to the backing
      // store.
      if (useMutationMembrane) {
        Object.freeze(descriptor);
        return descriptor;
      }
    }

    descriptor.props = props;
    return descriptor;
  };

  // Currently we expose the prototype of the descriptor so that
  // <Foo /> instanceof Foo works. This is controversial pattern.
  factory.prototype = descriptorPrototype;

  // Expose the type on the factory and the prototype so that it can be
  // easily accessed on descriptors. E.g. <Foo />.type === Foo.type and for
  // static methods like <Foo />.type.staticMethod();
  // This should not be named constructor since this may not be the function
  // that created the descriptor, and it may not even be a constructor.
  factory.type = type;
  descriptorPrototype.type = type;

  proxyStaticMethods(factory, type);

  // Expose a unique constructor on the prototype is that this works with type
  // systems that compare constructor properties: <Foo />.constructor === Foo
  // This may be controversial since it requires a known factory function.
  descriptorPrototype.constructor = factory;

  return factory;

};

ReactDescriptor.cloneAndReplaceProps = function(oldDescriptor, newProps) {
  var newDescriptor = Object.create(oldDescriptor.constructor.prototype);
  // It's important that this property order matches the hidden class of the
  // original descriptor to maintain perf.
  newDescriptor._owner = oldDescriptor._owner;
  newDescriptor._context = oldDescriptor._context;

  if ("production" !== process.env.NODE_ENV) {
    newDescriptor._store = {
      validated: oldDescriptor._store.validated,
      props: newProps
    };
    if (useMutationMembrane) {
      Object.freeze(newDescriptor);
      return newDescriptor;
    }
  }

  newDescriptor.props = newProps;
  return newDescriptor;
};

/**
 * Checks if a value is a valid descriptor constructor.
 *
 * @param {*}
 * @return {boolean}
 * @public
 */
ReactDescriptor.isValidFactory = function(factory) {
  return typeof factory === 'function' &&
         factory.prototype instanceof ReactDescriptor;
};

/**
 * @param {?object} object
 * @return {boolean} True if `object` is a valid component.
 * @final
 */
ReactDescriptor.isValidDescriptor = function(object) {
  return object instanceof ReactDescriptor;
};

module.exports = ReactDescriptor;

}).call(this,require('_process'))
},{"./ReactContext":36,"./ReactCurrentOwner":37,"./merge":132,"./warning":145,"_process":147}],54:[function(require,module,exports){
/**
 * Copyright 2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactDescriptorValidator
 */

/**
 * ReactDescriptorValidator provides a wrapper around a descriptor factory
 * which validates the props passed to the descriptor. This is intended to be
 * used only in DEV and could be replaced by a static type checker for languages
 * that support it.
 */

"use strict";

var ReactDescriptor = require("./ReactDescriptor");
var ReactPropTypeLocations = require("./ReactPropTypeLocations");
var ReactCurrentOwner = require("./ReactCurrentOwner");

var monitorCodeUse = require("./monitorCodeUse");

/**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */
var ownerHasKeyUseWarning = {
  'react_key_warning': {},
  'react_numeric_key_warning': {}
};
var ownerHasMonitoredObjectMap = {};

var loggedTypeFailures = {};

var NUMERIC_PROPERTY_REGEX = /^\d+$/;

/**
 * Gets the current owner's displayName for use in warnings.
 *
 * @internal
 * @return {?string} Display name or undefined
 */
function getCurrentOwnerDisplayName() {
  var current = ReactCurrentOwner.current;
  return current && current.constructor.displayName || undefined;
}

/**
 * Warn if the component doesn't have an explicit key assigned to it.
 * This component is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it.
 *
 * @internal
 * @param {ReactComponent} component Component that requires a key.
 * @param {*} parentType component's parent's type.
 */
function validateExplicitKey(component, parentType) {
  if (component._store.validated || component.props.key != null) {
    return;
  }
  component._store.validated = true;

  warnAndMonitorForKeyUse(
    'react_key_warning',
    'Each child in an array should have a unique "key" prop.',
    component,
    parentType
  );
}

/**
 * Warn if the key is being defined as an object property but has an incorrect
 * value.
 *
 * @internal
 * @param {string} name Property name of the key.
 * @param {ReactComponent} component Component that requires a key.
 * @param {*} parentType component's parent's type.
 */
function validatePropertyKey(name, component, parentType) {
  if (!NUMERIC_PROPERTY_REGEX.test(name)) {
    return;
  }
  warnAndMonitorForKeyUse(
    'react_numeric_key_warning',
    'Child objects should have non-numeric keys so ordering is preserved.',
    component,
    parentType
  );
}

/**
 * Shared warning and monitoring code for the key warnings.
 *
 * @internal
 * @param {string} warningID The id used when logging.
 * @param {string} message The base warning that gets output.
 * @param {ReactComponent} component Component that requires a key.
 * @param {*} parentType component's parent's type.
 */
function warnAndMonitorForKeyUse(warningID, message, component, parentType) {
  var ownerName = getCurrentOwnerDisplayName();
  var parentName = parentType.displayName;

  var useName = ownerName || parentName;
  var memoizer = ownerHasKeyUseWarning[warningID];
  if (memoizer.hasOwnProperty(useName)) {
    return;
  }
  memoizer[useName] = true;

  message += ownerName ?
    (" Check the render method of " + ownerName + ".") :
    (" Check the renderComponent call using <" + parentName + ">.");

  // Usually the current owner is the offender, but if it accepts children as a
  // property, it may be the creator of the child that's responsible for
  // assigning it a key.
  var childOwnerName = null;
  if (component._owner && component._owner !== ReactCurrentOwner.current) {
    // Name of the component that originally created this child.
    childOwnerName = component._owner.constructor.displayName;

    message += (" It was passed a child from " + childOwnerName + ".");
  }

  message += ' See http://fb.me/react-warning-keys for more information.';
  monitorCodeUse(warningID, {
    component: useName,
    componentOwner: childOwnerName
  });
  console.warn(message);
}

/**
 * Log that we're using an object map. We're considering deprecating this
 * feature and replace it with proper Map and ImmutableMap data structures.
 *
 * @internal
 */
function monitorUseOfObjectMap() {
  var currentName = getCurrentOwnerDisplayName() || '';
  if (ownerHasMonitoredObjectMap.hasOwnProperty(currentName)) {
    return;
  }
  ownerHasMonitoredObjectMap[currentName] = true;
  monitorCodeUse('react_object_map_children');
}

/**
 * Ensure that every component either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {*} component Statically passed child of any type.
 * @param {*} parentType component's parent's type.
 * @return {boolean}
 */
function validateChildKeys(component, parentType) {
  if (Array.isArray(component)) {
    for (var i = 0; i < component.length; i++) {
      var child = component[i];
      if (ReactDescriptor.isValidDescriptor(child)) {
        validateExplicitKey(child, parentType);
      }
    }
  } else if (ReactDescriptor.isValidDescriptor(component)) {
    // This component was passed in a valid location.
    component._store.validated = true;
  } else if (component && typeof component === 'object') {
    monitorUseOfObjectMap();
    for (var name in component) {
      validatePropertyKey(name, component[name], parentType);
    }
  }
}

/**
 * Assert that the props are valid
 *
 * @param {string} componentName Name of the component for error messages.
 * @param {object} propTypes Map of prop name to a ReactPropType
 * @param {object} props
 * @param {string} location e.g. "prop", "context", "child context"
 * @private
 */
function checkPropTypes(componentName, propTypes, props, location) {
  for (var propName in propTypes) {
    if (propTypes.hasOwnProperty(propName)) {
      var error;
      // Prop type validation may throw. In case they do, we don't want to
      // fail the render phase where it didn't fail before. So we log it.
      // After these have been cleaned up, we'll let them throw.
      try {
        error = propTypes[propName](props, propName, componentName, location);
      } catch (ex) {
        error = ex;
      }
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;
        // This will soon use the warning module
        monitorCodeUse(
          'react_failed_descriptor_type_check',
          { message: error.message }
        );
      }
    }
  }
}

var ReactDescriptorValidator = {

  /**
   * Wraps a descriptor factory function in another function which validates
   * the props and context of the descriptor and warns about any failed type
   * checks.
   *
   * @param {function} factory The original descriptor factory
   * @param {object?} propTypes A prop type definition set
   * @param {object?} contextTypes A context type definition set
   * @return {object} The component descriptor, which may be invalid.
   * @private
   */
  createFactory: function(factory, propTypes, contextTypes) {
    var validatedFactory = function(props, children) {
      var descriptor = factory.apply(this, arguments);

      for (var i = 1; i < arguments.length; i++) {
        validateChildKeys(arguments[i], descriptor.type);
      }

      var name = descriptor.type.displayName;
      if (propTypes) {
        checkPropTypes(
          name,
          propTypes,
          descriptor.props,
          ReactPropTypeLocations.prop
        );
      }
      if (contextTypes) {
        checkPropTypes(
          name,
          contextTypes,
          descriptor._context,
          ReactPropTypeLocations.context
        );
      }
      return descriptor;
    };

    validatedFactory.prototype = factory.prototype;
    validatedFactory.type = factory.type;

    // Copy static properties
    for (var key in factory) {
      if (factory.hasOwnProperty(key)) {
        validatedFactory[key] = factory[key];
      }
    }

    return validatedFactory;
  }

};

module.exports = ReactDescriptorValidator;

},{"./ReactCurrentOwner":37,"./ReactDescriptor":53,"./ReactPropTypeLocations":70,"./monitorCodeUse":136}],55:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactEmptyComponent
 */

"use strict";

var invariant = require("./invariant");

var component;
// This registry keeps track of the React IDs of the components that rendered to
// `null` (in reality a placeholder such as `noscript`)
var nullComponentIdsRegistry = {};

var ReactEmptyComponentInjection = {
  injectEmptyComponent: function(emptyComponent) {
    component = emptyComponent;
  }
};

/**
 * @return {ReactComponent} component The injected empty component.
 */
function getEmptyComponent() {
  ("production" !== process.env.NODE_ENV ? invariant(
    component,
    'Trying to return null from a render, but no null placeholder component ' +
    'was injected.'
  ) : invariant(component));
  return component();
}

/**
 * Mark the component as having rendered to null.
 * @param {string} id Component's `_rootNodeID`.
 */
function registerNullComponentID(id) {
  nullComponentIdsRegistry[id] = true;
}

/**
 * Unmark the component as having rendered to null: it renders to something now.
 * @param {string} id Component's `_rootNodeID`.
 */
function deregisterNullComponentID(id) {
  delete nullComponentIdsRegistry[id];
}

/**
 * @param {string} id Component's `_rootNodeID`.
 * @return {boolean} True if the component is rendered to null.
 */
function isNullComponentID(id) {
  return nullComponentIdsRegistry[id];
}

var ReactEmptyComponent = {
  deregisterNullComponentID: deregisterNullComponentID,
  getEmptyComponent: getEmptyComponent,
  injection: ReactEmptyComponentInjection,
  isNullComponentID: isNullComponentID,
  registerNullComponentID: registerNullComponentID
};

module.exports = ReactEmptyComponent;

}).call(this,require('_process'))
},{"./invariant":122,"_process":147}],56:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactErrorUtils
 * @typechecks
 */

"use strict";

var ReactErrorUtils = {
  /**
   * Creates a guarded version of a function. This is supposed to make debugging
   * of event handlers easier. To aid debugging with the browser's debugger,
   * this currently simply returns the original function.
   *
   * @param {function} func Function to be executed
   * @param {string} name The name of the guard
   * @return {function}
   */
  guard: function(func, name) {
    return func;
  }
};

module.exports = ReactErrorUtils;

},{}],57:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactEventEmitterMixin
 */

"use strict";

var EventPluginHub = require("./EventPluginHub");

function runEventQueueInBatch(events) {
  EventPluginHub.enqueueEvents(events);
  EventPluginHub.processEventQueue();
}

var ReactEventEmitterMixin = {

  /**
   * Streams a fired top-level event to `EventPluginHub` where plugins have the
   * opportunity to create `ReactEvent`s to be dispatched.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {object} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native environment event.
   */
  handleTopLevel: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    var events = EventPluginHub.extractEvents(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent
    );

    runEventQueueInBatch(events);
  }
};

module.exports = ReactEventEmitterMixin;

},{"./EventPluginHub":19}],58:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactEventListener
 * @typechecks static-only
 */

"use strict";

var EventListener = require("./EventListener");
var ExecutionEnvironment = require("./ExecutionEnvironment");
var PooledClass = require("./PooledClass");
var ReactInstanceHandles = require("./ReactInstanceHandles");
var ReactMount = require("./ReactMount");
var ReactUpdates = require("./ReactUpdates");

var getEventTarget = require("./getEventTarget");
var getUnboundedScrollPosition = require("./getUnboundedScrollPosition");
var mixInto = require("./mixInto");

/**
 * Finds the parent React component of `node`.
 *
 * @param {*} node
 * @return {?DOMEventTarget} Parent container, or `null` if the specified node
 *                           is not nested.
 */
function findParent(node) {
  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
  // traversal, but caching is difficult to do correctly without using a
  // mutation observer to listen for all DOM changes.
  var nodeID = ReactMount.getID(node);
  var rootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);
  var container = ReactMount.findReactContainerForID(rootID);
  var parent = ReactMount.getFirstReactDOM(container);
  return parent;
}

// Used to store ancestor hierarchy in top level callback
function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
  this.topLevelType = topLevelType;
  this.nativeEvent = nativeEvent;
  this.ancestors = [];
}
mixInto(TopLevelCallbackBookKeeping, {
  destructor: function() {
    this.topLevelType = null;
    this.nativeEvent = null;
    this.ancestors.length = 0;
  }
});
PooledClass.addPoolingTo(
  TopLevelCallbackBookKeeping,
  PooledClass.twoArgumentPooler
);

function handleTopLevelImpl(bookKeeping) {
  var topLevelTarget = ReactMount.getFirstReactDOM(
    getEventTarget(bookKeeping.nativeEvent)
  ) || window;

  // Loop through the hierarchy, in case there's any nested components.
  // It's important that we build the array of ancestors before calling any
  // event handlers, because event handlers can modify the DOM, leading to
  // inconsistencies with ReactMount's node cache. See #1105.
  var ancestor = topLevelTarget;
  while (ancestor) {
    bookKeeping.ancestors.push(ancestor);
    ancestor = findParent(ancestor);
  }

  for (var i = 0, l = bookKeeping.ancestors.length; i < l; i++) {
    topLevelTarget = bookKeeping.ancestors[i];
    var topLevelTargetID = ReactMount.getID(topLevelTarget) || '';
    ReactEventListener._handleTopLevel(
      bookKeeping.topLevelType,
      topLevelTarget,
      topLevelTargetID,
      bookKeeping.nativeEvent
    );
  }
}

function scrollValueMonitor(cb) {
  var scrollPosition = getUnboundedScrollPosition(window);
  cb(scrollPosition);
}

var ReactEventListener = {
  _enabled: true,
  _handleTopLevel: null,

  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

  setHandleTopLevel: function(handleTopLevel) {
    ReactEventListener._handleTopLevel = handleTopLevel;
  },

  setEnabled: function(enabled) {
    ReactEventListener._enabled = !!enabled;
  },

  isEnabled: function() {
    return ReactEventListener._enabled;
  },


  /**
   * Traps top-level events by using event bubbling.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} handle Element on which to attach listener.
   * @return {object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {
    var element = handle;
    if (!element) {
      return;
    }
    return EventListener.listen(
      element,
      handlerBaseName,
      ReactEventListener.dispatchEvent.bind(null, topLevelType)
    );
  },

  /**
   * Traps a top-level event by using event capturing.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} handle Element on which to attach listener.
   * @return {object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {
    var element = handle;
    if (!element) {
      return;
    }
    return EventListener.capture(
      element,
      handlerBaseName,
      ReactEventListener.dispatchEvent.bind(null, topLevelType)
    );
  },

  monitorScrollValue: function(refresh) {
    var callback = scrollValueMonitor.bind(null, refresh);
    EventListener.listen(window, 'scroll', callback);
    EventListener.listen(window, 'resize', callback);
  },

  dispatchEvent: function(topLevelType, nativeEvent) {
    if (!ReactEventListener._enabled) {
      return;
    }

    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(
      topLevelType,
      nativeEvent
    );
    try {
      // Event queue being processed in the same cycle allows
      // `preventDefault`.
      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
    } finally {
      TopLevelCallbackBookKeeping.release(bookKeeping);
    }
  }
};

module.exports = ReactEventListener;

},{"./EventListener":18,"./ExecutionEnvironment":23,"./PooledClass":28,"./ReactInstanceHandles":61,"./ReactMount":63,"./ReactUpdates":78,"./getEventTarget":113,"./getUnboundedScrollPosition":118,"./mixInto":135}],59:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactInjection
 */

"use strict";

var DOMProperty = require("./DOMProperty");
var EventPluginHub = require("./EventPluginHub");
var ReactComponent = require("./ReactComponent");
var ReactCompositeComponent = require("./ReactCompositeComponent");
var ReactDOM = require("./ReactDOM");
var ReactEmptyComponent = require("./ReactEmptyComponent");
var ReactBrowserEventEmitter = require("./ReactBrowserEventEmitter");
var ReactPerf = require("./ReactPerf");
var ReactRootIndex = require("./ReactRootIndex");
var ReactUpdates = require("./ReactUpdates");

var ReactInjection = {
  Component: ReactComponent.injection,
  CompositeComponent: ReactCompositeComponent.injection,
  DOMProperty: DOMProperty.injection,
  EmptyComponent: ReactEmptyComponent.injection,
  EventPluginHub: EventPluginHub.injection,
  DOM: ReactDOM.injection,
  EventEmitter: ReactBrowserEventEmitter.injection,
  Perf: ReactPerf.injection,
  RootIndex: ReactRootIndex.injection,
  Updates: ReactUpdates.injection
};

module.exports = ReactInjection;

},{"./DOMProperty":12,"./EventPluginHub":19,"./ReactBrowserEventEmitter":31,"./ReactComponent":33,"./ReactCompositeComponent":35,"./ReactDOM":38,"./ReactEmptyComponent":55,"./ReactPerf":67,"./ReactRootIndex":74,"./ReactUpdates":78}],60:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactInputSelection
 */

"use strict";

var ReactDOMSelection = require("./ReactDOMSelection");

var containsNode = require("./containsNode");
var focusNode = require("./focusNode");
var getActiveElement = require("./getActiveElement");

function isInDocument(node) {
  return containsNode(document.documentElement, node);
}

/**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */
var ReactInputSelection = {

  hasSelectionCapabilities: function(elem) {
    return elem && (
      (elem.nodeName === 'INPUT' && elem.type === 'text') ||
      elem.nodeName === 'TEXTAREA' ||
      elem.contentEditable === 'true'
    );
  },

  getSelectionInformation: function() {
    var focusedElem = getActiveElement();
    return {
      focusedElem: focusedElem,
      selectionRange:
          ReactInputSelection.hasSelectionCapabilities(focusedElem) ?
          ReactInputSelection.getSelection(focusedElem) :
          null
    };
  },

  /**
   * @restoreSelection: If any selection information was potentially lost,
   * restore it. This is useful when performing operations that could remove dom
   * nodes and place them back in, resulting in focus being lost.
   */
  restoreSelection: function(priorSelectionInformation) {
    var curFocusedElem = getActiveElement();
    var priorFocusedElem = priorSelectionInformation.focusedElem;
    var priorSelectionRange = priorSelectionInformation.selectionRange;
    if (curFocusedElem !== priorFocusedElem &&
        isInDocument(priorFocusedElem)) {
      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
        ReactInputSelection.setSelection(
          priorFocusedElem,
          priorSelectionRange
        );
      }
      focusNode(priorFocusedElem);
    }
  },

  /**
   * @getSelection: Gets the selection bounds of a focused textarea, input or
   * contentEditable node.
   * -@input: Look up selection bounds of this input
   * -@return {start: selectionStart, end: selectionEnd}
   */
  getSelection: function(input) {
    var selection;

    if ('selectionStart' in input) {
      // Modern browser with input or textarea.
      selection = {
        start: input.selectionStart,
        end: input.selectionEnd
      };
    } else if (document.selection && input.nodeName === 'INPUT') {
      // IE8 input.
      var range = document.selection.createRange();
      // There can only be one selection per document in IE, so it must
      // be in our element.
      if (range.parentElement() === input) {
        selection = {
          start: -range.moveStart('character', -input.value.length),
          end: -range.moveEnd('character', -input.value.length)
        };
      }
    } else {
      // Content editable or old IE textarea.
      selection = ReactDOMSelection.getOffsets(input);
    }

    return selection || {start: 0, end: 0};
  },

  /**
   * @setSelection: Sets the selection bounds of a textarea or input and focuses
   * the input.
   * -@input     Set selection bounds of this input or textarea
   * -@offsets   Object of same form that is returned from get*
   */
  setSelection: function(input, offsets) {
    var start = offsets.start;
    var end = offsets.end;
    if (typeof end === 'undefined') {
      end = start;
    }

    if ('selectionStart' in input) {
      input.selectionStart = start;
      input.selectionEnd = Math.min(end, input.value.length);
    } else if (document.selection && input.nodeName === 'INPUT') {
      var range = input.createTextRange();
      range.collapse(true);
      range.moveStart('character', start);
      range.moveEnd('character', end - start);
      range.select();
    } else {
      ReactDOMSelection.setOffsets(input, offsets);
    }
  }
};

module.exports = ReactInputSelection;

},{"./ReactDOMSelection":47,"./containsNode":98,"./focusNode":108,"./getActiveElement":110}],61:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactInstanceHandles
 * @typechecks static-only
 */

"use strict";

var ReactRootIndex = require("./ReactRootIndex");

var invariant = require("./invariant");

var SEPARATOR = '.';
var SEPARATOR_LENGTH = SEPARATOR.length;

/**
 * Maximum depth of traversals before we consider the possibility of a bad ID.
 */
var MAX_TREE_DEPTH = 100;

/**
 * Creates a DOM ID prefix to use when mounting React components.
 *
 * @param {number} index A unique integer
 * @return {string} React root ID.
 * @internal
 */
function getReactRootIDString(index) {
  return SEPARATOR + index.toString(36);
}

/**
 * Checks if a character in the supplied ID is a separator or the end.
 *
 * @param {string} id A React DOM ID.
 * @param {number} index Index of the character to check.
 * @return {boolean} True if the character is a separator or end of the ID.
 * @private
 */
function isBoundary(id, index) {
  return id.charAt(index) === SEPARATOR || index === id.length;
}

/**
 * Checks if the supplied string is a valid React DOM ID.
 *
 * @param {string} id A React DOM ID, maybe.
 * @return {boolean} True if the string is a valid React DOM ID.
 * @private
 */
function isValidID(id) {
  return id === '' || (
    id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR
  );
}

/**
 * Checks if the first ID is an ancestor of or equal to the second ID.
 *
 * @param {string} ancestorID
 * @param {string} descendantID
 * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.
 * @internal
 */
function isAncestorIDOf(ancestorID, descendantID) {
  return (
    descendantID.indexOf(ancestorID) === 0 &&
    isBoundary(descendantID, ancestorID.length)
  );
}

/**
 * Gets the parent ID of the supplied React DOM ID, `id`.
 *
 * @param {string} id ID of a component.
 * @return {string} ID of the parent, or an empty string.
 * @private
 */
function getParentID(id) {
  return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';
}

/**
 * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the
 * supplied `destinationID`. If they are equal, the ID is returned.
 *
 * @param {string} ancestorID ID of an ancestor node of `destinationID`.
 * @param {string} destinationID ID of the destination node.
 * @return {string} Next ID on the path from `ancestorID` to `destinationID`.
 * @private
 */
function getNextDescendantID(ancestorID, destinationID) {
  ("production" !== process.env.NODE_ENV ? invariant(
    isValidID(ancestorID) && isValidID(destinationID),
    'getNextDescendantID(%s, %s): Received an invalid React DOM ID.',
    ancestorID,
    destinationID
  ) : invariant(isValidID(ancestorID) && isValidID(destinationID)));
  ("production" !== process.env.NODE_ENV ? invariant(
    isAncestorIDOf(ancestorID, destinationID),
    'getNextDescendantID(...): React has made an invalid assumption about ' +
    'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.',
    ancestorID,
    destinationID
  ) : invariant(isAncestorIDOf(ancestorID, destinationID)));
  if (ancestorID === destinationID) {
    return ancestorID;
  }
  // Skip over the ancestor and the immediate separator. Traverse until we hit
  // another separator or we reach the end of `destinationID`.
  var start = ancestorID.length + SEPARATOR_LENGTH;
  for (var i = start; i < destinationID.length; i++) {
    if (isBoundary(destinationID, i)) {
      break;
    }
  }
  return destinationID.substr(0, i);
}

/**
 * Gets the nearest common ancestor ID of two IDs.
 *
 * Using this ID scheme, the nearest common ancestor ID is the longest common
 * prefix of the two IDs that immediately preceded a "marker" in both strings.
 *
 * @param {string} oneID
 * @param {string} twoID
 * @return {string} Nearest common ancestor ID, or the empty string if none.
 * @private
 */
function getFirstCommonAncestorID(oneID, twoID) {
  var minLength = Math.min(oneID.length, twoID.length);
  if (minLength === 0) {
    return '';
  }
  var lastCommonMarkerIndex = 0;
  // Use `<=` to traverse until the "EOL" of the shorter string.
  for (var i = 0; i <= minLength; i++) {
    if (isBoundary(oneID, i) && isBoundary(twoID, i)) {
      lastCommonMarkerIndex = i;
    } else if (oneID.charAt(i) !== twoID.charAt(i)) {
      break;
    }
  }
  var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);
  ("production" !== process.env.NODE_ENV ? invariant(
    isValidID(longestCommonID),
    'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s',
    oneID,
    twoID,
    longestCommonID
  ) : invariant(isValidID(longestCommonID)));
  return longestCommonID;
}

/**
 * Traverses the parent path between two IDs (either up or down). The IDs must
 * not be the same, and there must exist a parent path between them. If the
 * callback returns `false`, traversal is stopped.
 *
 * @param {?string} start ID at which to start traversal.
 * @param {?string} stop ID at which to end traversal.
 * @param {function} cb Callback to invoke each ID with.
 * @param {?boolean} skipFirst Whether or not to skip the first node.
 * @param {?boolean} skipLast Whether or not to skip the last node.
 * @private
 */
function traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {
  start = start || '';
  stop = stop || '';
  ("production" !== process.env.NODE_ENV ? invariant(
    start !== stop,
    'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.',
    start
  ) : invariant(start !== stop));
  var traverseUp = isAncestorIDOf(stop, start);
  ("production" !== process.env.NODE_ENV ? invariant(
    traverseUp || isAncestorIDOf(start, stop),
    'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' +
    'not have a parent path.',
    start,
    stop
  ) : invariant(traverseUp || isAncestorIDOf(start, stop)));
  // Traverse from `start` to `stop` one depth at a time.
  var depth = 0;
  var traverse = traverseUp ? getParentID : getNextDescendantID;
  for (var id = start; /* until break */; id = traverse(id, stop)) {
    var ret;
    if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {
      ret = cb(id, traverseUp, arg);
    }
    if (ret === false || id === stop) {
      // Only break //after// visiting `stop`.
      break;
    }
    ("production" !== process.env.NODE_ENV ? invariant(
      depth++ < MAX_TREE_DEPTH,
      'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' +
      'traversing the React DOM ID tree. This may be due to malformed IDs: %s',
      start, stop
    ) : invariant(depth++ < MAX_TREE_DEPTH));
  }
}

/**
 * Manages the IDs assigned to DOM representations of React components. This
 * uses a specific scheme in order to traverse the DOM efficiently (e.g. in
 * order to simulate events).
 *
 * @internal
 */
var ReactInstanceHandles = {

  /**
   * Constructs a React root ID
   * @return {string} A React root ID.
   */
  createReactRootID: function() {
    return getReactRootIDString(ReactRootIndex.createReactRootIndex());
  },

  /**
   * Constructs a React ID by joining a root ID with a name.
   *
   * @param {string} rootID Root ID of a parent component.
   * @param {string} name A component's name (as flattened children).
   * @return {string} A React ID.
   * @internal
   */
  createReactID: function(rootID, name) {
    return rootID + name;
  },

  /**
   * Gets the DOM ID of the React component that is the root of the tree that
   * contains the React component with the supplied DOM ID.
   *
   * @param {string} id DOM ID of a React component.
   * @return {?string} DOM ID of the React component that is the root.
   * @internal
   */
  getReactRootIDFromNodeID: function(id) {
    if (id && id.charAt(0) === SEPARATOR && id.length > 1) {
      var index = id.indexOf(SEPARATOR, 1);
      return index > -1 ? id.substr(0, index) : id;
    }
    return null;
  },

  /**
   * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
   * should would receive a `mouseEnter` or `mouseLeave` event.
   *
   * NOTE: Does not invoke the callback on the nearest common ancestor because
   * nothing "entered" or "left" that element.
   *
   * @param {string} leaveID ID being left.
   * @param {string} enterID ID being entered.
   * @param {function} cb Callback to invoke on each entered/left ID.
   * @param {*} upArg Argument to invoke the callback with on left IDs.
   * @param {*} downArg Argument to invoke the callback with on entered IDs.
   * @internal
   */
  traverseEnterLeave: function(leaveID, enterID, cb, upArg, downArg) {
    var ancestorID = getFirstCommonAncestorID(leaveID, enterID);
    if (ancestorID !== leaveID) {
      traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);
    }
    if (ancestorID !== enterID) {
      traverseParentPath(ancestorID, enterID, cb, downArg, true, false);
    }
  },

  /**
   * Simulates the traversal of a two-phase, capture/bubble event dispatch.
   *
   * NOTE: This traversal happens on IDs without touching the DOM.
   *
   * @param {string} targetID ID of the target node.
   * @param {function} cb Callback to invoke.
   * @param {*} arg Argument to invoke the callback with.
   * @internal
   */
  traverseTwoPhase: function(targetID, cb, arg) {
    if (targetID) {
      traverseParentPath('', targetID, cb, arg, true, false);
      traverseParentPath(targetID, '', cb, arg, false, true);
    }
  },

  /**
   * Traverse a node ID, calling the supplied `cb` for each ancestor ID. For
   * example, passing `.0.$row-0.1` would result in `cb` getting called
   * with `.0`, `.0.$row-0`, and `.0.$row-0.1`.
   *
   * NOTE: This traversal happens on IDs without touching the DOM.
   *
   * @param {string} targetID ID of the target node.
   * @param {function} cb Callback to invoke.
   * @param {*} arg Argument to invoke the callback with.
   * @internal
   */
  traverseAncestors: function(targetID, cb, arg) {
    traverseParentPath('', targetID, cb, arg, true, false);
  },

  /**
   * Exposed for unit testing.
   * @private
   */
  _getFirstCommonAncestorID: getFirstCommonAncestorID,

  /**
   * Exposed for unit testing.
   * @private
   */
  _getNextDescendantID: getNextDescendantID,

  isAncestorIDOf: isAncestorIDOf,

  SEPARATOR: SEPARATOR

};

module.exports = ReactInstanceHandles;

}).call(this,require('_process'))
},{"./ReactRootIndex":74,"./invariant":122,"_process":147}],62:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactMarkupChecksum
 */

"use strict";

var adler32 = require("./adler32");

var ReactMarkupChecksum = {
  CHECKSUM_ATTR_NAME: 'data-react-checksum',

  /**
   * @param {string} markup Markup string
   * @return {string} Markup string with checksum attribute attached
   */
  addChecksumToMarkup: function(markup) {
    var checksum = adler32(markup);
    return markup.replace(
      '>',
      ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '">'
    );
  },

  /**
   * @param {string} markup to use
   * @param {DOMElement} element root React element
   * @returns {boolean} whether or not the markup is the same
   */
  canReuseMarkup: function(markup, element) {
    var existingChecksum = element.getAttribute(
      ReactMarkupChecksum.CHECKSUM_ATTR_NAME
    );
    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
    var markupChecksum = adler32(markup);
    return markupChecksum === existingChecksum;
  }
};

module.exports = ReactMarkupChecksum;

},{"./adler32":97}],63:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactMount
 */

"use strict";

var DOMProperty = require("./DOMProperty");
var ReactBrowserEventEmitter = require("./ReactBrowserEventEmitter");
var ReactCurrentOwner = require("./ReactCurrentOwner");
var ReactDescriptor = require("./ReactDescriptor");
var ReactInstanceHandles = require("./ReactInstanceHandles");
var ReactPerf = require("./ReactPerf");

var containsNode = require("./containsNode");
var getReactRootElementInContainer = require("./getReactRootElementInContainer");
var instantiateReactComponent = require("./instantiateReactComponent");
var invariant = require("./invariant");
var shouldUpdateReactComponent = require("./shouldUpdateReactComponent");
var warning = require("./warning");

var SEPARATOR = ReactInstanceHandles.SEPARATOR;

var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
var nodeCache = {};

var ELEMENT_NODE_TYPE = 1;
var DOC_NODE_TYPE = 9;

/** Mapping from reactRootID to React component instance. */
var instancesByReactRootID = {};

/** Mapping from reactRootID to `container` nodes. */
var containersByReactRootID = {};

if ("production" !== process.env.NODE_ENV) {
  /** __DEV__-only mapping from reactRootID to root elements. */
  var rootElementsByReactRootID = {};
}

// Used to store breadth-first search state in findComponentRoot.
var findComponentRootReusableArray = [];

/**
 * @param {DOMElement} container DOM element that may contain a React component.
 * @return {?string} A "reactRoot" ID, if a React component is rendered.
 */
function getReactRootID(container) {
  var rootElement = getReactRootElementInContainer(container);
  return rootElement && ReactMount.getID(rootElement);
}

/**
 * Accessing node[ATTR_NAME] or calling getAttribute(ATTR_NAME) on a form
 * element can return its control whose name or ID equals ATTR_NAME. All
 * DOM nodes support `getAttributeNode` but this can also get called on
 * other objects so just return '' if we're given something other than a
 * DOM node (such as window).
 *
 * @param {?DOMElement|DOMWindow|DOMDocument|DOMTextNode} node DOM node.
 * @return {string} ID of the supplied `domNode`.
 */
function getID(node) {
  var id = internalGetID(node);
  if (id) {
    if (nodeCache.hasOwnProperty(id)) {
      var cached = nodeCache[id];
      if (cached !== node) {
        ("production" !== process.env.NODE_ENV ? invariant(
          !isValid(cached, id),
          'ReactMount: Two valid but unequal nodes with the same `%s`: %s',
          ATTR_NAME, id
        ) : invariant(!isValid(cached, id)));

        nodeCache[id] = node;
      }
    } else {
      nodeCache[id] = node;
    }
  }

  return id;
}

function internalGetID(node) {
  // If node is something like a window, document, or text node, none of
  // which support attributes or a .getAttribute method, gracefully return
  // the empty string, as if the attribute were missing.
  return node && node.getAttribute && node.getAttribute(ATTR_NAME) || '';
}

/**
 * Sets the React-specific ID of the given node.
 *
 * @param {DOMElement} node The DOM node whose ID will be set.
 * @param {string} id The value of the ID attribute.
 */
function setID(node, id) {
  var oldID = internalGetID(node);
  if (oldID !== id) {
    delete nodeCache[oldID];
  }
  node.setAttribute(ATTR_NAME, id);
  nodeCache[id] = node;
}

/**
 * Finds the node with the supplied React-generated DOM ID.
 *
 * @param {string} id A React-generated DOM ID.
 * @return {DOMElement} DOM node with the suppled `id`.
 * @internal
 */
function getNode(id) {
  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
    nodeCache[id] = ReactMount.findReactNodeByID(id);
  }
  return nodeCache[id];
}

/**
 * A node is "valid" if it is contained by a currently mounted container.
 *
 * This means that the node does not have to be contained by a document in
 * order to be considered valid.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @param {string} id The expected ID of the node.
 * @return {boolean} Whether the node is contained by a mounted container.
 */
function isValid(node, id) {
  if (node) {
    ("production" !== process.env.NODE_ENV ? invariant(
      internalGetID(node) === id,
      'ReactMount: Unexpected modification of `%s`',
      ATTR_NAME
    ) : invariant(internalGetID(node) === id));

    var container = ReactMount.findReactContainerForID(id);
    if (container && containsNode(container, node)) {
      return true;
    }
  }

  return false;
}

/**
 * Causes the cache to forget about one React-specific ID.
 *
 * @param {string} id The ID to forget.
 */
function purgeID(id) {
  delete nodeCache[id];
}

var deepestNodeSoFar = null;
function findDeepestCachedAncestorImpl(ancestorID) {
  var ancestor = nodeCache[ancestorID];
  if (ancestor && isValid(ancestor, ancestorID)) {
    deepestNodeSoFar = ancestor;
  } else {
    // This node isn't populated in the cache, so presumably none of its
    // descendants are. Break out of the loop.
    return false;
  }
}

/**
 * Return the deepest cached node whose ID is a prefix of `targetID`.
 */
function findDeepestCachedAncestor(targetID) {
  deepestNodeSoFar = null;
  ReactInstanceHandles.traverseAncestors(
    targetID,
    findDeepestCachedAncestorImpl
  );

  var foundNode = deepestNodeSoFar;
  deepestNodeSoFar = null;
  return foundNode;
}

/**
 * Mounting is the process of initializing a React component by creatings its
 * representative DOM elements and inserting them into a supplied `container`.
 * Any prior content inside `container` is destroyed in the process.
 *
 *   ReactMount.renderComponent(
 *     component,
 *     document.getElementById('container')
 *   );
 *
 *   <div id="container">                   <-- Supplied `container`.
 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
 *       // ...                                 component.
 *     </div>
 *   </div>
 *
 * Inside of `container`, the first element rendered is the "reactRoot".
 */
var ReactMount = {
  /** Exposed for debugging purposes **/
  _instancesByReactRootID: instancesByReactRootID,

  /**
   * This is a hook provided to support rendering React components while
   * ensuring that the apparent scroll position of its `container` does not
   * change.
   *
   * @param {DOMElement} container The `container` being rendered into.
   * @param {function} renderCallback This must be called once to do the render.
   */
  scrollMonitor: function(container, renderCallback) {
    renderCallback();
  },

  /**
   * Take a component that's already mounted into the DOM and replace its props
   * @param {ReactComponent} prevComponent component instance already in the DOM
   * @param {ReactComponent} nextComponent component instance to render
   * @param {DOMElement} container container to render into
   * @param {?function} callback function triggered on completion
   */
  _updateRootComponent: function(
      prevComponent,
      nextComponent,
      container,
      callback) {
    var nextProps = nextComponent.props;
    ReactMount.scrollMonitor(container, function() {
      prevComponent.replaceProps(nextProps, callback);
    });

    if ("production" !== process.env.NODE_ENV) {
      // Record the root element in case it later gets transplanted.
      rootElementsByReactRootID[getReactRootID(container)] =
        getReactRootElementInContainer(container);
    }

    return prevComponent;
  },

  /**
   * Register a component into the instance map and starts scroll value
   * monitoring
   * @param {ReactComponent} nextComponent component instance to render
   * @param {DOMElement} container container to render into
   * @return {string} reactRoot ID prefix
   */
  _registerComponent: function(nextComponent, container) {
    ("production" !== process.env.NODE_ENV ? invariant(
      container && (
        container.nodeType === ELEMENT_NODE_TYPE ||
        container.nodeType === DOC_NODE_TYPE
      ),
      '_registerComponent(...): Target container is not a DOM element.'
    ) : invariant(container && (
      container.nodeType === ELEMENT_NODE_TYPE ||
      container.nodeType === DOC_NODE_TYPE
    )));

    ReactBrowserEventEmitter.ensureScrollValueMonitoring();

    var reactRootID = ReactMount.registerContainer(container);
    instancesByReactRootID[reactRootID] = nextComponent;
    return reactRootID;
  },

  /**
   * Render a new component into the DOM.
   * @param {ReactComponent} nextComponent component instance to render
   * @param {DOMElement} container container to render into
   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
   * @return {ReactComponent} nextComponent
   */
  _renderNewRootComponent: ReactPerf.measure(
    'ReactMount',
    '_renderNewRootComponent',
    function(
        nextComponent,
        container,
        shouldReuseMarkup) {
      // Various parts of our code (such as ReactCompositeComponent's
      // _renderValidatedComponent) assume that calls to render aren't nested;
      // verify that that's the case.
      ("production" !== process.env.NODE_ENV ? warning(
        ReactCurrentOwner.current == null,
        '_renderNewRootComponent(): Render methods should be a pure function ' +
        'of props and state; triggering nested component updates from ' +
        'render is not allowed. If necessary, trigger nested updates in ' +
        'componentDidUpdate.'
      ) : null);

      var componentInstance = instantiateReactComponent(nextComponent);
      var reactRootID = ReactMount._registerComponent(
        componentInstance,
        container
      );
      componentInstance.mountComponentIntoNode(
        reactRootID,
        container,
        shouldReuseMarkup
      );

      if ("production" !== process.env.NODE_ENV) {
        // Record the root element in case it later gets transplanted.
        rootElementsByReactRootID[reactRootID] =
          getReactRootElementInContainer(container);
      }

      return componentInstance;
    }
  ),

  /**
   * Renders a React component into the DOM in the supplied `container`.
   *
   * If the React component was previously rendered into `container`, this will
   * perform an update on it and only mutate the DOM as necessary to reflect the
   * latest React component.
   *
   * @param {ReactDescriptor} nextDescriptor Component descriptor to render.
   * @param {DOMElement} container DOM element to render into.
   * @param {?function} callback function triggered on completion
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  renderComponent: function(nextDescriptor, container, callback) {
    ("production" !== process.env.NODE_ENV ? invariant(
      ReactDescriptor.isValidDescriptor(nextDescriptor),
      'renderComponent(): Invalid component descriptor.%s',
      (
        ReactDescriptor.isValidFactory(nextDescriptor) ?
          ' Instead of passing a component class, make sure to instantiate ' +
          'it first by calling it with props.' :
        // Check if it quacks like a descriptor
        typeof nextDescriptor.props !== "undefined" ?
          ' This may be caused by unintentionally loading two independent ' +
          'copies of React.' :
          ''
      )
    ) : invariant(ReactDescriptor.isValidDescriptor(nextDescriptor)));

    var prevComponent = instancesByReactRootID[getReactRootID(container)];

    if (prevComponent) {
      var prevDescriptor = prevComponent._descriptor;
      if (shouldUpdateReactComponent(prevDescriptor, nextDescriptor)) {
        return ReactMount._updateRootComponent(
          prevComponent,
          nextDescriptor,
          container,
          callback
        );
      } else {
        ReactMount.unmountComponentAtNode(container);
      }
    }

    var reactRootElement = getReactRootElementInContainer(container);
    var containerHasReactMarkup =
      reactRootElement && ReactMount.isRenderedByReact(reactRootElement);

    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent;

    var component = ReactMount._renderNewRootComponent(
      nextDescriptor,
      container,
      shouldReuseMarkup
    );
    callback && callback.call(component);
    return component;
  },

  /**
   * Constructs a component instance of `constructor` with `initialProps` and
   * renders it into the supplied `container`.
   *
   * @param {function} constructor React component constructor.
   * @param {?object} props Initial props of the component instance.
   * @param {DOMElement} container DOM element to render into.
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  constructAndRenderComponent: function(constructor, props, container) {
    return ReactMount.renderComponent(constructor(props), container);
  },

  /**
   * Constructs a component instance of `constructor` with `initialProps` and
   * renders it into a container node identified by supplied `id`.
   *
   * @param {function} componentConstructor React component constructor
   * @param {?object} props Initial props of the component instance.
   * @param {string} id ID of the DOM element to render into.
   * @return {ReactComponent} Component instance rendered in the container node.
   */
  constructAndRenderComponentByID: function(constructor, props, id) {
    var domNode = document.getElementById(id);
    ("production" !== process.env.NODE_ENV ? invariant(
      domNode,
      'Tried to get element with id of "%s" but it is not present on the page.',
      id
    ) : invariant(domNode));
    return ReactMount.constructAndRenderComponent(constructor, props, domNode);
  },

  /**
   * Registers a container node into which React components will be rendered.
   * This also creates the "reactRoot" ID that will be assigned to the element
   * rendered within.
   *
   * @param {DOMElement} container DOM element to register as a container.
   * @return {string} The "reactRoot" ID of elements rendered within.
   */
  registerContainer: function(container) {
    var reactRootID = getReactRootID(container);
    if (reactRootID) {
      // If one exists, make sure it is a valid "reactRoot" ID.
      reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);
    }
    if (!reactRootID) {
      // No valid "reactRoot" ID found, create one.
      reactRootID = ReactInstanceHandles.createReactRootID();
    }
    containersByReactRootID[reactRootID] = container;
    return reactRootID;
  },

  /**
   * Unmounts and destroys the React component rendered in the `container`.
   *
   * @param {DOMElement} container DOM element containing a React component.
   * @return {boolean} True if a component was found in and unmounted from
   *                   `container`
   */
  unmountComponentAtNode: function(container) {
    // Various parts of our code (such as ReactCompositeComponent's
    // _renderValidatedComponent) assume that calls to render aren't nested;
    // verify that that's the case. (Strictly speaking, unmounting won't cause a
    // render but we still don't expect to be in a render call here.)
    ("production" !== process.env.NODE_ENV ? warning(
      ReactCurrentOwner.current == null,
      'unmountComponentAtNode(): Render methods should be a pure function of ' +
      'props and state; triggering nested component updates from render is ' +
      'not allowed. If necessary, trigger nested updates in ' +
      'componentDidUpdate.'
    ) : null);

    var reactRootID = getReactRootID(container);
    var component = instancesByReactRootID[reactRootID];
    if (!component) {
      return false;
    }
    ReactMount.unmountComponentFromNode(component, container);
    delete instancesByReactRootID[reactRootID];
    delete containersByReactRootID[reactRootID];
    if ("production" !== process.env.NODE_ENV) {
      delete rootElementsByReactRootID[reactRootID];
    }
    return true;
  },

  /**
   * Unmounts a component and removes it from the DOM.
   *
   * @param {ReactComponent} instance React component instance.
   * @param {DOMElement} container DOM element to unmount from.
   * @final
   * @internal
   * @see {ReactMount.unmountComponentAtNode}
   */
  unmountComponentFromNode: function(instance, container) {
    instance.unmountComponent();

    if (container.nodeType === DOC_NODE_TYPE) {
      container = container.documentElement;
    }

    // http://jsperf.com/emptying-a-node
    while (container.lastChild) {
      container.removeChild(container.lastChild);
    }
  },

  /**
   * Finds the container DOM element that contains React component to which the
   * supplied DOM `id` belongs.
   *
   * @param {string} id The ID of an element rendered by a React component.
   * @return {?DOMElement} DOM element that contains the `id`.
   */
  findReactContainerForID: function(id) {
    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);
    var container = containersByReactRootID[reactRootID];

    if ("production" !== process.env.NODE_ENV) {
      var rootElement = rootElementsByReactRootID[reactRootID];
      if (rootElement && rootElement.parentNode !== container) {
        ("production" !== process.env.NODE_ENV ? invariant(
          // Call internalGetID here because getID calls isValid which calls
          // findReactContainerForID (this function).
          internalGetID(rootElement) === reactRootID,
          'ReactMount: Root element ID differed from reactRootID.'
        ) : invariant(// Call internalGetID here because getID calls isValid which calls
        // findReactContainerForID (this function).
        internalGetID(rootElement) === reactRootID));

        var containerChild = container.firstChild;
        if (containerChild &&
            reactRootID === internalGetID(containerChild)) {
          // If the container has a new child with the same ID as the old
          // root element, then rootElementsByReactRootID[reactRootID] is
          // just stale and needs to be updated. The case that deserves a
          // warning is when the container is empty.
          rootElementsByReactRootID[reactRootID] = containerChild;
        } else {
          console.warn(
            'ReactMount: Root element has been removed from its original ' +
            'container. New container:', rootElement.parentNode
          );
        }
      }
    }

    return container;
  },

  /**
   * Finds an element rendered by React with the supplied ID.
   *
   * @param {string} id ID of a DOM node in the React component.
   * @return {DOMElement} Root DOM node of the React component.
   */
  findReactNodeByID: function(id) {
    var reactRoot = ReactMount.findReactContainerForID(id);
    return ReactMount.findComponentRoot(reactRoot, id);
  },

  /**
   * True if the supplied `node` is rendered by React.
   *
   * @param {*} node DOM Element to check.
   * @return {boolean} True if the DOM Element appears to be rendered by React.
   * @internal
   */
  isRenderedByReact: function(node) {
    if (node.nodeType !== 1) {
      // Not a DOMElement, therefore not a React component
      return false;
    }
    var id = ReactMount.getID(node);
    return id ? id.charAt(0) === SEPARATOR : false;
  },

  /**
   * Traverses up the ancestors of the supplied node to find a node that is a
   * DOM representation of a React component.
   *
   * @param {*} node
   * @return {?DOMEventTarget}
   * @internal
   */
  getFirstReactDOM: function(node) {
    var current = node;
    while (current && current.parentNode !== current) {
      if (ReactMount.isRenderedByReact(current)) {
        return current;
      }
      current = current.parentNode;
    }
    return null;
  },

  /**
   * Finds a node with the supplied `targetID` inside of the supplied
   * `ancestorNode`.  Exploits the ID naming scheme to perform the search
   * quickly.
   *
   * @param {DOMEventTarget} ancestorNode Search from this root.
   * @pararm {string} targetID ID of the DOM representation of the component.
   * @return {DOMEventTarget} DOM node with the supplied `targetID`.
   * @internal
   */
  findComponentRoot: function(ancestorNode, targetID) {
    var firstChildren = findComponentRootReusableArray;
    var childIndex = 0;

    var deepestAncestor = findDeepestCachedAncestor(targetID) || ancestorNode;

    firstChildren[0] = deepestAncestor.firstChild;
    firstChildren.length = 1;

    while (childIndex < firstChildren.length) {
      var child = firstChildren[childIndex++];
      var targetChild;

      while (child) {
        var childID = ReactMount.getID(child);
        if (childID) {
          // Even if we find the node we're looking for, we finish looping
          // through its siblings to ensure they're cached so that we don't have
          // to revisit this node again. Otherwise, we make n^2 calls to getID
          // when visiting the many children of a single node in order.

          if (targetID === childID) {
            targetChild = child;
          } else if (ReactInstanceHandles.isAncestorIDOf(childID, targetID)) {
            // If we find a child whose ID is an ancestor of the given ID,
            // then we can be sure that we only want to search the subtree
            // rooted at this child, so we can throw out the rest of the
            // search state.
            firstChildren.length = childIndex = 0;
            firstChildren.push(child.firstChild);
          }

        } else {
          // If this child had no ID, then there's a chance that it was
          // injected automatically by the browser, as when a `<table>`
          // element sprouts an extra `<tbody>` child as a side effect of
          // `.innerHTML` parsing. Optimistically continue down this
          // branch, but not before examining the other siblings.
          firstChildren.push(child.firstChild);
        }

        child = child.nextSibling;
      }

      if (targetChild) {
        // Emptying firstChildren/findComponentRootReusableArray is
        // not necessary for correctness, but it helps the GC reclaim
        // any nodes that were left at the end of the search.
        firstChildren.length = 0;

        return targetChild;
      }
    }

    firstChildren.length = 0;

    ("production" !== process.env.NODE_ENV ? invariant(
      false,
      'findComponentRoot(..., %s): Unable to find element. This probably ' +
      'means the DOM was unexpectedly mutated (e.g., by the browser), ' +
      'usually due to forgetting a <tbody> when using tables, nesting <p> ' +
      'or <a> tags, or using non-SVG elements in an <svg> parent. Try ' +
      'inspecting the child nodes of the element with React ID `%s`.',
      targetID,
      ReactMount.getID(ancestorNode)
    ) : invariant(false));
  },


  /**
   * React ID utilities.
   */

  getReactRootID: getReactRootID,

  getID: getID,

  setID: setID,

  getNode: getNode,

  purgeID: purgeID
};

module.exports = ReactMount;

}).call(this,require('_process'))
},{"./DOMProperty":12,"./ReactBrowserEventEmitter":31,"./ReactCurrentOwner":37,"./ReactDescriptor":53,"./ReactInstanceHandles":61,"./ReactPerf":67,"./containsNode":98,"./getReactRootElementInContainer":116,"./instantiateReactComponent":121,"./invariant":122,"./shouldUpdateReactComponent":142,"./warning":145,"_process":147}],64:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactMultiChild
 * @typechecks static-only
 */

"use strict";

var ReactComponent = require("./ReactComponent");
var ReactMultiChildUpdateTypes = require("./ReactMultiChildUpdateTypes");

var flattenChildren = require("./flattenChildren");
var instantiateReactComponent = require("./instantiateReactComponent");
var shouldUpdateReactComponent = require("./shouldUpdateReactComponent");

/**
 * Updating children of a component may trigger recursive updates. The depth is
 * used to batch recursive updates to render markup more efficiently.
 *
 * @type {number}
 * @private
 */
var updateDepth = 0;

/**
 * Queue of update configuration objects.
 *
 * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.
 *
 * @type {array<object>}
 * @private
 */
var updateQueue = [];

/**
 * Queue of markup to be rendered.
 *
 * @type {array<string>}
 * @private
 */
var markupQueue = [];

/**
 * Enqueues markup to be rendered and inserted at a supplied index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {string} markup Markup that renders into an element.
 * @param {number} toIndex Destination index.
 * @private
 */
function enqueueMarkup(parentID, markup, toIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,
    markupIndex: markupQueue.push(markup) - 1,
    textContent: null,
    fromIndex: null,
    toIndex: toIndex
  });
}

/**
 * Enqueues moving an existing element to another index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {number} fromIndex Source index of the existing element.
 * @param {number} toIndex Destination index of the element.
 * @private
 */
function enqueueMove(parentID, fromIndex, toIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,
    markupIndex: null,
    textContent: null,
    fromIndex: fromIndex,
    toIndex: toIndex
  });
}

/**
 * Enqueues removing an element at an index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {number} fromIndex Index of the element to remove.
 * @private
 */
function enqueueRemove(parentID, fromIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.REMOVE_NODE,
    markupIndex: null,
    textContent: null,
    fromIndex: fromIndex,
    toIndex: null
  });
}

/**
 * Enqueues setting the text content.
 *
 * @param {string} parentID ID of the parent component.
 * @param {string} textContent Text content to set.
 * @private
 */
function enqueueTextContent(parentID, textContent) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,
    markupIndex: null,
    textContent: textContent,
    fromIndex: null,
    toIndex: null
  });
}

/**
 * Processes any enqueued updates.
 *
 * @private
 */
function processQueue() {
  if (updateQueue.length) {
    ReactComponent.BackendIDOperations.dangerouslyProcessChildrenUpdates(
      updateQueue,
      markupQueue
    );
    clearQueue();
  }
}

/**
 * Clears any enqueued updates.
 *
 * @private
 */
function clearQueue() {
  updateQueue.length = 0;
  markupQueue.length = 0;
}

/**
 * ReactMultiChild are capable of reconciling multiple children.
 *
 * @class ReactMultiChild
 * @internal
 */
var ReactMultiChild = {

  /**
   * Provides common functionality for components that must reconcile multiple
   * children. This is used by `ReactDOMComponent` to mount, update, and
   * unmount child components.
   *
   * @lends {ReactMultiChild.prototype}
   */
  Mixin: {

    /**
     * Generates a "mount image" for each of the supplied children. In the case
     * of `ReactDOMComponent`, a mount image is a string of markup.
     *
     * @param {?object} nestedChildren Nested child maps.
     * @return {array} An array of mounted representations.
     * @internal
     */
    mountChildren: function(nestedChildren, transaction) {
      var children = flattenChildren(nestedChildren);
      var mountImages = [];
      var index = 0;
      this._renderedChildren = children;
      for (var name in children) {
        var child = children[name];
        if (children.hasOwnProperty(name)) {
          // The rendered children must be turned into instances as they're
          // mounted.
          var childInstance = instantiateReactComponent(child);
          children[name] = childInstance;
          // Inlined for performance, see `ReactInstanceHandles.createReactID`.
          var rootID = this._rootNodeID + name;
          var mountImage = childInstance.mountComponent(
            rootID,
            transaction,
            this._mountDepth + 1
          );
          childInstance._mountIndex = index;
          mountImages.push(mountImage);
          index++;
        }
      }
      return mountImages;
    },

    /**
     * Replaces any rendered children with a text content string.
     *
     * @param {string} nextContent String of content.
     * @internal
     */
    updateTextContent: function(nextContent) {
      updateDepth++;
      var errorThrown = true;
      try {
        var prevChildren = this._renderedChildren;
        // Remove any rendered children.
        for (var name in prevChildren) {
          if (prevChildren.hasOwnProperty(name)) {
            this._unmountChildByName(prevChildren[name], name);
          }
        }
        // Set new text content.
        this.setTextContent(nextContent);
        errorThrown = false;
      } finally {
        updateDepth--;
        if (!updateDepth) {
          errorThrown ? clearQueue() : processQueue();
        }
      }
    },

    /**
     * Updates the rendered children with new children.
     *
     * @param {?object} nextNestedChildren Nested child maps.
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    updateChildren: function(nextNestedChildren, transaction) {
      updateDepth++;
      var errorThrown = true;
      try {
        this._updateChildren(nextNestedChildren, transaction);
        errorThrown = false;
      } finally {
        updateDepth--;
        if (!updateDepth) {
          errorThrown ? clearQueue() : processQueue();
        }
      }
    },

    /**
     * Improve performance by isolating this hot code path from the try/catch
     * block in `updateChildren`.
     *
     * @param {?object} nextNestedChildren Nested child maps.
     * @param {ReactReconcileTransaction} transaction
     * @final
     * @protected
     */
    _updateChildren: function(nextNestedChildren, transaction) {
      var nextChildren = flattenChildren(nextNestedChildren);
      var prevChildren = this._renderedChildren;
      if (!nextChildren && !prevChildren) {
        return;
      }
      var name;
      // `nextIndex` will increment for each child in `nextChildren`, but
      // `lastIndex` will be the last index visited in `prevChildren`.
      var lastIndex = 0;
      var nextIndex = 0;
      for (name in nextChildren) {
        if (!nextChildren.hasOwnProperty(name)) {
          continue;
        }
        var prevChild = prevChildren && prevChildren[name];
        var prevDescriptor = prevChild && prevChild._descriptor;
        var nextDescriptor = nextChildren[name];
        if (shouldUpdateReactComponent(prevDescriptor, nextDescriptor)) {
          this.moveChild(prevChild, nextIndex, lastIndex);
          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
          prevChild.receiveComponent(nextDescriptor, transaction);
          prevChild._mountIndex = nextIndex;
        } else {
          if (prevChild) {
            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
            this._unmountChildByName(prevChild, name);
          }
          // The child must be instantiated before it's mounted.
          var nextChildInstance = instantiateReactComponent(nextDescriptor);
          this._mountChildByNameAtIndex(
            nextChildInstance, name, nextIndex, transaction
          );
        }
        nextIndex++;
      }
      // Remove children that are no longer present.
      for (name in prevChildren) {
        if (prevChildren.hasOwnProperty(name) &&
            !(nextChildren && nextChildren[name])) {
          this._unmountChildByName(prevChildren[name], name);
        }
      }
    },

    /**
     * Unmounts all rendered children. This should be used to clean up children
     * when this component is unmounted.
     *
     * @internal
     */
    unmountChildren: function() {
      var renderedChildren = this._renderedChildren;
      for (var name in renderedChildren) {
        var renderedChild = renderedChildren[name];
        // TODO: When is this not true?
        if (renderedChild.unmountComponent) {
          renderedChild.unmountComponent();
        }
      }
      this._renderedChildren = null;
    },

    /**
     * Moves a child component to the supplied index.
     *
     * @param {ReactComponent} child Component to move.
     * @param {number} toIndex Destination index of the element.
     * @param {number} lastIndex Last index visited of the siblings of `child`.
     * @protected
     */
    moveChild: function(child, toIndex, lastIndex) {
      // If the index of `child` is less than `lastIndex`, then it needs to
      // be moved. Otherwise, we do not need to move it because a child will be
      // inserted or moved before `child`.
      if (child._mountIndex < lastIndex) {
        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);
      }
    },

    /**
     * Creates a child component.
     *
     * @param {ReactComponent} child Component to create.
     * @param {string} mountImage Markup to insert.
     * @protected
     */
    createChild: function(child, mountImage) {
      enqueueMarkup(this._rootNodeID, mountImage, child._mountIndex);
    },

    /**
     * Removes a child component.
     *
     * @param {ReactComponent} child Child to remove.
     * @protected
     */
    removeChild: function(child) {
      enqueueRemove(this._rootNodeID, child._mountIndex);
    },

    /**
     * Sets this text content string.
     *
     * @param {string} textContent Text content to set.
     * @protected
     */
    setTextContent: function(textContent) {
      enqueueTextContent(this._rootNodeID, textContent);
    },

    /**
     * Mounts a child with the supplied name.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to mount.
     * @param {string} name Name of the child.
     * @param {number} index Index at which to insert the child.
     * @param {ReactReconcileTransaction} transaction
     * @private
     */
    _mountChildByNameAtIndex: function(child, name, index, transaction) {
      // Inlined for performance, see `ReactInstanceHandles.createReactID`.
      var rootID = this._rootNodeID + name;
      var mountImage = child.mountComponent(
        rootID,
        transaction,
        this._mountDepth + 1
      );
      child._mountIndex = index;
      this.createChild(child, mountImage);
      this._renderedChildren = this._renderedChildren || {};
      this._renderedChildren[name] = child;
    },

    /**
     * Unmounts a rendered child by name.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to unmount.
     * @param {string} name Name of the child in `this._renderedChildren`.
     * @private
     */
    _unmountChildByName: function(child, name) {
      this.removeChild(child);
      child._mountIndex = null;
      child.unmountComponent();
      delete this._renderedChildren[name];
    }

  }

};

module.exports = ReactMultiChild;

},{"./ReactComponent":33,"./ReactMultiChildUpdateTypes":65,"./flattenChildren":107,"./instantiateReactComponent":121,"./shouldUpdateReactComponent":142}],65:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactMultiChildUpdateTypes
 */

"use strict";

var keyMirror = require("./keyMirror");

/**
 * When a component's children are updated, a series of update configuration
 * objects are created in order to batch and serialize the required changes.
 *
 * Enumerates all the possible types of update configurations.
 *
 * @internal
 */
var ReactMultiChildUpdateTypes = keyMirror({
  INSERT_MARKUP: null,
  MOVE_EXISTING: null,
  REMOVE_NODE: null,
  TEXT_CONTENT: null
});

module.exports = ReactMultiChildUpdateTypes;

},{"./keyMirror":128}],66:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactOwner
 */

"use strict";

var emptyObject = require("./emptyObject");
var invariant = require("./invariant");

/**
 * ReactOwners are capable of storing references to owned components.
 *
 * All components are capable of //being// referenced by owner components, but
 * only ReactOwner components are capable of //referencing// owned components.
 * The named reference is known as a "ref".
 *
 * Refs are available when mounted and updated during reconciliation.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return (
 *         <div onClick={this.handleClick}>
 *           <CustomComponent ref="custom" />
 *         </div>
 *       );
 *     },
 *     handleClick: function() {
 *       this.refs.custom.handleClick();
 *     },
 *     componentDidMount: function() {
 *       this.refs.custom.initialize();
 *     }
 *   });
 *
 * Refs should rarely be used. When refs are used, they should only be done to
 * control data that is not handled by React's data flow.
 *
 * @class ReactOwner
 */
var ReactOwner = {

  /**
   * @param {?object} object
   * @return {boolean} True if `object` is a valid owner.
   * @final
   */
  isValidOwner: function(object) {
    return !!(
      object &&
      typeof object.attachRef === 'function' &&
      typeof object.detachRef === 'function'
    );
  },

  /**
   * Adds a component by ref to an owner component.
   *
   * @param {ReactComponent} component Component to reference.
   * @param {string} ref Name by which to refer to the component.
   * @param {ReactOwner} owner Component on which to record the ref.
   * @final
   * @internal
   */
  addComponentAsRefTo: function(component, ref, owner) {
    ("production" !== process.env.NODE_ENV ? invariant(
      ReactOwner.isValidOwner(owner),
      'addComponentAsRefTo(...): Only a ReactOwner can have refs. This ' +
      'usually means that you\'re trying to add a ref to a component that ' +
      'doesn\'t have an owner (that is, was not created inside of another ' +
      'component\'s `render` method). Try rendering this component inside of ' +
      'a new top-level component which will hold the ref.'
    ) : invariant(ReactOwner.isValidOwner(owner)));
    owner.attachRef(ref, component);
  },

  /**
   * Removes a component by ref from an owner component.
   *
   * @param {ReactComponent} component Component to dereference.
   * @param {string} ref Name of the ref to remove.
   * @param {ReactOwner} owner Component on which the ref is recorded.
   * @final
   * @internal
   */
  removeComponentAsRefFrom: function(component, ref, owner) {
    ("production" !== process.env.NODE_ENV ? invariant(
      ReactOwner.isValidOwner(owner),
      'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. This ' +
      'usually means that you\'re trying to remove a ref to a component that ' +
      'doesn\'t have an owner (that is, was not created inside of another ' +
      'component\'s `render` method). Try rendering this component inside of ' +
      'a new top-level component which will hold the ref.'
    ) : invariant(ReactOwner.isValidOwner(owner)));
    // Check that `component` is still the current ref because we do not want to
    // detach the ref if another component stole it.
    if (owner.refs[ref] === component) {
      owner.detachRef(ref);
    }
  },

  /**
   * A ReactComponent must mix this in to have refs.
   *
   * @lends {ReactOwner.prototype}
   */
  Mixin: {

    construct: function() {
      this.refs = emptyObject;
    },

    /**
     * Lazily allocates the refs object and stores `component` as `ref`.
     *
     * @param {string} ref Reference name.
     * @param {component} component Component to store as `ref`.
     * @final
     * @private
     */
    attachRef: function(ref, component) {
      ("production" !== process.env.NODE_ENV ? invariant(
        component.isOwnedBy(this),
        'attachRef(%s, ...): Only a component\'s owner can store a ref to it.',
        ref
      ) : invariant(component.isOwnedBy(this)));
      var refs = this.refs === emptyObject ? (this.refs = {}) : this.refs;
      refs[ref] = component;
    },

    /**
     * Detaches a reference name.
     *
     * @param {string} ref Name to dereference.
     * @final
     * @private
     */
    detachRef: function(ref) {
      delete this.refs[ref];
    }

  }

};

module.exports = ReactOwner;

}).call(this,require('_process'))
},{"./emptyObject":105,"./invariant":122,"_process":147}],67:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactPerf
 * @typechecks static-only
 */

"use strict";

/**
 * ReactPerf is a general AOP system designed to measure performance. This
 * module only has the hooks: see ReactDefaultPerf for the analysis tool.
 */
var ReactPerf = {
  /**
   * Boolean to enable/disable measurement. Set to false by default to prevent
   * accidental logging and perf loss.
   */
  enableMeasure: false,

  /**
   * Holds onto the measure function in use. By default, don't measure
   * anything, but we'll override this if we inject a measure function.
   */
  storedMeasure: _noMeasure,

  /**
   * Use this to wrap methods you want to measure. Zero overhead in production.
   *
   * @param {string} objName
   * @param {string} fnName
   * @param {function} func
   * @return {function}
   */
  measure: function(objName, fnName, func) {
    if ("production" !== process.env.NODE_ENV) {
      var measuredFunc = null;
      return function() {
        if (ReactPerf.enableMeasure) {
          if (!measuredFunc) {
            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);
          }
          return measuredFunc.apply(this, arguments);
        }
        return func.apply(this, arguments);
      };
    }
    return func;
  },

  injection: {
    /**
     * @param {function} measure
     */
    injectMeasure: function(measure) {
      ReactPerf.storedMeasure = measure;
    }
  }
};

/**
 * Simply passes through the measured function, without measuring it.
 *
 * @param {string} objName
 * @param {string} fnName
 * @param {function} func
 * @return {function}
 */
function _noMeasure(objName, fnName, func) {
  return func;
}

module.exports = ReactPerf;

}).call(this,require('_process'))
},{"_process":147}],68:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactPropTransferer
 */

"use strict";

var emptyFunction = require("./emptyFunction");
var invariant = require("./invariant");
var joinClasses = require("./joinClasses");
var merge = require("./merge");

/**
 * Creates a transfer strategy that will merge prop values using the supplied
 * `mergeStrategy`. If a prop was previously unset, this just sets it.
 *
 * @param {function} mergeStrategy
 * @return {function}
 */
function createTransferStrategy(mergeStrategy) {
  return function(props, key, value) {
    if (!props.hasOwnProperty(key)) {
      props[key] = value;
    } else {
      props[key] = mergeStrategy(props[key], value);
    }
  };
}

var transferStrategyMerge = createTransferStrategy(function(a, b) {
  // `merge` overrides the first object's (`props[key]` above) keys using the
  // second object's (`value`) keys. An object's style's existing `propA` would
  // get overridden. Flip the order here.
  return merge(b, a);
});

/**
 * Transfer strategies dictate how props are transferred by `transferPropsTo`.
 * NOTE: if you add any more exceptions to this list you should be sure to
 * update `cloneWithProps()` accordingly.
 */
var TransferStrategies = {
  /**
   * Never transfer `children`.
   */
  children: emptyFunction,
  /**
   * Transfer the `className` prop by merging them.
   */
  className: createTransferStrategy(joinClasses),
  /**
   * Never transfer the `key` prop.
   */
  key: emptyFunction,
  /**
   * Never transfer the `ref` prop.
   */
  ref: emptyFunction,
  /**
   * Transfer the `style` prop (which is an object) by merging them.
   */
  style: transferStrategyMerge
};

/**
 * Mutates the first argument by transferring the properties from the second
 * argument.
 *
 * @param {object} props
 * @param {object} newProps
 * @return {object}
 */
function transferInto(props, newProps) {
  for (var thisKey in newProps) {
    if (!newProps.hasOwnProperty(thisKey)) {
      continue;
    }

    var transferStrategy = TransferStrategies[thisKey];

    if (transferStrategy && TransferStrategies.hasOwnProperty(thisKey)) {
      transferStrategy(props, thisKey, newProps[thisKey]);
    } else if (!props.hasOwnProperty(thisKey)) {
      props[thisKey] = newProps[thisKey];
    }
  }
  return props;
}

/**
 * ReactPropTransferer are capable of transferring props to another component
 * using a `transferPropsTo` method.
 *
 * @class ReactPropTransferer
 */
var ReactPropTransferer = {

  TransferStrategies: TransferStrategies,

  /**
   * Merge two props objects using TransferStrategies.
   *
   * @param {object} oldProps original props (they take precedence)
   * @param {object} newProps new props to merge in
   * @return {object} a new object containing both sets of props merged.
   */
  mergeProps: function(oldProps, newProps) {
    return transferInto(merge(oldProps), newProps);
  },

  /**
   * @lends {ReactPropTransferer.prototype}
   */
  Mixin: {

    /**
     * Transfer props from this component to a target component.
     *
     * Props that do not have an explicit transfer strategy will be transferred
     * only if the target component does not already have the prop set.
     *
     * This is usually used to pass down props to a returned root component.
     *
     * @param {ReactDescriptor} descriptor Component receiving the properties.
     * @return {ReactDescriptor} The supplied `component`.
     * @final
     * @protected
     */
    transferPropsTo: function(descriptor) {
      ("production" !== process.env.NODE_ENV ? invariant(
        descriptor._owner === this,
        '%s: You can\'t call transferPropsTo() on a component that you ' +
        'don\'t own, %s. This usually means you are calling ' +
        'transferPropsTo() on a component passed in as props or children.',
        this.constructor.displayName,
        descriptor.type.displayName
      ) : invariant(descriptor._owner === this));

      // Because descriptors are immutable we have to merge into the existing
      // props object rather than clone it.
      transferInto(descriptor.props, this.props);

      return descriptor;
    }

  }
};

module.exports = ReactPropTransferer;

}).call(this,require('_process'))
},{"./emptyFunction":104,"./invariant":122,"./joinClasses":127,"./merge":132,"_process":147}],69:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactPropTypeLocationNames
 */

"use strict";

var ReactPropTypeLocationNames = {};

if ("production" !== process.env.NODE_ENV) {
  ReactPropTypeLocationNames = {
    prop: 'prop',
    context: 'context',
    childContext: 'child context'
  };
}

module.exports = ReactPropTypeLocationNames;

}).call(this,require('_process'))
},{"_process":147}],70:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactPropTypeLocations
 */

"use strict";

var keyMirror = require("./keyMirror");

var ReactPropTypeLocations = keyMirror({
  prop: null,
  context: null,
  childContext: null
});

module.exports = ReactPropTypeLocations;

},{"./keyMirror":128}],71:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactPropTypes
 */

"use strict";

var ReactDescriptor = require("./ReactDescriptor");
var ReactPropTypeLocationNames = require("./ReactPropTypeLocationNames");

var emptyFunction = require("./emptyFunction");

/**
 * Collection of methods that allow declaration and validation of props that are
 * supplied to React components. Example usage:
 *
 *   var Props = require('ReactPropTypes');
 *   var MyArticle = React.createClass({
 *     propTypes: {
 *       // An optional string prop named "description".
 *       description: Props.string,
 *
 *       // A required enum prop named "category".
 *       category: Props.oneOf(['News','Photos']).isRequired,
 *
 *       // A prop named "dialog" that requires an instance of Dialog.
 *       dialog: Props.instanceOf(Dialog).isRequired
 *     },
 *     render: function() { ... }
 *   });
 *
 * A more formal specification of how these methods are used:
 *
 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
 *   decl := ReactPropTypes.{type}(.isRequired)?
 *
 * Each and every declaration produces a function with the same signature. This
 * allows the creation of custom validation functions. For example:
 *
 *  var MyLink = React.createClass({
 *    propTypes: {
 *      // An optional string or URI prop named "href".
 *      href: function(props, propName, componentName) {
 *        var propValue = props[propName];
 *        if (propValue != null && typeof propValue !== 'string' &&
 *            !(propValue instanceof URI)) {
 *          return new Error(
 *            'Expected a string or an URI for ' + propName + ' in ' +
 *            componentName
 *          );
 *        }
 *      }
 *    },
 *    render: function() {...}
 *  });
 *
 * @internal
 */

var ANONYMOUS = '<<anonymous>>';

var ReactPropTypes = {
  array: createPrimitiveTypeChecker('array'),
  bool: createPrimitiveTypeChecker('boolean'),
  func: createPrimitiveTypeChecker('function'),
  number: createPrimitiveTypeChecker('number'),
  object: createPrimitiveTypeChecker('object'),
  string: createPrimitiveTypeChecker('string'),

  any: createAnyTypeChecker(),
  arrayOf: createArrayOfTypeChecker,
  component: createComponentTypeChecker(),
  instanceOf: createInstanceTypeChecker,
  objectOf: createObjectOfTypeChecker,
  oneOf: createEnumTypeChecker,
  oneOfType: createUnionTypeChecker,
  renderable: createRenderableTypeChecker(),
  shape: createShapeTypeChecker
};

function createChainableTypeChecker(validate) {
  function checkType(isRequired, props, propName, componentName, location) {
    componentName = componentName || ANONYMOUS;
    if (props[propName] == null) {
      var locationName = ReactPropTypeLocationNames[location];
      if (isRequired) {
        return new Error(
          ("Required " + locationName + " `" + propName + "` was not specified in ")+
          ("`" + componentName + "`.")
        );
      }
    } else {
      return validate(props, propName, componentName, location);
    }
  }

  var chainedCheckType = checkType.bind(null, false);
  chainedCheckType.isRequired = checkType.bind(null, true);

  return chainedCheckType;
}

function createPrimitiveTypeChecker(expectedType) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== expectedType) {
      var locationName = ReactPropTypeLocationNames[location];
      // `propValue` being instance of, say, date/regexp, pass the 'object'
      // check, but we can offer a more precise error message here rather than
      // 'of type `object`'.
      var preciseType = getPreciseType(propValue);

      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of type `" + preciseType + "` ") +
        ("supplied to `" + componentName + "`, expected `" + expectedType + "`.")
      );
    }
  }
  return createChainableTypeChecker(validate);
}

function createAnyTypeChecker() {
  return createChainableTypeChecker(emptyFunction.thatReturns());
}

function createArrayOfTypeChecker(typeChecker) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    if (!Array.isArray(propValue)) {
      var locationName = ReactPropTypeLocationNames[location];
      var propType = getPropType(propValue);
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of type ") +
        ("`" + propType + "` supplied to `" + componentName + "`, expected an array.")
      );
    }
    for (var i = 0; i < propValue.length; i++) {
      var error = typeChecker(propValue, i, componentName, location);
      if (error instanceof Error) {
        return error;
      }
    }
  }
  return createChainableTypeChecker(validate);
}

function createComponentTypeChecker() {
  function validate(props, propName, componentName, location) {
    if (!ReactDescriptor.isValidDescriptor(props[propName])) {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
        ("`" + componentName + "`, expected a React component.")
      );
    }
  }
  return createChainableTypeChecker(validate);
}

function createInstanceTypeChecker(expectedClass) {
  function validate(props, propName, componentName, location) {
    if (!(props[propName] instanceof expectedClass)) {
      var locationName = ReactPropTypeLocationNames[location];
      var expectedClassName = expectedClass.name || ANONYMOUS;
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
        ("`" + componentName + "`, expected instance of `" + expectedClassName + "`.")
      );
    }
  }
  return createChainableTypeChecker(validate);
}

function createEnumTypeChecker(expectedValues) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    for (var i = 0; i < expectedValues.length; i++) {
      if (propValue === expectedValues[i]) {
        return;
      }
    }

    var locationName = ReactPropTypeLocationNames[location];
    var valuesString = JSON.stringify(expectedValues);
    return new Error(
      ("Invalid " + locationName + " `" + propName + "` of value `" + propValue + "` ") +
      ("supplied to `" + componentName + "`, expected one of " + valuesString + ".")
    );
  }
  return createChainableTypeChecker(validate);
}

function createObjectOfTypeChecker(typeChecker) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== 'object') {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of type ") +
        ("`" + propType + "` supplied to `" + componentName + "`, expected an object.")
      );
    }
    for (var key in propValue) {
      if (propValue.hasOwnProperty(key)) {
        var error = typeChecker(propValue, key, componentName, location);
        if (error instanceof Error) {
          return error;
        }
      }
    }
  }
  return createChainableTypeChecker(validate);
}

function createUnionTypeChecker(arrayOfTypeCheckers) {
  function validate(props, propName, componentName, location) {
    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (checker(props, propName, componentName, location) == null) {
        return;
      }
    }

    var locationName = ReactPropTypeLocationNames[location];
    return new Error(
      ("Invalid " + locationName + " `" + propName + "` supplied to ") +
      ("`" + componentName + "`.")
    );
  }
  return createChainableTypeChecker(validate);
}

function createRenderableTypeChecker() {
  function validate(props, propName, componentName, location) {
    if (!isRenderable(props[propName])) {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
        ("`" + componentName + "`, expected a renderable prop.")
      );
    }
  }
  return createChainableTypeChecker(validate);
}

function createShapeTypeChecker(shapeTypes) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== 'object') {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of type `" + propType + "` ") +
        ("supplied to `" + componentName + "`, expected `object`.")
      );
    }
    for (var key in shapeTypes) {
      var checker = shapeTypes[key];
      if (!checker) {
        continue;
      }
      var error = checker(propValue, key, componentName, location);
      if (error) {
        return error;
      }
    }
  }
  return createChainableTypeChecker(validate, 'expected `object`');
}

function isRenderable(propValue) {
  switch(typeof propValue) {
    // TODO: this was probably written with the assumption that we're not
    // returning `this.props.component` directly from `render`. This is
    // currently not supported but we should, to make it consistent.
    case 'number':
    case 'string':
      return true;
    case 'boolean':
      return !propValue;
    case 'object':
      if (Array.isArray(propValue)) {
        return propValue.every(isRenderable);
      }
      if (ReactDescriptor.isValidDescriptor(propValue)) {
        return true;
      }
      for (var k in propValue) {
        if (!isRenderable(propValue[k])) {
          return false;
        }
      }
      return true;
    default:
      return false;
  }
}

// Equivalent of `typeof` but with special handling for array and regexp.
function getPropType(propValue) {
  var propType = typeof propValue;
  if (Array.isArray(propValue)) {
    return 'array';
  }
  if (propValue instanceof RegExp) {
    // Old webkits (at least until Android 4.0) return 'function' rather than
    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
    // passes PropTypes.object.
    return 'object';
  }
  return propType;
}

// This handles more types than `getPropType`. Only used for error messages.
// See `createPrimitiveTypeChecker`.
function getPreciseType(propValue) {
  var propType = getPropType(propValue);
  if (propType === 'object') {
    if (propValue instanceof Date) {
      return 'date';
    } else if (propValue instanceof RegExp) {
      return 'regexp';
    }
  }
  return propType;
}

module.exports = ReactPropTypes;

},{"./ReactDescriptor":53,"./ReactPropTypeLocationNames":69,"./emptyFunction":104}],72:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactPutListenerQueue
 */

"use strict";

var PooledClass = require("./PooledClass");
var ReactBrowserEventEmitter = require("./ReactBrowserEventEmitter");

var mixInto = require("./mixInto");

function ReactPutListenerQueue() {
  this.listenersToPut = [];
}

mixInto(ReactPutListenerQueue, {
  enqueuePutListener: function(rootNodeID, propKey, propValue) {
    this.listenersToPut.push({
      rootNodeID: rootNodeID,
      propKey: propKey,
      propValue: propValue
    });
  },

  putListeners: function() {
    for (var i = 0; i < this.listenersToPut.length; i++) {
      var listenerToPut = this.listenersToPut[i];
      ReactBrowserEventEmitter.putListener(
        listenerToPut.rootNodeID,
        listenerToPut.propKey,
        listenerToPut.propValue
      );
    }
  },

  reset: function() {
    this.listenersToPut.length = 0;
  },

  destructor: function() {
    this.reset();
  }
});

PooledClass.addPoolingTo(ReactPutListenerQueue);

module.exports = ReactPutListenerQueue;

},{"./PooledClass":28,"./ReactBrowserEventEmitter":31,"./mixInto":135}],73:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactReconcileTransaction
 * @typechecks static-only
 */

"use strict";

var CallbackQueue = require("./CallbackQueue");
var PooledClass = require("./PooledClass");
var ReactBrowserEventEmitter = require("./ReactBrowserEventEmitter");
var ReactInputSelection = require("./ReactInputSelection");
var ReactPutListenerQueue = require("./ReactPutListenerQueue");
var Transaction = require("./Transaction");

var mixInto = require("./mixInto");

/**
 * Ensures that, when possible, the selection range (currently selected text
 * input) is not disturbed by performing the transaction.
 */
var SELECTION_RESTORATION = {
  /**
   * @return {Selection} Selection information.
   */
  initialize: ReactInputSelection.getSelectionInformation,
  /**
   * @param {Selection} sel Selection information returned from `initialize`.
   */
  close: ReactInputSelection.restoreSelection
};

/**
 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
 * high level DOM manipulations (like temporarily removing a text input from the
 * DOM).
 */
var EVENT_SUPPRESSION = {
  /**
   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
   * the reconciliation.
   */
  initialize: function() {
    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
    ReactBrowserEventEmitter.setEnabled(false);
    return currentlyEnabled;
  },

  /**
   * @param {boolean} previouslyEnabled Enabled status of
   *   `ReactBrowserEventEmitter` before the reconciliation occured. `close`
   *   restores the previous value.
   */
  close: function(previouslyEnabled) {
    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
  }
};

/**
 * Provides a queue for collecting `componentDidMount` and
 * `componentDidUpdate` callbacks during the the transaction.
 */
var ON_DOM_READY_QUEUEING = {
  /**
   * Initializes the internal `onDOMReady` queue.
   */
  initialize: function() {
    this.reactMountReady.reset();
  },

  /**
   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
   */
  close: function() {
    this.reactMountReady.notifyAll();
  }
};

var PUT_LISTENER_QUEUEING = {
  initialize: function() {
    this.putListenerQueue.reset();
  },

  close: function() {
    this.putListenerQueue.putListeners();
  }
};

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [
  PUT_LISTENER_QUEUEING,
  SELECTION_RESTORATION,
  EVENT_SUPPRESSION,
  ON_DOM_READY_QUEUEING
];

/**
 * Currently:
 * - The order that these are listed in the transaction is critical:
 * - Suppresses events.
 * - Restores selection range.
 *
 * Future:
 * - Restore document/overflow scroll positions that were unintentionally
 *   modified via DOM insertions above the top viewport boundary.
 * - Implement/integrate with customized constraint based layout system and keep
 *   track of which dimensions must be remeasured.
 *
 * @class ReactReconcileTransaction
 */
function ReactReconcileTransaction() {
  this.reinitializeTransaction();
  // Only server-side rendering really needs this option (see
  // `ReactServerRendering`), but server-side uses
  // `ReactServerRenderingTransaction` instead. This option is here so that it's
  // accessible and defaults to false when `ReactDOMComponent` and
  // `ReactTextComponent` checks it in `mountComponent`.`
  this.renderToStaticMarkup = false;
  this.reactMountReady = CallbackQueue.getPooled(null);
  this.putListenerQueue = ReactPutListenerQueue.getPooled();
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array<object>} List of operation wrap proceedures.
   *   TODO: convert to array<TransactionWrapper>
   */
  getTransactionWrappers: function() {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function() {
    return this.reactMountReady;
  },

  getPutListenerQueue: function() {
    return this.putListenerQueue;
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be resused.
   */
  destructor: function() {
    CallbackQueue.release(this.reactMountReady);
    this.reactMountReady = null;

    ReactPutListenerQueue.release(this.putListenerQueue);
    this.putListenerQueue = null;
  }
};


mixInto(ReactReconcileTransaction, Transaction.Mixin);
mixInto(ReactReconcileTransaction, Mixin);

PooledClass.addPoolingTo(ReactReconcileTransaction);

module.exports = ReactReconcileTransaction;

},{"./CallbackQueue":7,"./PooledClass":28,"./ReactBrowserEventEmitter":31,"./ReactInputSelection":60,"./ReactPutListenerQueue":72,"./Transaction":94,"./mixInto":135}],74:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactRootIndex
 * @typechecks
 */

"use strict";

var ReactRootIndexInjection = {
  /**
   * @param {function} _createReactRootIndex
   */
  injectCreateReactRootIndex: function(_createReactRootIndex) {
    ReactRootIndex.createReactRootIndex = _createReactRootIndex;
  }
};

var ReactRootIndex = {
  createReactRootIndex: null,
  injection: ReactRootIndexInjection
};

module.exports = ReactRootIndex;

},{}],75:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @typechecks static-only
 * @providesModule ReactServerRendering
 */
"use strict";

var ReactDescriptor = require("./ReactDescriptor");
var ReactInstanceHandles = require("./ReactInstanceHandles");
var ReactMarkupChecksum = require("./ReactMarkupChecksum");
var ReactServerRenderingTransaction =
  require("./ReactServerRenderingTransaction");

var instantiateReactComponent = require("./instantiateReactComponent");
var invariant = require("./invariant");

/**
 * @param {ReactComponent} component
 * @return {string} the HTML markup
 */
function renderComponentToString(component) {
  ("production" !== process.env.NODE_ENV ? invariant(
    ReactDescriptor.isValidDescriptor(component),
    'renderComponentToString(): You must pass a valid ReactComponent.'
  ) : invariant(ReactDescriptor.isValidDescriptor(component)));

  ("production" !== process.env.NODE_ENV ? invariant(
    !(arguments.length === 2 && typeof arguments[1] === 'function'),
    'renderComponentToString(): This function became synchronous and now ' +
    'returns the generated markup. Please remove the second parameter.'
  ) : invariant(!(arguments.length === 2 && typeof arguments[1] === 'function')));

  var transaction;
  try {
    var id = ReactInstanceHandles.createReactRootID();
    transaction = ReactServerRenderingTransaction.getPooled(false);

    return transaction.perform(function() {
      var componentInstance = instantiateReactComponent(component);
      var markup = componentInstance.mountComponent(id, transaction, 0);
      return ReactMarkupChecksum.addChecksumToMarkup(markup);
    }, null);
  } finally {
    ReactServerRenderingTransaction.release(transaction);
  }
}

/**
 * @param {ReactComponent} component
 * @return {string} the HTML markup, without the extra React ID and checksum
* (for generating static pages)
 */
function renderComponentToStaticMarkup(component) {
  ("production" !== process.env.NODE_ENV ? invariant(
    ReactDescriptor.isValidDescriptor(component),
    'renderComponentToStaticMarkup(): You must pass a valid ReactComponent.'
  ) : invariant(ReactDescriptor.isValidDescriptor(component)));

  var transaction;
  try {
    var id = ReactInstanceHandles.createReactRootID();
    transaction = ReactServerRenderingTransaction.getPooled(true);

    return transaction.perform(function() {
      var componentInstance = instantiateReactComponent(component);
      return componentInstance.mountComponent(id, transaction, 0);
    }, null);
  } finally {
    ReactServerRenderingTransaction.release(transaction);
  }
}

module.exports = {
  renderComponentToString: renderComponentToString,
  renderComponentToStaticMarkup: renderComponentToStaticMarkup
};

}).call(this,require('_process'))
},{"./ReactDescriptor":53,"./ReactInstanceHandles":61,"./ReactMarkupChecksum":62,"./ReactServerRenderingTransaction":76,"./instantiateReactComponent":121,"./invariant":122,"_process":147}],76:[function(require,module,exports){
/**
 * Copyright 2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactServerRenderingTransaction
 * @typechecks
 */

"use strict";

var PooledClass = require("./PooledClass");
var CallbackQueue = require("./CallbackQueue");
var ReactPutListenerQueue = require("./ReactPutListenerQueue");
var Transaction = require("./Transaction");

var emptyFunction = require("./emptyFunction");
var mixInto = require("./mixInto");

/**
 * Provides a `CallbackQueue` queue for collecting `onDOMReady` callbacks
 * during the performing of the transaction.
 */
var ON_DOM_READY_QUEUEING = {
  /**
   * Initializes the internal `onDOMReady` queue.
   */
  initialize: function() {
    this.reactMountReady.reset();
  },

  close: emptyFunction
};

var PUT_LISTENER_QUEUEING = {
  initialize: function() {
    this.putListenerQueue.reset();
  },

  close: emptyFunction
};

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [
  PUT_LISTENER_QUEUEING,
  ON_DOM_READY_QUEUEING
];

/**
 * @class ReactServerRenderingTransaction
 * @param {boolean} renderToStaticMarkup
 */
function ReactServerRenderingTransaction(renderToStaticMarkup) {
  this.reinitializeTransaction();
  this.renderToStaticMarkup = renderToStaticMarkup;
  this.reactMountReady = CallbackQueue.getPooled(null);
  this.putListenerQueue = ReactPutListenerQueue.getPooled();
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array} Empty list of operation wrap proceedures.
   */
  getTransactionWrappers: function() {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function() {
    return this.reactMountReady;
  },

  getPutListenerQueue: function() {
    return this.putListenerQueue;
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be resused.
   */
  destructor: function() {
    CallbackQueue.release(this.reactMountReady);
    this.reactMountReady = null;

    ReactPutListenerQueue.release(this.putListenerQueue);
    this.putListenerQueue = null;
  }
};


mixInto(ReactServerRenderingTransaction, Transaction.Mixin);
mixInto(ReactServerRenderingTransaction, Mixin);

PooledClass.addPoolingTo(ReactServerRenderingTransaction);

module.exports = ReactServerRenderingTransaction;

},{"./CallbackQueue":7,"./PooledClass":28,"./ReactPutListenerQueue":72,"./Transaction":94,"./emptyFunction":104,"./mixInto":135}],77:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactTextComponent
 * @typechecks static-only
 */

"use strict";

var DOMPropertyOperations = require("./DOMPropertyOperations");
var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");
var ReactComponent = require("./ReactComponent");
var ReactDescriptor = require("./ReactDescriptor");

var escapeTextForBrowser = require("./escapeTextForBrowser");
var mixInto = require("./mixInto");

/**
 * Text nodes violate a couple assumptions that React makes about components:
 *
 *  - When mounting text into the DOM, adjacent text nodes are merged.
 *  - Text nodes cannot be assigned a React root ID.
 *
 * This component is used to wrap strings in elements so that they can undergo
 * the same reconciliation that is applied to elements.
 *
 * TODO: Investigate representing React components in the DOM with text nodes.
 *
 * @class ReactTextComponent
 * @extends ReactComponent
 * @internal
 */
var ReactTextComponent = function(descriptor) {
  this.construct(descriptor);
};

mixInto(ReactTextComponent, ReactComponent.Mixin);
mixInto(ReactTextComponent, ReactBrowserComponentMixin);
mixInto(ReactTextComponent, {

  /**
   * Creates the markup for this text node. This node is not intended to have
   * any features besides containing text content.
   *
   * @param {string} rootID DOM ID of the root node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {number} mountDepth number of components in the owner hierarchy
   * @return {string} Markup for this text node.
   * @internal
   */
  mountComponent: function(rootID, transaction, mountDepth) {
    ReactComponent.Mixin.mountComponent.call(
      this,
      rootID,
      transaction,
      mountDepth
    );

    var escapedText = escapeTextForBrowser(this.props);

    if (transaction.renderToStaticMarkup) {
      // Normally we'd wrap this in a `span` for the reasons stated above, but
      // since this is a situation where React won't take over (static pages),
      // we can simply return the text as it is.
      return escapedText;
    }

    return (
      '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' +
        escapedText +
      '</span>'
    );
  },

  /**
   * Updates this component by updating the text content.
   *
   * @param {object} nextComponent Contains the next text content.
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  receiveComponent: function(nextComponent, transaction) {
    var nextProps = nextComponent.props;
    if (nextProps !== this.props) {
      this.props = nextProps;
      ReactComponent.BackendIDOperations.updateTextContentByID(
        this._rootNodeID,
        nextProps
      );
    }
  }

});

module.exports = ReactDescriptor.createFactory(ReactTextComponent);

},{"./DOMPropertyOperations":13,"./ReactBrowserComponentMixin":30,"./ReactComponent":33,"./ReactDescriptor":53,"./escapeTextForBrowser":106,"./mixInto":135}],78:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactUpdates
 */

"use strict";

var CallbackQueue = require("./CallbackQueue");
var PooledClass = require("./PooledClass");
var ReactCurrentOwner = require("./ReactCurrentOwner");
var ReactPerf = require("./ReactPerf");
var Transaction = require("./Transaction");

var invariant = require("./invariant");
var mixInto = require("./mixInto");
var warning = require("./warning");

var dirtyComponents = [];

var batchingStrategy = null;

function ensureInjected() {
  ("production" !== process.env.NODE_ENV ? invariant(
    ReactUpdates.ReactReconcileTransaction && batchingStrategy,
    'ReactUpdates: must inject a reconcile transaction class and batching ' +
    'strategy'
  ) : invariant(ReactUpdates.ReactReconcileTransaction && batchingStrategy));
}

var NESTED_UPDATES = {
  initialize: function() {
    this.dirtyComponentsLength = dirtyComponents.length;
  },
  close: function() {
    if (this.dirtyComponentsLength !== dirtyComponents.length) {
      // Additional updates were enqueued by componentDidUpdate handlers or
      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
      // these new updates so that if A's componentDidUpdate calls setState on
      // B, B will update before the callback A's updater provided when calling
      // setState.
      dirtyComponents.splice(0, this.dirtyComponentsLength);
      flushBatchedUpdates();
    } else {
      dirtyComponents.length = 0;
    }
  }
};

var UPDATE_QUEUEING = {
  initialize: function() {
    this.callbackQueue.reset();
  },
  close: function() {
    this.callbackQueue.notifyAll();
  }
};

var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

function ReactUpdatesFlushTransaction() {
  this.reinitializeTransaction();
  this.dirtyComponentsLength = null;
  this.callbackQueue = CallbackQueue.getPooled(null);
  this.reconcileTransaction =
    ReactUpdates.ReactReconcileTransaction.getPooled();
}

mixInto(ReactUpdatesFlushTransaction, Transaction.Mixin);
mixInto(ReactUpdatesFlushTransaction, {
  getTransactionWrappers: function() {
    return TRANSACTION_WRAPPERS;
  },

  destructor: function() {
    this.dirtyComponentsLength = null;
    CallbackQueue.release(this.callbackQueue);
    this.callbackQueue = null;
    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
    this.reconcileTransaction = null;
  },

  perform: function(method, scope, a) {
    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
    // with this transaction's wrappers around it.
    return Transaction.Mixin.perform.call(
      this,
      this.reconcileTransaction.perform,
      this.reconcileTransaction,
      method,
      scope,
      a
    );
  }
});

PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

function batchedUpdates(callback, a, b) {
  ensureInjected();
  batchingStrategy.batchedUpdates(callback, a, b);
}

/**
 * Array comparator for ReactComponents by owner depth
 *
 * @param {ReactComponent} c1 first component you're comparing
 * @param {ReactComponent} c2 second component you're comparing
 * @return {number} Return value usable by Array.prototype.sort().
 */
function mountDepthComparator(c1, c2) {
  return c1._mountDepth - c2._mountDepth;
}

function runBatchedUpdates(transaction) {
  var len = transaction.dirtyComponentsLength;
  ("production" !== process.env.NODE_ENV ? invariant(
    len === dirtyComponents.length,
    'Expected flush transaction\'s stored dirty-components length (%s) to ' +
    'match dirty-components array length (%s).',
    len,
    dirtyComponents.length
  ) : invariant(len === dirtyComponents.length));

  // Since reconciling a component higher in the owner hierarchy usually (not
  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
  // them before their children by sorting the array.
  dirtyComponents.sort(mountDepthComparator);

  for (var i = 0; i < len; i++) {
    // If a component is unmounted before pending changes apply, ignore them
    // TODO: Queue unmounts in the same list to avoid this happening at all
    var component = dirtyComponents[i];
    if (component.isMounted()) {
      // If performUpdateIfNecessary happens to enqueue any new updates, we
      // shouldn't execute the callbacks until the next render happens, so
      // stash the callbacks first
      var callbacks = component._pendingCallbacks;
      component._pendingCallbacks = null;
      component.performUpdateIfNecessary(transaction.reconcileTransaction);

      if (callbacks) {
        for (var j = 0; j < callbacks.length; j++) {
          transaction.callbackQueue.enqueue(
            callbacks[j],
            component
          );
        }
      }
    }
  }
}

var flushBatchedUpdates = ReactPerf.measure(
  'ReactUpdates',
  'flushBatchedUpdates',
  function() {
    // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
    // array and perform any updates enqueued by mount-ready handlers (i.e.,
    // componentDidUpdate) but we need to check here too in order to catch
    // updates enqueued by setState callbacks.
    while (dirtyComponents.length) {
      var transaction = ReactUpdatesFlushTransaction.getPooled();
      transaction.perform(runBatchedUpdates, null, transaction);
      ReactUpdatesFlushTransaction.release(transaction);
    }
  }
);

/**
 * Mark a component as needing a rerender, adding an optional callback to a
 * list of functions which will be executed once the rerender occurs.
 */
function enqueueUpdate(component, callback) {
  ("production" !== process.env.NODE_ENV ? invariant(
    !callback || typeof callback === "function",
    'enqueueUpdate(...): You called `setProps`, `replaceProps`, ' +
    '`setState`, `replaceState`, or `forceUpdate` with a callback that ' +
    'isn\'t callable.'
  ) : invariant(!callback || typeof callback === "function"));
  ensureInjected();

  // Various parts of our code (such as ReactCompositeComponent's
  // _renderValidatedComponent) assume that calls to render aren't nested;
  // verify that that's the case. (This is called by each top-level update
  // function, like setProps, setState, forceUpdate, etc.; creation and
  // destruction of top-level components is guarded in ReactMount.)
  ("production" !== process.env.NODE_ENV ? warning(
    ReactCurrentOwner.current == null,
    'enqueueUpdate(): Render methods should be a pure function of props ' +
    'and state; triggering nested component updates from render is not ' +
    'allowed. If necessary, trigger nested updates in ' +
    'componentDidUpdate.'
  ) : null);

  if (!batchingStrategy.isBatchingUpdates) {
    batchingStrategy.batchedUpdates(enqueueUpdate, component, callback);
    return;
  }

  dirtyComponents.push(component);

  if (callback) {
    if (component._pendingCallbacks) {
      component._pendingCallbacks.push(callback);
    } else {
      component._pendingCallbacks = [callback];
    }
  }
}

var ReactUpdatesInjection = {
  injectReconcileTransaction: function(ReconcileTransaction) {
    ("production" !== process.env.NODE_ENV ? invariant(
      ReconcileTransaction,
      'ReactUpdates: must provide a reconcile transaction class'
    ) : invariant(ReconcileTransaction));
    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
  },

  injectBatchingStrategy: function(_batchingStrategy) {
    ("production" !== process.env.NODE_ENV ? invariant(
      _batchingStrategy,
      'ReactUpdates: must provide a batching strategy'
    ) : invariant(_batchingStrategy));
    ("production" !== process.env.NODE_ENV ? invariant(
      typeof _batchingStrategy.batchedUpdates === 'function',
      'ReactUpdates: must provide a batchedUpdates() function'
    ) : invariant(typeof _batchingStrategy.batchedUpdates === 'function'));
    ("production" !== process.env.NODE_ENV ? invariant(
      typeof _batchingStrategy.isBatchingUpdates === 'boolean',
      'ReactUpdates: must provide an isBatchingUpdates boolean attribute'
    ) : invariant(typeof _batchingStrategy.isBatchingUpdates === 'boolean'));
    batchingStrategy = _batchingStrategy;
  }
};

var ReactUpdates = {
  /**
   * React references `ReactReconcileTransaction` using this property in order
   * to allow dependency injection.
   *
   * @internal
   */
  ReactReconcileTransaction: null,

  batchedUpdates: batchedUpdates,
  enqueueUpdate: enqueueUpdate,
  flushBatchedUpdates: flushBatchedUpdates,
  injection: ReactUpdatesInjection
};

module.exports = ReactUpdates;

}).call(this,require('_process'))
},{"./CallbackQueue":7,"./PooledClass":28,"./ReactCurrentOwner":37,"./ReactPerf":67,"./Transaction":94,"./invariant":122,"./mixInto":135,"./warning":145,"_process":147}],79:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule SVGDOMPropertyConfig
 */

/*jslint bitwise: true*/

"use strict";

var DOMProperty = require("./DOMProperty");

var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;

var SVGDOMPropertyConfig = {
  Properties: {
    cx: MUST_USE_ATTRIBUTE,
    cy: MUST_USE_ATTRIBUTE,
    d: MUST_USE_ATTRIBUTE,
    dx: MUST_USE_ATTRIBUTE,
    dy: MUST_USE_ATTRIBUTE,
    fill: MUST_USE_ATTRIBUTE,
    fillOpacity: MUST_USE_ATTRIBUTE,
    fontFamily: MUST_USE_ATTRIBUTE,
    fontSize: MUST_USE_ATTRIBUTE,
    fx: MUST_USE_ATTRIBUTE,
    fy: MUST_USE_ATTRIBUTE,
    gradientTransform: MUST_USE_ATTRIBUTE,
    gradientUnits: MUST_USE_ATTRIBUTE,
    markerEnd: MUST_USE_ATTRIBUTE,
    markerMid: MUST_USE_ATTRIBUTE,
    markerStart: MUST_USE_ATTRIBUTE,
    offset: MUST_USE_ATTRIBUTE,
    opacity: MUST_USE_ATTRIBUTE,
    patternContentUnits: MUST_USE_ATTRIBUTE,
    patternUnits: MUST_USE_ATTRIBUTE,
    points: MUST_USE_ATTRIBUTE,
    preserveAspectRatio: MUST_USE_ATTRIBUTE,
    r: MUST_USE_ATTRIBUTE,
    rx: MUST_USE_ATTRIBUTE,
    ry: MUST_USE_ATTRIBUTE,
    spreadMethod: MUST_USE_ATTRIBUTE,
    stopColor: MUST_USE_ATTRIBUTE,
    stopOpacity: MUST_USE_ATTRIBUTE,
    stroke: MUST_USE_ATTRIBUTE,
    strokeDasharray: MUST_USE_ATTRIBUTE,
    strokeLinecap: MUST_USE_ATTRIBUTE,
    strokeOpacity: MUST_USE_ATTRIBUTE,
    strokeWidth: MUST_USE_ATTRIBUTE,
    textAnchor: MUST_USE_ATTRIBUTE,
    transform: MUST_USE_ATTRIBUTE,
    version: MUST_USE_ATTRIBUTE,
    viewBox: MUST_USE_ATTRIBUTE,
    x1: MUST_USE_ATTRIBUTE,
    x2: MUST_USE_ATTRIBUTE,
    x: MUST_USE_ATTRIBUTE,
    y1: MUST_USE_ATTRIBUTE,
    y2: MUST_USE_ATTRIBUTE,
    y: MUST_USE_ATTRIBUTE
  },
  DOMAttributeNames: {
    fillOpacity: 'fill-opacity',
    fontFamily: 'font-family',
    fontSize: 'font-size',
    gradientTransform: 'gradientTransform',
    gradientUnits: 'gradientUnits',
    markerEnd: 'marker-end',
    markerMid: 'marker-mid',
    markerStart: 'marker-start',
    patternContentUnits: 'patternContentUnits',
    patternUnits: 'patternUnits',
    preserveAspectRatio: 'preserveAspectRatio',
    spreadMethod: 'spreadMethod',
    stopColor: 'stop-color',
    stopOpacity: 'stop-opacity',
    strokeDasharray: 'stroke-dasharray',
    strokeLinecap: 'stroke-linecap',
    strokeOpacity: 'stroke-opacity',
    strokeWidth: 'stroke-width',
    textAnchor: 'text-anchor',
    viewBox: 'viewBox'
  }
};

module.exports = SVGDOMPropertyConfig;

},{"./DOMProperty":12}],80:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule SelectEventPlugin
 */

"use strict";

var EventConstants = require("./EventConstants");
var EventPropagators = require("./EventPropagators");
var ReactInputSelection = require("./ReactInputSelection");
var SyntheticEvent = require("./SyntheticEvent");

var getActiveElement = require("./getActiveElement");
var isTextInputElement = require("./isTextInputElement");
var keyOf = require("./keyOf");
var shallowEqual = require("./shallowEqual");

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  select: {
    phasedRegistrationNames: {
      bubbled: keyOf({onSelect: null}),
      captured: keyOf({onSelectCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topContextMenu,
      topLevelTypes.topFocus,
      topLevelTypes.topKeyDown,
      topLevelTypes.topMouseDown,
      topLevelTypes.topMouseUp,
      topLevelTypes.topSelectionChange
    ]
  }
};

var activeElement = null;
var activeElementID = null;
var lastSelection = null;
var mouseDown = false;

/**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 *
 * @param {DOMElement} node
 * @param {object}
 */
function getSelection(node) {
  if ('selectionStart' in node &&
      ReactInputSelection.hasSelectionCapabilities(node)) {
    return {
      start: node.selectionStart,
      end: node.selectionEnd
    };
  } else if (document.selection) {
    var range = document.selection.createRange();
    return {
      parentElement: range.parentElement(),
      text: range.text,
      top: range.boundingTop,
      left: range.boundingLeft
    };
  } else {
    var selection = window.getSelection();
    return {
      anchorNode: selection.anchorNode,
      anchorOffset: selection.anchorOffset,
      focusNode: selection.focusNode,
      focusOffset: selection.focusOffset
    };
  }
}

/**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @return {?SyntheticEvent}
 */
function constructSelectEvent(nativeEvent) {
  // Ensure we have the right element, and that the user is not dragging a
  // selection (this matches native `select` event behavior). In HTML5, select
  // fires only on input and textarea thus if there's no focused element we
  // won't dispatch.
  if (mouseDown ||
      activeElement == null ||
      activeElement != getActiveElement()) {
    return;
  }

  // Only fire when selection has actually changed.
  var currentSelection = getSelection(activeElement);
  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
    lastSelection = currentSelection;

    var syntheticEvent = SyntheticEvent.getPooled(
      eventTypes.select,
      activeElementID,
      nativeEvent
    );

    syntheticEvent.type = 'select';
    syntheticEvent.target = activeElement;

    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

    return syntheticEvent;
  }
}

/**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */
var SelectEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {

    switch (topLevelType) {
      // Track the input node that has focus.
      case topLevelTypes.topFocus:
        if (isTextInputElement(topLevelTarget) ||
            topLevelTarget.contentEditable === 'true') {
          activeElement = topLevelTarget;
          activeElementID = topLevelTargetID;
          lastSelection = null;
        }
        break;
      case topLevelTypes.topBlur:
        activeElement = null;
        activeElementID = null;
        lastSelection = null;
        break;

      // Don't fire the event while the user is dragging. This matches the
      // semantics of the native select event.
      case topLevelTypes.topMouseDown:
        mouseDown = true;
        break;
      case topLevelTypes.topContextMenu:
      case topLevelTypes.topMouseUp:
        mouseDown = false;
        return constructSelectEvent(nativeEvent);

      // Chrome and IE fire non-standard event when selection is changed (and
      // sometimes when it hasn't).
      // Firefox doesn't support selectionchange, so check selection status
      // after each key entry. The selection changes after keydown and before
      // keyup, but we check on keydown as well in the case of holding down a
      // key, when multiple keydown events are fired but only one keyup is.
      case topLevelTypes.topSelectionChange:
      case topLevelTypes.topKeyDown:
      case topLevelTypes.topKeyUp:
        return constructSelectEvent(nativeEvent);
    }
  }
};

module.exports = SelectEventPlugin;

},{"./EventConstants":17,"./EventPropagators":22,"./ReactInputSelection":60,"./SyntheticEvent":86,"./getActiveElement":110,"./isTextInputElement":125,"./keyOf":129,"./shallowEqual":141}],81:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ServerReactRootIndex
 * @typechecks
 */

"use strict";

/**
 * Size of the reactRoot ID space. We generate random numbers for React root
 * IDs and if there's a collision the events and DOM update system will
 * get confused. In the future we need a way to generate GUIDs but for
 * now this will work on a smaller scale.
 */
var GLOBAL_MOUNT_POINT_MAX = Math.pow(2, 53);

var ServerReactRootIndex = {
  createReactRootIndex: function() {
    return Math.ceil(Math.random() * GLOBAL_MOUNT_POINT_MAX);
  }
};

module.exports = ServerReactRootIndex;

},{}],82:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule SimpleEventPlugin
 */

"use strict";

var EventConstants = require("./EventConstants");
var EventPluginUtils = require("./EventPluginUtils");
var EventPropagators = require("./EventPropagators");
var SyntheticClipboardEvent = require("./SyntheticClipboardEvent");
var SyntheticEvent = require("./SyntheticEvent");
var SyntheticFocusEvent = require("./SyntheticFocusEvent");
var SyntheticKeyboardEvent = require("./SyntheticKeyboardEvent");
var SyntheticMouseEvent = require("./SyntheticMouseEvent");
var SyntheticDragEvent = require("./SyntheticDragEvent");
var SyntheticTouchEvent = require("./SyntheticTouchEvent");
var SyntheticUIEvent = require("./SyntheticUIEvent");
var SyntheticWheelEvent = require("./SyntheticWheelEvent");

var invariant = require("./invariant");
var keyOf = require("./keyOf");

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  blur: {
    phasedRegistrationNames: {
      bubbled: keyOf({onBlur: true}),
      captured: keyOf({onBlurCapture: true})
    }
  },
  click: {
    phasedRegistrationNames: {
      bubbled: keyOf({onClick: true}),
      captured: keyOf({onClickCapture: true})
    }
  },
  contextMenu: {
    phasedRegistrationNames: {
      bubbled: keyOf({onContextMenu: true}),
      captured: keyOf({onContextMenuCapture: true})
    }
  },
  copy: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCopy: true}),
      captured: keyOf({onCopyCapture: true})
    }
  },
  cut: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCut: true}),
      captured: keyOf({onCutCapture: true})
    }
  },
  doubleClick: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDoubleClick: true}),
      captured: keyOf({onDoubleClickCapture: true})
    }
  },
  drag: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDrag: true}),
      captured: keyOf({onDragCapture: true})
    }
  },
  dragEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragEnd: true}),
      captured: keyOf({onDragEndCapture: true})
    }
  },
  dragEnter: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragEnter: true}),
      captured: keyOf({onDragEnterCapture: true})
    }
  },
  dragExit: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragExit: true}),
      captured: keyOf({onDragExitCapture: true})
    }
  },
  dragLeave: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragLeave: true}),
      captured: keyOf({onDragLeaveCapture: true})
    }
  },
  dragOver: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragOver: true}),
      captured: keyOf({onDragOverCapture: true})
    }
  },
  dragStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragStart: true}),
      captured: keyOf({onDragStartCapture: true})
    }
  },
  drop: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDrop: true}),
      captured: keyOf({onDropCapture: true})
    }
  },
  focus: {
    phasedRegistrationNames: {
      bubbled: keyOf({onFocus: true}),
      captured: keyOf({onFocusCapture: true})
    }
  },
  input: {
    phasedRegistrationNames: {
      bubbled: keyOf({onInput: true}),
      captured: keyOf({onInputCapture: true})
    }
  },
  keyDown: {
    phasedRegistrationNames: {
      bubbled: keyOf({onKeyDown: true}),
      captured: keyOf({onKeyDownCapture: true})
    }
  },
  keyPress: {
    phasedRegistrationNames: {
      bubbled: keyOf({onKeyPress: true}),
      captured: keyOf({onKeyPressCapture: true})
    }
  },
  keyUp: {
    phasedRegistrationNames: {
      bubbled: keyOf({onKeyUp: true}),
      captured: keyOf({onKeyUpCapture: true})
    }
  },
  load: {
    phasedRegistrationNames: {
      bubbled: keyOf({onLoad: true}),
      captured: keyOf({onLoadCapture: true})
    }
  },
  error: {
    phasedRegistrationNames: {
      bubbled: keyOf({onError: true}),
      captured: keyOf({onErrorCapture: true})
    }
  },
  // Note: We do not allow listening to mouseOver events. Instead, use the
  // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.
  mouseDown: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseDown: true}),
      captured: keyOf({onMouseDownCapture: true})
    }
  },
  mouseMove: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseMove: true}),
      captured: keyOf({onMouseMoveCapture: true})
    }
  },
  mouseOut: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseOut: true}),
      captured: keyOf({onMouseOutCapture: true})
    }
  },
  mouseOver: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseOver: true}),
      captured: keyOf({onMouseOverCapture: true})
    }
  },
  mouseUp: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseUp: true}),
      captured: keyOf({onMouseUpCapture: true})
    }
  },
  paste: {
    phasedRegistrationNames: {
      bubbled: keyOf({onPaste: true}),
      captured: keyOf({onPasteCapture: true})
    }
  },
  reset: {
    phasedRegistrationNames: {
      bubbled: keyOf({onReset: true}),
      captured: keyOf({onResetCapture: true})
    }
  },
  scroll: {
    phasedRegistrationNames: {
      bubbled: keyOf({onScroll: true}),
      captured: keyOf({onScrollCapture: true})
    }
  },
  submit: {
    phasedRegistrationNames: {
      bubbled: keyOf({onSubmit: true}),
      captured: keyOf({onSubmitCapture: true})
    }
  },
  touchCancel: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchCancel: true}),
      captured: keyOf({onTouchCancelCapture: true})
    }
  },
  touchEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchEnd: true}),
      captured: keyOf({onTouchEndCapture: true})
    }
  },
  touchMove: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchMove: true}),
      captured: keyOf({onTouchMoveCapture: true})
    }
  },
  touchStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchStart: true}),
      captured: keyOf({onTouchStartCapture: true})
    }
  },
  wheel: {
    phasedRegistrationNames: {
      bubbled: keyOf({onWheel: true}),
      captured: keyOf({onWheelCapture: true})
    }
  }
};

var topLevelEventsToDispatchConfig = {
  topBlur:        eventTypes.blur,
  topClick:       eventTypes.click,
  topContextMenu: eventTypes.contextMenu,
  topCopy:        eventTypes.copy,
  topCut:         eventTypes.cut,
  topDoubleClick: eventTypes.doubleClick,
  topDrag:        eventTypes.drag,
  topDragEnd:     eventTypes.dragEnd,
  topDragEnter:   eventTypes.dragEnter,
  topDragExit:    eventTypes.dragExit,
  topDragLeave:   eventTypes.dragLeave,
  topDragOver:    eventTypes.dragOver,
  topDragStart:   eventTypes.dragStart,
  topDrop:        eventTypes.drop,
  topError:       eventTypes.error,
  topFocus:       eventTypes.focus,
  topInput:       eventTypes.input,
  topKeyDown:     eventTypes.keyDown,
  topKeyPress:    eventTypes.keyPress,
  topKeyUp:       eventTypes.keyUp,
  topLoad:        eventTypes.load,
  topMouseDown:   eventTypes.mouseDown,
  topMouseMove:   eventTypes.mouseMove,
  topMouseOut:    eventTypes.mouseOut,
  topMouseOver:   eventTypes.mouseOver,
  topMouseUp:     eventTypes.mouseUp,
  topPaste:       eventTypes.paste,
  topReset:       eventTypes.reset,
  topScroll:      eventTypes.scroll,
  topSubmit:      eventTypes.submit,
  topTouchCancel: eventTypes.touchCancel,
  topTouchEnd:    eventTypes.touchEnd,
  topTouchMove:   eventTypes.touchMove,
  topTouchStart:  eventTypes.touchStart,
  topWheel:       eventTypes.wheel
};

for (var topLevelType in topLevelEventsToDispatchConfig) {
  topLevelEventsToDispatchConfig[topLevelType].dependencies = [topLevelType];
}

var SimpleEventPlugin = {

  eventTypes: eventTypes,

  /**
   * Same as the default implementation, except cancels the event when return
   * value is false.
   *
   * @param {object} Event to be dispatched.
   * @param {function} Application-level callback.
   * @param {string} domID DOM ID to pass to the callback.
   */
  executeDispatch: function(event, listener, domID) {
    var returnValue = EventPluginUtils.executeDispatch(event, listener, domID);
    if (returnValue === false) {
      event.stopPropagation();
      event.preventDefault();
    }
  },

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
    if (!dispatchConfig) {
      return null;
    }
    var EventConstructor;
    switch (topLevelType) {
      case topLevelTypes.topInput:
      case topLevelTypes.topLoad:
      case topLevelTypes.topError:
      case topLevelTypes.topReset:
      case topLevelTypes.topSubmit:
        // HTML Events
        // @see http://www.w3.org/TR/html5/index.html#events-0
        EventConstructor = SyntheticEvent;
        break;
      case topLevelTypes.topKeyPress:
        // FireFox creates a keypress event for function keys too. This removes
        // the unwanted keypress events.
        if (nativeEvent.charCode === 0) {
          return null;
        }
        /* falls through */
      case topLevelTypes.topKeyDown:
      case topLevelTypes.topKeyUp:
        EventConstructor = SyntheticKeyboardEvent;
        break;
      case topLevelTypes.topBlur:
      case topLevelTypes.topFocus:
        EventConstructor = SyntheticFocusEvent;
        break;
      case topLevelTypes.topClick:
        // Firefox creates a click event on right mouse clicks. This removes the
        // unwanted click events.
        if (nativeEvent.button === 2) {
          return null;
        }
        /* falls through */
      case topLevelTypes.topContextMenu:
      case topLevelTypes.topDoubleClick:
      case topLevelTypes.topMouseDown:
      case topLevelTypes.topMouseMove:
      case topLevelTypes.topMouseOut:
      case topLevelTypes.topMouseOver:
      case topLevelTypes.topMouseUp:
        EventConstructor = SyntheticMouseEvent;
        break;
      case topLevelTypes.topDrag:
      case topLevelTypes.topDragEnd:
      case topLevelTypes.topDragEnter:
      case topLevelTypes.topDragExit:
      case topLevelTypes.topDragLeave:
      case topLevelTypes.topDragOver:
      case topLevelTypes.topDragStart:
      case topLevelTypes.topDrop:
        EventConstructor = SyntheticDragEvent;
        break;
      case topLevelTypes.topTouchCancel:
      case topLevelTypes.topTouchEnd:
      case topLevelTypes.topTouchMove:
      case topLevelTypes.topTouchStart:
        EventConstructor = SyntheticTouchEvent;
        break;
      case topLevelTypes.topScroll:
        EventConstructor = SyntheticUIEvent;
        break;
      case topLevelTypes.topWheel:
        EventConstructor = SyntheticWheelEvent;
        break;
      case topLevelTypes.topCopy:
      case topLevelTypes.topCut:
      case topLevelTypes.topPaste:
        EventConstructor = SyntheticClipboardEvent;
        break;
    }
    ("production" !== process.env.NODE_ENV ? invariant(
      EventConstructor,
      'SimpleEventPlugin: Unhandled event type, `%s`.',
      topLevelType
    ) : invariant(EventConstructor));
    var event = EventConstructor.getPooled(
      dispatchConfig,
      topLevelTargetID,
      nativeEvent
    );
    EventPropagators.accumulateTwoPhaseDispatches(event);
    return event;
  }

};

module.exports = SimpleEventPlugin;

}).call(this,require('_process'))
},{"./EventConstants":17,"./EventPluginUtils":21,"./EventPropagators":22,"./SyntheticClipboardEvent":83,"./SyntheticDragEvent":85,"./SyntheticEvent":86,"./SyntheticFocusEvent":87,"./SyntheticKeyboardEvent":89,"./SyntheticMouseEvent":90,"./SyntheticTouchEvent":91,"./SyntheticUIEvent":92,"./SyntheticWheelEvent":93,"./invariant":122,"./keyOf":129,"_process":147}],83:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule SyntheticClipboardEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticEvent = require("./SyntheticEvent");

/**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */
var ClipboardEventInterface = {
  clipboardData: function(event) {
    return (
      'clipboardData' in event ?
        event.clipboardData :
        window.clipboardData
    );
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

module.exports = SyntheticClipboardEvent;


},{"./SyntheticEvent":86}],84:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule SyntheticCompositionEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticEvent = require("./SyntheticEvent");

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */
var CompositionEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticCompositionEvent(
  dispatchConfig,
  dispatchMarker,
  nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(
  SyntheticCompositionEvent,
  CompositionEventInterface
);

module.exports = SyntheticCompositionEvent;


},{"./SyntheticEvent":86}],85:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule SyntheticDragEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticMouseEvent = require("./SyntheticMouseEvent");

/**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var DragEventInterface = {
  dataTransfer: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

module.exports = SyntheticDragEvent;

},{"./SyntheticMouseEvent":90}],86:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule SyntheticEvent
 * @typechecks static-only
 */

"use strict";

var PooledClass = require("./PooledClass");

var emptyFunction = require("./emptyFunction");
var getEventTarget = require("./getEventTarget");
var merge = require("./merge");
var mergeInto = require("./mergeInto");

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var EventInterface = {
  type: null,
  target: getEventTarget,
  // currentTarget is set when dispatching; no use in copying it here
  currentTarget: emptyFunction.thatReturnsNull,
  eventPhase: null,
  bubbles: null,
  cancelable: null,
  timeStamp: function(event) {
    return event.timeStamp || Date.now();
  },
  defaultPrevented: null,
  isTrusted: null
};

/**
 * Synthetic events are dispatched by event plugins, typically in response to a
 * top-level event delegation handler.
 *
 * These systems should generally use pooling to reduce the frequency of garbage
 * collection. The system should check `isPersistent` to determine whether the
 * event should be released into the pool after being dispatched. Users that
 * need a persisted event should invoke `persist`.
 *
 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
 * normalizing browser quirks. Subclasses do not necessarily have to implement a
 * DOM interface; custom application-specific events can also subclass this.
 *
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 */
function SyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  this.dispatchConfig = dispatchConfig;
  this.dispatchMarker = dispatchMarker;
  this.nativeEvent = nativeEvent;

  var Interface = this.constructor.Interface;
  for (var propName in Interface) {
    if (!Interface.hasOwnProperty(propName)) {
      continue;
    }
    var normalize = Interface[propName];
    if (normalize) {
      this[propName] = normalize(nativeEvent);
    } else {
      this[propName] = nativeEvent[propName];
    }
  }

  var defaultPrevented = nativeEvent.defaultPrevented != null ?
    nativeEvent.defaultPrevented :
    nativeEvent.returnValue === false;
  if (defaultPrevented) {
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  } else {
    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
  }
  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
}

mergeInto(SyntheticEvent.prototype, {

  preventDefault: function() {
    this.defaultPrevented = true;
    var event = this.nativeEvent;
    event.preventDefault ? event.preventDefault() : event.returnValue = false;
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  },

  stopPropagation: function() {
    var event = this.nativeEvent;
    event.stopPropagation ? event.stopPropagation() : event.cancelBubble = true;
    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
  },

  /**
   * We release all dispatched `SyntheticEvent`s after each event loop, adding
   * them back into the pool. This allows a way to hold onto a reference that
   * won't be added back into the pool.
   */
  persist: function() {
    this.isPersistent = emptyFunction.thatReturnsTrue;
  },

  /**
   * Checks if this event should be released back into the pool.
   *
   * @return {boolean} True if this should not be released, false otherwise.
   */
  isPersistent: emptyFunction.thatReturnsFalse,

  /**
   * `PooledClass` looks for `destructor` on each instance it releases.
   */
  destructor: function() {
    var Interface = this.constructor.Interface;
    for (var propName in Interface) {
      this[propName] = null;
    }
    this.dispatchConfig = null;
    this.dispatchMarker = null;
    this.nativeEvent = null;
  }

});

SyntheticEvent.Interface = EventInterface;

/**
 * Helper to reduce boilerplate when creating subclasses.
 *
 * @param {function} Class
 * @param {?object} Interface
 */
SyntheticEvent.augmentClass = function(Class, Interface) {
  var Super = this;

  var prototype = Object.create(Super.prototype);
  mergeInto(prototype, Class.prototype);
  Class.prototype = prototype;
  Class.prototype.constructor = Class;

  Class.Interface = merge(Super.Interface, Interface);
  Class.augmentClass = Super.augmentClass;

  PooledClass.addPoolingTo(Class, PooledClass.threeArgumentPooler);
};

PooledClass.addPoolingTo(SyntheticEvent, PooledClass.threeArgumentPooler);

module.exports = SyntheticEvent;

},{"./PooledClass":28,"./emptyFunction":104,"./getEventTarget":113,"./merge":132,"./mergeInto":134}],87:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule SyntheticFocusEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticUIEvent = require("./SyntheticUIEvent");

/**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var FocusEventInterface = {
  relatedTarget: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

module.exports = SyntheticFocusEvent;

},{"./SyntheticUIEvent":92}],88:[function(require,module,exports){
/**
 * Copyright 2013 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule SyntheticInputEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticEvent = require("./SyntheticEvent");

/**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */
var InputEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticInputEvent(
  dispatchConfig,
  dispatchMarker,
  nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(
  SyntheticInputEvent,
  InputEventInterface
);

module.exports = SyntheticInputEvent;


},{"./SyntheticEvent":86}],89:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule SyntheticKeyboardEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticUIEvent = require("./SyntheticUIEvent");

var getEventKey = require("./getEventKey");
var getEventModifierState = require("./getEventModifierState");

/**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var KeyboardEventInterface = {
  key: getEventKey,
  location: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  repeat: null,
  locale: null,
  getModifierState: getEventModifierState,
  // Legacy Interface
  charCode: function(event) {
    // `charCode` is the result of a KeyPress event and represents the value of
    // the actual printable character.

    // KeyPress is deprecated but its replacement is not yet final and not
    // implemented in any major browser.
    if (event.type === 'keypress') {
      // IE8 does not implement "charCode", but "keyCode" has the correct value.
      return 'charCode' in event ? event.charCode : event.keyCode;
    }
    return 0;
  },
  keyCode: function(event) {
    // `keyCode` is the result of a KeyDown/Up event and represents the value of
    // physical keyboard key.

    // The actual meaning of the value depends on the users' keyboard layout
    // which cannot be detected. Assuming that it is a US keyboard layout
    // provides a surprisingly accurate mapping for US and European users.
    // Due to this, it is left to the user to implement at this time.
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  },
  which: function(event) {
    // `which` is an alias for either `keyCode` or `charCode` depending on the
    // type of the event. There is no need to determine the type of the event
    // as `keyCode` and `charCode` are either aliased or default to zero.
    return event.keyCode || event.charCode;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

module.exports = SyntheticKeyboardEvent;

},{"./SyntheticUIEvent":92,"./getEventKey":111,"./getEventModifierState":112}],90:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule SyntheticMouseEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticUIEvent = require("./SyntheticUIEvent");
var ViewportMetrics = require("./ViewportMetrics");

var getEventModifierState = require("./getEventModifierState");

/**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var MouseEventInterface = {
  screenX: null,
  screenY: null,
  clientX: null,
  clientY: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  getModifierState: getEventModifierState,
  button: function(event) {
    // Webkit, Firefox, IE9+
    // which:  1 2 3
    // button: 0 1 2 (standard)
    var button = event.button;
    if ('which' in event) {
      return button;
    }
    // IE<9
    // which:  undefined
    // button: 0 0 0
    // button: 1 4 2 (onmouseup)
    return button === 2 ? 2 : button === 4 ? 1 : 0;
  },
  buttons: null,
  relatedTarget: function(event) {
    return event.relatedTarget || (
      event.fromElement === event.srcElement ?
        event.toElement :
        event.fromElement
    );
  },
  // "Proprietary" Interface.
  pageX: function(event) {
    return 'pageX' in event ?
      event.pageX :
      event.clientX + ViewportMetrics.currentScrollLeft;
  },
  pageY: function(event) {
    return 'pageY' in event ?
      event.pageY :
      event.clientY + ViewportMetrics.currentScrollTop;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

module.exports = SyntheticMouseEvent;

},{"./SyntheticUIEvent":92,"./ViewportMetrics":95,"./getEventModifierState":112}],91:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule SyntheticTouchEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticUIEvent = require("./SyntheticUIEvent");

var getEventModifierState = require("./getEventModifierState");

/**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */
var TouchEventInterface = {
  touches: null,
  targetTouches: null,
  changedTouches: null,
  altKey: null,
  metaKey: null,
  ctrlKey: null,
  shiftKey: null,
  getModifierState: getEventModifierState
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

module.exports = SyntheticTouchEvent;

},{"./SyntheticUIEvent":92,"./getEventModifierState":112}],92:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule SyntheticUIEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticEvent = require("./SyntheticEvent");

var getEventTarget = require("./getEventTarget");

/**
 * @interface UIEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var UIEventInterface = {
  view: function(event) {
    if (event.view) {
      return event.view;
    }

    var target = getEventTarget(event);
    if (target != null && target.window === target) {
      // target is a window object
      return target;
    }

    var doc = target.ownerDocument;
    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
    if (doc) {
      return doc.defaultView || doc.parentWindow;
    } else {
      return window;
    }
  },
  detail: function(event) {
    return event.detail || 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

module.exports = SyntheticUIEvent;

},{"./SyntheticEvent":86,"./getEventTarget":113}],93:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule SyntheticWheelEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticMouseEvent = require("./SyntheticMouseEvent");

/**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var WheelEventInterface = {
  deltaX: function(event) {
    return (
      'deltaX' in event ? event.deltaX :
      // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
      'wheelDeltaX' in event ? -event.wheelDeltaX : 0
    );
  },
  deltaY: function(event) {
    return (
      'deltaY' in event ? event.deltaY :
      // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
      'wheelDeltaY' in event ? -event.wheelDeltaY :
      // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
      'wheelDelta' in event ? -event.wheelDelta : 0
    );
  },
  deltaZ: null,

  // Browsers without "deltaMode" is reporting in raw wheel delta where one
  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
  deltaMode: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticMouseEvent}
 */
function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

module.exports = SyntheticWheelEvent;

},{"./SyntheticMouseEvent":90}],94:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule Transaction
 */

"use strict";

var invariant = require("./invariant");

/**
 * `Transaction` creates a black box that is able to wrap any method such that
 * certain invariants are maintained before and after the method is invoked
 * (Even if an exception is thrown while invoking the wrapped method). Whoever
 * instantiates a transaction can provide enforcers of the invariants at
 * creation time. The `Transaction` class itself will supply one additional
 * automatic invariant for you - the invariant that any transaction instance
 * should not be run while it is already being run. You would typically create a
 * single instance of a `Transaction` for reuse multiple times, that potentially
 * is used to wrap several different methods. Wrappers are extremely simple -
 * they only require implementing two methods.
 *
 * <pre>
 *                       wrappers (injected at creation time)
 *                                      +        +
 *                                      |        |
 *                    +-----------------|--------|--------------+
 *                    |                 v        |              |
 *                    |      +---------------+   |              |
 *                    |   +--|    wrapper1   |---|----+         |
 *                    |   |  +---------------+   v    |         |
 *                    |   |          +-------------+  |         |
 *                    |   |     +----|   wrapper2  |--------+   |
 *                    |   |     |    +-------------+  |     |   |
 *                    |   |     |                     |     |   |
 *                    |   v     v                     v     v   | wrapper
 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | +---+ +---+   +---------+   +---+ +---+ |
 *                    |  initialize                    close    |
 *                    +-----------------------------------------+
 * </pre>
 *
 * Use cases:
 * - Preserving the input selection ranges before/after reconciliation.
 *   Restoring selection even in the event of an unexpected error.
 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
 *   while guaranteeing that afterwards, the event system is reactivated.
 * - Flushing a queue of collected DOM mutations to the main UI thread after a
 *   reconciliation takes place in a worker thread.
 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
 *   content.
 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
 * - (Future use case): Layout calculations before and after DOM upates.
 *
 * Transactional plugin API:
 * - A module that has an `initialize` method that returns any precomputation.
 * - and a `close` method that accepts the precomputation. `close` is invoked
 *   when the wrapped process is completed, or has failed.
 *
 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
 * that implement `initialize` and `close`.
 * @return {Transaction} Single transaction for reuse in thread.
 *
 * @class Transaction
 */
var Mixin = {
  /**
   * Sets up this instance so that it is prepared for collecting metrics. Does
   * so such that this setup method may be used on an instance that is already
   * initialized, in a way that does not consume additional memory upon reuse.
   * That can be useful if you decide to make your subclass of this mixin a
   * "PooledClass".
   */
  reinitializeTransaction: function() {
    this.transactionWrappers = this.getTransactionWrappers();
    if (!this.wrapperInitData) {
      this.wrapperInitData = [];
    } else {
      this.wrapperInitData.length = 0;
    }
    this._isInTransaction = false;
  },

  _isInTransaction: false,

  /**
   * @abstract
   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
   */
  getTransactionWrappers: null,

  isInTransaction: function() {
    return !!this._isInTransaction;
  },

  /**
   * Executes the function within a safety window. Use this for the top level
   * methods that result in large amounts of computation/mutations that would
   * need to be safety checked.
   *
   * @param {function} method Member of scope to call.
   * @param {Object} scope Scope to invoke from.
   * @param {Object?=} args... Arguments to pass to the method (optional).
   *                           Helps prevent need to bind in many cases.
   * @return Return value from `method`.
   */
  perform: function(method, scope, a, b, c, d, e, f) {
    ("production" !== process.env.NODE_ENV ? invariant(
      !this.isInTransaction(),
      'Transaction.perform(...): Cannot initialize a transaction when there ' +
      'is already an outstanding transaction.'
    ) : invariant(!this.isInTransaction()));
    var errorThrown;
    var ret;
    try {
      this._isInTransaction = true;
      // Catching errors makes debugging more difficult, so we start with
      // errorThrown set to true before setting it to false after calling
      // close -- if it's still set to true in the finally block, it means
      // one of these calls threw.
      errorThrown = true;
      this.initializeAll(0);
      ret = method.call(scope, a, b, c, d, e, f);
      errorThrown = false;
    } finally {
      try {
        if (errorThrown) {
          // If `method` throws, prefer to show that stack trace over any thrown
          // by invoking `closeAll`.
          try {
            this.closeAll(0);
          } catch (err) {
          }
        } else {
          // Since `method` didn't throw, we don't want to silence the exception
          // here.
          this.closeAll(0);
        }
      } finally {
        this._isInTransaction = false;
      }
    }
    return ret;
  },

  initializeAll: function(startIndex) {
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      try {
        // Catching errors makes debugging more difficult, so we start with the
        // OBSERVED_ERROR state before overwriting it with the real return value
        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
        // block, it means wrapper.initialize threw.
        this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;
        this.wrapperInitData[i] = wrapper.initialize ?
          wrapper.initialize.call(this) :
          null;
      } finally {
        if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {
          // The initializer for wrapper i threw an error; initialize the
          // remaining wrappers but silence any exceptions from them to ensure
          // that the first error is the one to bubble up.
          try {
            this.initializeAll(i + 1);
          } catch (err) {
          }
        }
      }
    }
  },

  /**
   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
   * them the respective return values of `this.transactionWrappers.init[i]`
   * (`close`rs that correspond to initializers that failed will not be
   * invoked).
   */
  closeAll: function(startIndex) {
    ("production" !== process.env.NODE_ENV ? invariant(
      this.isInTransaction(),
      'Transaction.closeAll(): Cannot close transaction when none are open.'
    ) : invariant(this.isInTransaction()));
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      var initData = this.wrapperInitData[i];
      var errorThrown;
      try {
        // Catching errors makes debugging more difficult, so we start with
        // errorThrown set to true before setting it to false after calling
        // close -- if it's still set to true in the finally block, it means
        // wrapper.close threw.
        errorThrown = true;
        if (initData !== Transaction.OBSERVED_ERROR) {
          wrapper.close && wrapper.close.call(this, initData);
        }
        errorThrown = false;
      } finally {
        if (errorThrown) {
          // The closer for wrapper i threw an error; close the remaining
          // wrappers but silence any exceptions from them to ensure that the
          // first error is the one to bubble up.
          try {
            this.closeAll(i + 1);
          } catch (e) {
          }
        }
      }
    }
    this.wrapperInitData.length = 0;
  }
};

var Transaction = {

  Mixin: Mixin,

  /**
   * Token to look for to determine if an error occured.
   */
  OBSERVED_ERROR: {}

};

module.exports = Transaction;

}).call(this,require('_process'))
},{"./invariant":122,"_process":147}],95:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ViewportMetrics
 */

"use strict";

var getUnboundedScrollPosition = require("./getUnboundedScrollPosition");

var ViewportMetrics = {

  currentScrollLeft: 0,

  currentScrollTop: 0,

  refreshScrollValues: function() {
    var scrollPosition = getUnboundedScrollPosition(window);
    ViewportMetrics.currentScrollLeft = scrollPosition.x;
    ViewportMetrics.currentScrollTop = scrollPosition.y;
  }

};

module.exports = ViewportMetrics;

},{"./getUnboundedScrollPosition":118}],96:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule accumulate
 */

"use strict";

var invariant = require("./invariant");

/**
 * Accumulates items that must not be null or undefined.
 *
 * This is used to conserve memory by avoiding array allocations.
 *
 * @return {*|array<*>} An accumulation of items.
 */
function accumulate(current, next) {
  ("production" !== process.env.NODE_ENV ? invariant(
    next != null,
    'accumulate(...): Accumulated items must be not be null or undefined.'
  ) : invariant(next != null));
  if (current == null) {
    return next;
  } else {
    // Both are not empty. Warning: Never call x.concat(y) when you are not
    // certain that x is an Array (x could be a string with concat method).
    var currentIsArray = Array.isArray(current);
    var nextIsArray = Array.isArray(next);
    if (currentIsArray) {
      return current.concat(next);
    } else {
      if (nextIsArray) {
        return [current].concat(next);
      } else {
        return [current, next];
      }
    }
  }
}

module.exports = accumulate;

}).call(this,require('_process'))
},{"./invariant":122,"_process":147}],97:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule adler32
 */

/* jslint bitwise:true */

"use strict";

var MOD = 65521;

// This is a clean-room implementation of adler32 designed for detecting
// if markup is not what we expect it to be. It does not need to be
// cryptographically strong, only reasonable good at detecting if markup
// generated on the server is different than that on the client.
function adler32(data) {
  var a = 1;
  var b = 0;
  for (var i = 0; i < data.length; i++) {
    a = (a + data.charCodeAt(i)) % MOD;
    b = (b + a) % MOD;
  }
  return a | (b << 16);
}

module.exports = adler32;

},{}],98:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule containsNode
 * @typechecks
 */

var isTextNode = require("./isTextNode");

/*jslint bitwise:true */

/**
 * Checks if a given DOM node contains or is another DOM node.
 *
 * @param {?DOMNode} outerNode Outer DOM node.
 * @param {?DOMNode} innerNode Inner DOM node.
 * @return {boolean} True if `outerNode` contains or is `innerNode`.
 */
function containsNode(outerNode, innerNode) {
  if (!outerNode || !innerNode) {
    return false;
  } else if (outerNode === innerNode) {
    return true;
  } else if (isTextNode(outerNode)) {
    return false;
  } else if (isTextNode(innerNode)) {
    return containsNode(outerNode, innerNode.parentNode);
  } else if (outerNode.contains) {
    return outerNode.contains(innerNode);
  } else if (outerNode.compareDocumentPosition) {
    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
  } else {
    return false;
  }
}

module.exports = containsNode;

},{"./isTextNode":126}],99:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule copyProperties
 */

/**
 * Copy properties from one or more objects (up to 5) into the first object.
 * This is a shallow copy. It mutates the first object and also returns it.
 *
 * NOTE: `arguments` has a very significant performance penalty, which is why
 * we don't support unlimited arguments.
 */
function copyProperties(obj, a, b, c, d, e, f) {
  obj = obj || {};

  if ("production" !== process.env.NODE_ENV) {
    if (f) {
      throw new Error('Too many arguments passed to copyProperties');
    }
  }

  var args = [a, b, c, d, e];
  var ii = 0, v;
  while (args[ii]) {
    v = args[ii++];
    for (var k in v) {
      obj[k] = v[k];
    }

    // IE ignores toString in object iteration.. See:
    // webreflection.blogspot.com/2007/07/quick-fix-internet-explorer-and.html
    if (v.hasOwnProperty && v.hasOwnProperty('toString') &&
        (typeof v.toString != 'undefined') && (obj.toString !== v.toString)) {
      obj.toString = v.toString;
    }
  }

  return obj;
}

module.exports = copyProperties;

}).call(this,require('_process'))
},{"_process":147}],100:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule createArrayFrom
 * @typechecks
 */

var toArray = require("./toArray");

/**
 * Perform a heuristic test to determine if an object is "array-like".
 *
 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
 *   Joshu replied: "Mu."
 *
 * This function determines if its argument has "array nature": it returns
 * true if the argument is an actual array, an `arguments' object, or an
 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
 *
 * It will return false for other array-like objects like Filelist.
 *
 * @param {*} obj
 * @return {boolean}
 */
function hasArrayNature(obj) {
  return (
    // not null/false
    !!obj &&
    // arrays are objects, NodeLists are functions in Safari
    (typeof obj == 'object' || typeof obj == 'function') &&
    // quacks like an array
    ('length' in obj) &&
    // not window
    !('setInterval' in obj) &&
    // no DOM node should be considered an array-like
    // a 'select' element has 'length' and 'item' properties on IE8
    (typeof obj.nodeType != 'number') &&
    (
      // a real array
      (// HTMLCollection/NodeList
      (Array.isArray(obj) ||
      // arguments
      ('callee' in obj) || 'item' in obj))
    )
  );
}

/**
 * Ensure that the argument is an array by wrapping it in an array if it is not.
 * Creates a copy of the argument if it is already an array.
 *
 * This is mostly useful idiomatically:
 *
 *   var createArrayFrom = require('createArrayFrom');
 *
 *   function takesOneOrMoreThings(things) {
 *     things = createArrayFrom(things);
 *     ...
 *   }
 *
 * This allows you to treat `things' as an array, but accept scalars in the API.
 *
 * If you need to convert an array-like object, like `arguments`, into an array
 * use toArray instead.
 *
 * @param {*} obj
 * @return {array}
 */
function createArrayFrom(obj) {
  if (!hasArrayNature(obj)) {
    return [obj];
  } else if (Array.isArray(obj)) {
    return obj.slice();
  } else {
    return toArray(obj);
  }
}

module.exports = createArrayFrom;

},{"./toArray":143}],101:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule createFullPageComponent
 * @typechecks
 */

"use strict";

// Defeat circular references by requiring this directly.
var ReactCompositeComponent = require("./ReactCompositeComponent");

var invariant = require("./invariant");

/**
 * Create a component that will throw an exception when unmounted.
 *
 * Components like <html> <head> and <body> can't be removed or added
 * easily in a cross-browser way, however it's valuable to be able to
 * take advantage of React's reconciliation for styling and <title>
 * management. So we just document it and throw in dangerous cases.
 *
 * @param {function} componentClass convenience constructor to wrap
 * @return {function} convenience constructor of new component
 */
function createFullPageComponent(componentClass) {
  var FullPageComponent = ReactCompositeComponent.createClass({
    displayName: 'ReactFullPageComponent' + (
      componentClass.type.displayName || ''
    ),

    componentWillUnmount: function() {
      ("production" !== process.env.NODE_ENV ? invariant(
        false,
        '%s tried to unmount. Because of cross-browser quirks it is ' +
        'impossible to unmount some top-level components (eg <html>, <head>, ' +
        'and <body>) reliably and efficiently. To fix this, have a single ' +
        'top-level component that never unmounts render these elements.',
        this.constructor.displayName
      ) : invariant(false));
    },

    render: function() {
      return this.transferPropsTo(componentClass(null, this.props.children));
    }
  });

  return FullPageComponent;
}

module.exports = createFullPageComponent;

}).call(this,require('_process'))
},{"./ReactCompositeComponent":35,"./invariant":122,"_process":147}],102:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule createNodesFromMarkup
 * @typechecks
 */

/*jslint evil: true, sub: true */

var ExecutionEnvironment = require("./ExecutionEnvironment");

var createArrayFrom = require("./createArrayFrom");
var getMarkupWrap = require("./getMarkupWrap");
var invariant = require("./invariant");

/**
 * Dummy container used to render all markup.
 */
var dummyNode =
  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Pattern used by `getNodeName`.
 */
var nodeNamePattern = /^\s*<(\w+)/;

/**
 * Extracts the `nodeName` of the first element in a string of markup.
 *
 * @param {string} markup String of markup.
 * @return {?string} Node name of the supplied markup.
 */
function getNodeName(markup) {
  var nodeNameMatch = markup.match(nodeNamePattern);
  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
}

/**
 * Creates an array containing the nodes rendered from the supplied markup. The
 * optionally supplied `handleScript` function will be invoked once for each
 * <script> element that is rendered. If no `handleScript` function is supplied,
 * an exception is thrown if any <script> elements are rendered.
 *
 * @param {string} markup A string of valid HTML markup.
 * @param {?function} handleScript Invoked once for each rendered <script>.
 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
 */
function createNodesFromMarkup(markup, handleScript) {
  var node = dummyNode;
  ("production" !== process.env.NODE_ENV ? invariant(!!dummyNode, 'createNodesFromMarkup dummy not initialized') : invariant(!!dummyNode));
  var nodeName = getNodeName(markup);

  var wrap = nodeName && getMarkupWrap(nodeName);
  if (wrap) {
    node.innerHTML = wrap[1] + markup + wrap[2];

    var wrapDepth = wrap[0];
    while (wrapDepth--) {
      node = node.lastChild;
    }
  } else {
    node.innerHTML = markup;
  }

  var scripts = node.getElementsByTagName('script');
  if (scripts.length) {
    ("production" !== process.env.NODE_ENV ? invariant(
      handleScript,
      'createNodesFromMarkup(...): Unexpected <script> element rendered.'
    ) : invariant(handleScript));
    createArrayFrom(scripts).forEach(handleScript);
  }

  var nodes = createArrayFrom(node.childNodes);
  while (node.lastChild) {
    node.removeChild(node.lastChild);
  }
  return nodes;
}

module.exports = createNodesFromMarkup;

}).call(this,require('_process'))
},{"./ExecutionEnvironment":23,"./createArrayFrom":100,"./getMarkupWrap":114,"./invariant":122,"_process":147}],103:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule dangerousStyleValue
 * @typechecks static-only
 */

"use strict";

var CSSProperty = require("./CSSProperty");

var isUnitlessNumber = CSSProperty.isUnitlessNumber;

/**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @return {string} Normalized style value with dimensions applied.
 */
function dangerousStyleValue(name, value) {
  // Note that we've removed escapeTextForBrowser() calls here since the
  // whole string will be escaped when the attribute is injected into
  // the markup. If you provide unsafe user data here they can inject
  // arbitrary CSS which may be problematic (I couldn't repro this):
  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
  // This is not an XSS hole but instead a potential CSS injection issue
  // which has lead to a greater discussion about how we're going to
  // trust URLs moving forward. See #2115901

  var isEmpty = value == null || typeof value === 'boolean' || value === '';
  if (isEmpty) {
    return '';
  }

  var isNonNumeric = isNaN(value);
  if (isNonNumeric || value === 0 ||
      isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
    return '' + value; // cast to string
  }

  if (typeof value === 'string') {
    value = value.trim();
  }
  return value + 'px';
}

module.exports = dangerousStyleValue;

},{"./CSSProperty":5}],104:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule emptyFunction
 */

var copyProperties = require("./copyProperties");

function makeEmptyFunction(arg) {
  return function() {
    return arg;
  };
}

/**
 * This function accepts and discards inputs; it has no side effects. This is
 * primarily useful idiomatically for overridable function endpoints which
 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
 */
function emptyFunction() {}

copyProperties(emptyFunction, {
  thatReturns: makeEmptyFunction,
  thatReturnsFalse: makeEmptyFunction(false),
  thatReturnsTrue: makeEmptyFunction(true),
  thatReturnsNull: makeEmptyFunction(null),
  thatReturnsThis: function() { return this; },
  thatReturnsArgument: function(arg) { return arg; }
});

module.exports = emptyFunction;

},{"./copyProperties":99}],105:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule emptyObject
 */

"use strict";

var emptyObject = {};

if ("production" !== process.env.NODE_ENV) {
  Object.freeze(emptyObject);
}

module.exports = emptyObject;

}).call(this,require('_process'))
},{"_process":147}],106:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule escapeTextForBrowser
 * @typechecks static-only
 */

"use strict";

var ESCAPE_LOOKUP = {
  "&": "&amp;",
  ">": "&gt;",
  "<": "&lt;",
  "\"": "&quot;",
  "'": "&#x27;"
};

var ESCAPE_REGEX = /[&><"']/g;

function escaper(match) {
  return ESCAPE_LOOKUP[match];
}

/**
 * Escapes text to prevent scripting attacks.
 *
 * @param {*} text Text value to escape.
 * @return {string} An escaped string.
 */
function escapeTextForBrowser(text) {
  return ('' + text).replace(ESCAPE_REGEX, escaper);
}

module.exports = escapeTextForBrowser;

},{}],107:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule flattenChildren
 */

"use strict";

var traverseAllChildren = require("./traverseAllChildren");
var warning = require("./warning");

/**
 * @param {function} traverseContext Context passed through traversal.
 * @param {?ReactComponent} child React child component.
 * @param {!string} name String name of key path to child.
 */
function flattenSingleChildIntoContext(traverseContext, child, name) {
  // We found a component instance.
  var result = traverseContext;
  var keyUnique = !result.hasOwnProperty(name);
  ("production" !== process.env.NODE_ENV ? warning(
    keyUnique,
    'flattenChildren(...): Encountered two children with the same key, ' +
    '`%s`. Child keys must be unique; when two children share a key, only ' +
    'the first child will be used.',
    name
  ) : null);
  if (keyUnique && child != null) {
    result[name] = child;
  }
}

/**
 * Flattens children that are typically specified as `props.children`. Any null
 * children will not be included in the resulting object.
 * @return {!object} flattened children keyed by name.
 */
function flattenChildren(children) {
  if (children == null) {
    return children;
  }
  var result = {};
  traverseAllChildren(children, flattenSingleChildIntoContext, result);
  return result;
}

module.exports = flattenChildren;

}).call(this,require('_process'))
},{"./traverseAllChildren":144,"./warning":145,"_process":147}],108:[function(require,module,exports){
/**
 * Copyright 2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule focusNode
 */

"use strict";

/**
 * IE8 throws if an input/textarea is disabled and we try to focus it.
 * Focus only when necessary.
 *
 * @param {DOMElement} node input/textarea to focus
 */
function focusNode(node) {
  if (!node.disabled) {
    node.focus();
  }
}

module.exports = focusNode;

},{}],109:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule forEachAccumulated
 */

"use strict";

/**
 * @param {array} an "accumulation" of items which is either an Array or
 * a single item. Useful when paired with the `accumulate` module. This is a
 * simple utility that allows us to reason about a collection of items, but
 * handling the case when there is exactly one item (and we do not need to
 * allocate an array).
 */
var forEachAccumulated = function(arr, cb, scope) {
  if (Array.isArray(arr)) {
    arr.forEach(cb, scope);
  } else if (arr) {
    cb.call(scope, arr);
  }
};

module.exports = forEachAccumulated;

},{}],110:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule getActiveElement
 * @typechecks
 */

/**
 * Same as document.activeElement but wraps in a try-catch block. In IE it is
 * not safe to call document.activeElement if there is nothing focused.
 *
 * The activeElement will be null only if the document body is not yet defined.
 */
function getActiveElement() /*?DOMElement*/ {
  try {
    return document.activeElement || document.body;
  } catch (e) {
    return document.body;
  }
}

module.exports = getActiveElement;

},{}],111:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule getEventKey
 * @typechecks static-only
 */

"use strict";

var invariant = require("./invariant");

/**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var normalizeKey = {
  'Esc': 'Escape',
  'Spacebar': ' ',
  'Left': 'ArrowLeft',
  'Up': 'ArrowUp',
  'Right': 'ArrowRight',
  'Down': 'ArrowDown',
  'Del': 'Delete',
  'Win': 'OS',
  'Menu': 'ContextMenu',
  'Apps': 'ContextMenu',
  'Scroll': 'ScrollLock',
  'MozPrintableKey': 'Unidentified'
};

/**
 * Translation from legacy `which`/`keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var translateToKey = {
  8: 'Backspace',
  9: 'Tab',
  12: 'Clear',
  13: 'Enter',
  16: 'Shift',
  17: 'Control',
  18: 'Alt',
  19: 'Pause',
  20: 'CapsLock',
  27: 'Escape',
  32: ' ',
  33: 'PageUp',
  34: 'PageDown',
  35: 'End',
  36: 'Home',
  37: 'ArrowLeft',
  38: 'ArrowUp',
  39: 'ArrowRight',
  40: 'ArrowDown',
  45: 'Insert',
  46: 'Delete',
  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
  144: 'NumLock',
  145: 'ScrollLock',
  224: 'Meta'
};

/**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */
function getEventKey(nativeEvent) {
  if (nativeEvent.key) {
    // Normalize inconsistent values reported by browsers due to
    // implementations of a working draft specification.

    // FireFox implements `key` but returns `MozPrintableKey` for all
    // printable characters (normalized to `Unidentified`), ignore it.
    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
    if (key !== 'Unidentified') {
      return key;
    }
  }

  // Browser does not implement `key`, polyfill as much of it as we can.
  if (nativeEvent.type === 'keypress') {
    // Create the character from the `charCode` ourselves and use as an almost
    // perfect replacement.
    var charCode = 'charCode' in nativeEvent ?
      nativeEvent.charCode :
      nativeEvent.keyCode;

    // The enter-key is technically both printable and non-printable and can
    // thus be captured by `keypress`, no other non-printable key should.
    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
  }
  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
    // While user keyboard layout determines the actual meaning of each
    // `keyCode` value, almost all function keys have a universal value.
    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
  }

  ("production" !== process.env.NODE_ENV ? invariant(false, "Unexpected keyboard event type: %s", nativeEvent.type) : invariant(false));
}

module.exports = getEventKey;

}).call(this,require('_process'))
},{"./invariant":122,"_process":147}],112:[function(require,module,exports){
/**
 * Copyright 2013 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule getEventModifierState
 * @typechecks static-only
 */

"use strict";

/**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */

var modifierKeyToProp = {
  'Alt': 'altKey',
  'Control': 'ctrlKey',
  'Meta': 'metaKey',
  'Shift': 'shiftKey'
};

// IE8 does not implement getModifierState so we simply map it to the only
// modifier keys exposed by the event itself, does not support Lock-keys.
// Currently, all major browsers except Chrome seems to support Lock-keys.
function modifierStateGetter(keyArg) {
  /*jshint validthis:true */
  var syntheticEvent = this;
  var nativeEvent = syntheticEvent.nativeEvent;
  if (nativeEvent.getModifierState) {
    return nativeEvent.getModifierState(keyArg);
  }
  var keyProp = modifierKeyToProp[keyArg];
  return keyProp ? !!nativeEvent[keyProp] : false;
}

function getEventModifierState(nativeEvent) {
  return modifierStateGetter;
}

module.exports = getEventModifierState;

},{}],113:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule getEventTarget
 * @typechecks static-only
 */

"use strict";

/**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */
function getEventTarget(nativeEvent) {
  var target = nativeEvent.target || nativeEvent.srcElement || window;
  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
  // @see http://www.quirksmode.org/js/events_properties.html
  return target.nodeType === 3 ? target.parentNode : target;
}

module.exports = getEventTarget;

},{}],114:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule getMarkupWrap
 */

var ExecutionEnvironment = require("./ExecutionEnvironment");

var invariant = require("./invariant");

/**
 * Dummy container used to detect which wraps are necessary.
 */
var dummyNode =
  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Some browsers cannot use `innerHTML` to render certain elements standalone,
 * so we wrap them, render the wrapped nodes, then extract the desired node.
 *
 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
 */
var shouldWrap = {
  // Force wrapping for SVG elements because if they get created inside a <div>,
  // they will be initialized in the wrong namespace (and will not display).
  'circle': true,
  'defs': true,
  'ellipse': true,
  'g': true,
  'line': true,
  'linearGradient': true,
  'path': true,
  'polygon': true,
  'polyline': true,
  'radialGradient': true,
  'rect': true,
  'stop': true,
  'text': true
};

var selectWrap = [1, '<select multiple="true">', '</select>'];
var tableWrap = [1, '<table>', '</table>'];
var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

var svgWrap = [1, '<svg>', '</svg>'];

var markupWrap = {
  '*': [1, '?<div>', '</div>'],

  'area': [1, '<map>', '</map>'],
  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
  'legend': [1, '<fieldset>', '</fieldset>'],
  'param': [1, '<object>', '</object>'],
  'tr': [2, '<table><tbody>', '</tbody></table>'],

  'optgroup': selectWrap,
  'option': selectWrap,

  'caption': tableWrap,
  'colgroup': tableWrap,
  'tbody': tableWrap,
  'tfoot': tableWrap,
  'thead': tableWrap,

  'td': trWrap,
  'th': trWrap,

  'circle': svgWrap,
  'defs': svgWrap,
  'ellipse': svgWrap,
  'g': svgWrap,
  'line': svgWrap,
  'linearGradient': svgWrap,
  'path': svgWrap,
  'polygon': svgWrap,
  'polyline': svgWrap,
  'radialGradient': svgWrap,
  'rect': svgWrap,
  'stop': svgWrap,
  'text': svgWrap
};

/**
 * Gets the markup wrap configuration for the supplied `nodeName`.
 *
 * NOTE: This lazily detects which wraps are necessary for the current browser.
 *
 * @param {string} nodeName Lowercase `nodeName`.
 * @return {?array} Markup wrap configuration, if applicable.
 */
function getMarkupWrap(nodeName) {
  ("production" !== process.env.NODE_ENV ? invariant(!!dummyNode, 'Markup wrapping node not initialized') : invariant(!!dummyNode));
  if (!markupWrap.hasOwnProperty(nodeName)) {
    nodeName = '*';
  }
  if (!shouldWrap.hasOwnProperty(nodeName)) {
    if (nodeName === '*') {
      dummyNode.innerHTML = '<link />';
    } else {
      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
    }
    shouldWrap[nodeName] = !dummyNode.firstChild;
  }
  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
}


module.exports = getMarkupWrap;

}).call(this,require('_process'))
},{"./ExecutionEnvironment":23,"./invariant":122,"_process":147}],115:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule getNodeForCharacterOffset
 */

"use strict";

/**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */
function getLeafNode(node) {
  while (node && node.firstChild) {
    node = node.firstChild;
  }
  return node;
}

/**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */
function getSiblingNode(node) {
  while (node) {
    if (node.nextSibling) {
      return node.nextSibling;
    }
    node = node.parentNode;
  }
}

/**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */
function getNodeForCharacterOffset(root, offset) {
  var node = getLeafNode(root);
  var nodeStart = 0;
  var nodeEnd = 0;

  while (node) {
    if (node.nodeType == 3) {
      nodeEnd = nodeStart + node.textContent.length;

      if (nodeStart <= offset && nodeEnd >= offset) {
        return {
          node: node,
          offset: offset - nodeStart
        };
      }

      nodeStart = nodeEnd;
    }

    node = getLeafNode(getSiblingNode(node));
  }
}

module.exports = getNodeForCharacterOffset;

},{}],116:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule getReactRootElementInContainer
 */

"use strict";

var DOC_NODE_TYPE = 9;

/**
 * @param {DOMElement|DOMDocument} container DOM element that may contain
 *                                           a React component
 * @return {?*} DOM element that may have the reactRoot ID, or null.
 */
function getReactRootElementInContainer(container) {
  if (!container) {
    return null;
  }

  if (container.nodeType === DOC_NODE_TYPE) {
    return container.documentElement;
  } else {
    return container.firstChild;
  }
}

module.exports = getReactRootElementInContainer;

},{}],117:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule getTextContentAccessor
 */

"use strict";

var ExecutionEnvironment = require("./ExecutionEnvironment");

var contentKey = null;

/**
 * Gets the key used to access text content on a DOM node.
 *
 * @return {?string} Key used to access text content.
 * @internal
 */
function getTextContentAccessor() {
  if (!contentKey && ExecutionEnvironment.canUseDOM) {
    // Prefer textContent to innerText because many browsers support both but
    // SVG <text> elements don't support innerText even when <div> does.
    contentKey = 'textContent' in document.documentElement ?
      'textContent' :
      'innerText';
  }
  return contentKey;
}

module.exports = getTextContentAccessor;

},{"./ExecutionEnvironment":23}],118:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule getUnboundedScrollPosition
 * @typechecks
 */

"use strict";

/**
 * Gets the scroll position of the supplied element or window.
 *
 * The return values are unbounded, unlike `getScrollPosition`. This means they
 * may be negative or exceed the element boundaries (which is possible using
 * inertial scrolling).
 *
 * @param {DOMWindow|DOMElement} scrollable
 * @return {object} Map with `x` and `y` keys.
 */
function getUnboundedScrollPosition(scrollable) {
  if (scrollable === window) {
    return {
      x: window.pageXOffset || document.documentElement.scrollLeft,
      y: window.pageYOffset || document.documentElement.scrollTop
    };
  }
  return {
    x: scrollable.scrollLeft,
    y: scrollable.scrollTop
  };
}

module.exports = getUnboundedScrollPosition;

},{}],119:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule hyphenate
 * @typechecks
 */

var _uppercasePattern = /([A-Z])/g;

/**
 * Hyphenates a camelcased string, for example:
 *
 *   > hyphenate('backgroundColor')
 *   < "background-color"
 *
 * For CSS style names, use `hyphenateStyleName` instead which works properly
 * with all vendor prefixes, including `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenate(string) {
  return string.replace(_uppercasePattern, '-$1').toLowerCase();
}

module.exports = hyphenate;

},{}],120:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule hyphenateStyleName
 * @typechecks
 */

"use strict";

var hyphenate = require("./hyphenate");

var msPattern = /^ms-/;

/**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenate('backgroundColor')
 *   < "background-color"
 *   > hyphenate('MozTransition')
 *   < "-moz-transition"
 *   > hyphenate('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenateStyleName(string) {
  return hyphenate(string).replace(msPattern, '-ms-');
}

module.exports = hyphenateStyleName;

},{"./hyphenate":119}],121:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule instantiateReactComponent
 * @typechecks static-only
 */

"use strict";

var invariant = require("./invariant");

/**
 * Validate a `componentDescriptor`. This should be exposed publicly in a follow
 * up diff.
 *
 * @param {object} descriptor
 * @return {boolean} Returns true if this is a valid descriptor of a Component.
 */
function isValidComponentDescriptor(descriptor) {
  return (
    descriptor &&
    typeof descriptor.type === 'function' &&
    typeof descriptor.type.prototype.mountComponent === 'function' &&
    typeof descriptor.type.prototype.receiveComponent === 'function'
  );
}

/**
 * Given a `componentDescriptor` create an instance that will actually be
 * mounted. Currently it just extracts an existing clone from composite
 * components but this is an implementation detail which will change.
 *
 * @param {object} descriptor
 * @return {object} A new instance of componentDescriptor's constructor.
 * @protected
 */
function instantiateReactComponent(descriptor) {

  // TODO: Make warning
  // if (__DEV__) {
    ("production" !== process.env.NODE_ENV ? invariant(
      isValidComponentDescriptor(descriptor),
      'Only React Components are valid for mounting.'
    ) : invariant(isValidComponentDescriptor(descriptor)));
  // }

  return new descriptor.type(descriptor);
}

module.exports = instantiateReactComponent;

}).call(this,require('_process'))
},{"./invariant":122,"_process":147}],122:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule invariant
 */

"use strict";

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var invariant = function(condition, format, a, b, c, d, e, f) {
  if ("production" !== process.env.NODE_ENV) {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  }

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error(
        'Minified exception occurred; use the non-minified dev environment ' +
        'for the full error message and additional helpful warnings.'
      );
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(
        'Invariant Violation: ' +
        format.replace(/%s/g, function() { return args[argIndex++]; })
      );
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
};

module.exports = invariant;

}).call(this,require('_process'))
},{"_process":147}],123:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule isEventSupported
 */

"use strict";

var ExecutionEnvironment = require("./ExecutionEnvironment");

var useHasFeature;
if (ExecutionEnvironment.canUseDOM) {
  useHasFeature =
    document.implementation &&
    document.implementation.hasFeature &&
    // always returns true in newer browsers as per the standard.
    // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
    document.implementation.hasFeature('', '') !== true;
}

/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @param {?boolean} capture Check if the capture phase is supported.
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
function isEventSupported(eventNameSuffix, capture) {
  if (!ExecutionEnvironment.canUseDOM ||
      capture && !('addEventListener' in document)) {
    return false;
  }

  var eventName = 'on' + eventNameSuffix;
  var isSupported = eventName in document;

  if (!isSupported) {
    var element = document.createElement('div');
    element.setAttribute(eventName, 'return;');
    isSupported = typeof element[eventName] === 'function';
  }

  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
    // This is the only way to test support for the `wheel` event in IE9+.
    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
  }

  return isSupported;
}

module.exports = isEventSupported;

},{"./ExecutionEnvironment":23}],124:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule isNode
 * @typechecks
 */

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM node.
 */
function isNode(object) {
  return !!(object && (
    typeof Node === 'function' ? object instanceof Node :
      typeof object === 'object' &&
      typeof object.nodeType === 'number' &&
      typeof object.nodeName === 'string'
  ));
}

module.exports = isNode;

},{}],125:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule isTextInputElement
 */

"use strict";

/**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */
var supportedInputTypes = {
  'color': true,
  'date': true,
  'datetime': true,
  'datetime-local': true,
  'email': true,
  'month': true,
  'number': true,
  'password': true,
  'range': true,
  'search': true,
  'tel': true,
  'text': true,
  'time': true,
  'url': true,
  'week': true
};

function isTextInputElement(elem) {
  return elem && (
    (elem.nodeName === 'INPUT' && supportedInputTypes[elem.type]) ||
    elem.nodeName === 'TEXTAREA'
  );
}

module.exports = isTextInputElement;

},{}],126:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule isTextNode
 * @typechecks
 */

var isNode = require("./isNode");

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM text node.
 */
function isTextNode(object) {
  return isNode(object) && object.nodeType == 3;
}

module.exports = isTextNode;

},{"./isNode":124}],127:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule joinClasses
 * @typechecks static-only
 */

"use strict";

/**
 * Combines multiple className strings into one.
 * http://jsperf.com/joinclasses-args-vs-array
 *
 * @param {...?string} classes
 * @return {string}
 */
function joinClasses(className/*, ... */) {
  if (!className) {
    className = '';
  }
  var nextClass;
  var argLength = arguments.length;
  if (argLength > 1) {
    for (var ii = 1; ii < argLength; ii++) {
      nextClass = arguments[ii];
      nextClass && (className += ' ' + nextClass);
    }
  }
  return className;
}

module.exports = joinClasses;

},{}],128:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule keyMirror
 * @typechecks static-only
 */

"use strict";

var invariant = require("./invariant");

/**
 * Constructs an enumeration with keys equal to their value.
 *
 * For example:
 *
 *   var COLORS = keyMirror({blue: null, red: null});
 *   var myColor = COLORS.blue;
 *   var isColorValid = !!COLORS[myColor];
 *
 * The last line could not be performed if the values of the generated enum were
 * not equal to their keys.
 *
 *   Input:  {key1: val1, key2: val2}
 *   Output: {key1: key1, key2: key2}
 *
 * @param {object} obj
 * @return {object}
 */
var keyMirror = function(obj) {
  var ret = {};
  var key;
  ("production" !== process.env.NODE_ENV ? invariant(
    obj instanceof Object && !Array.isArray(obj),
    'keyMirror(...): Argument must be an object.'
  ) : invariant(obj instanceof Object && !Array.isArray(obj)));
  for (key in obj) {
    if (!obj.hasOwnProperty(key)) {
      continue;
    }
    ret[key] = key;
  }
  return ret;
};

module.exports = keyMirror;

}).call(this,require('_process'))
},{"./invariant":122,"_process":147}],129:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule keyOf
 */

/**
 * Allows extraction of a minified key. Let's the build system minify keys
 * without loosing the ability to dynamically use key strings as values
 * themselves. Pass in an object with a single key/val pair and it will return
 * you the string key of that single record. Suppose you want to grab the
 * value for a key 'className' inside of an object. Key/val minification may
 * have aliased that key to be 'xa12'. keyOf({className: null}) will return
 * 'xa12' in that case. Resolve keys you want to use once at startup time, then
 * reuse those resolutions.
 */
var keyOf = function(oneKeyObj) {
  var key;
  for (key in oneKeyObj) {
    if (!oneKeyObj.hasOwnProperty(key)) {
      continue;
    }
    return key;
  }
  return null;
};


module.exports = keyOf;

},{}],130:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule mapObject
 */

"use strict";

/**
 * For each key/value pair, invokes callback func and constructs a resulting
 * object which contains, for every key in obj, values that are the result of
 * of invoking the function:
 *
 *   func(value, key, iteration)
 *
 * Grepable names:
 *
 *   function objectMap()
 *   function objMap()
 *
 * @param {?object} obj Object to map keys over
 * @param {function} func Invoked for each key/val pair.
 * @param {?*} context
 * @return {?object} Result of mapping or null if obj is falsey
 */
function mapObject(obj, func, context) {
  if (!obj) {
    return null;
  }
  var i = 0;
  var ret = {};
  for (var key in obj) {
    if (obj.hasOwnProperty(key)) {
      ret[key] = func.call(context, obj[key], key, i++);
    }
  }
  return ret;
}

module.exports = mapObject;

},{}],131:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule memoizeStringOnly
 * @typechecks static-only
 */

"use strict";

/**
 * Memoizes the return value of a function that accepts one string argument.
 *
 * @param {function} callback
 * @return {function}
 */
function memoizeStringOnly(callback) {
  var cache = {};
  return function(string) {
    if (cache.hasOwnProperty(string)) {
      return cache[string];
    } else {
      return cache[string] = callback.call(this, string);
    }
  };
}

module.exports = memoizeStringOnly;

},{}],132:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule merge
 */

"use strict";

var mergeInto = require("./mergeInto");

/**
 * Shallow merges two structures into a return value, without mutating either.
 *
 * @param {?object} one Optional object with properties to merge from.
 * @param {?object} two Optional object with properties to merge from.
 * @return {object} The shallow extension of one by two.
 */
var merge = function(one, two) {
  var result = {};
  mergeInto(result, one);
  mergeInto(result, two);
  return result;
};

module.exports = merge;

},{"./mergeInto":134}],133:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule mergeHelpers
 *
 * requiresPolyfills: Array.isArray
 */

"use strict";

var invariant = require("./invariant");
var keyMirror = require("./keyMirror");

/**
 * Maximum number of levels to traverse. Will catch circular structures.
 * @const
 */
var MAX_MERGE_DEPTH = 36;

/**
 * We won't worry about edge cases like new String('x') or new Boolean(true).
 * Functions are considered terminals, and arrays are not.
 * @param {*} o The item/object/value to test.
 * @return {boolean} true iff the argument is a terminal.
 */
var isTerminal = function(o) {
  return typeof o !== 'object' || o === null;
};

var mergeHelpers = {

  MAX_MERGE_DEPTH: MAX_MERGE_DEPTH,

  isTerminal: isTerminal,

  /**
   * Converts null/undefined values into empty object.
   *
   * @param {?Object=} arg Argument to be normalized (nullable optional)
   * @return {!Object}
   */
  normalizeMergeArg: function(arg) {
    return arg === undefined || arg === null ? {} : arg;
  },

  /**
   * If merging Arrays, a merge strategy *must* be supplied. If not, it is
   * likely the caller's fault. If this function is ever called with anything
   * but `one` and `two` being `Array`s, it is the fault of the merge utilities.
   *
   * @param {*} one Array to merge into.
   * @param {*} two Array to merge from.
   */
  checkMergeArrayArgs: function(one, two) {
    ("production" !== process.env.NODE_ENV ? invariant(
      Array.isArray(one) && Array.isArray(two),
      'Tried to merge arrays, instead got %s and %s.',
      one,
      two
    ) : invariant(Array.isArray(one) && Array.isArray(two)));
  },

  /**
   * @param {*} one Object to merge into.
   * @param {*} two Object to merge from.
   */
  checkMergeObjectArgs: function(one, two) {
    mergeHelpers.checkMergeObjectArg(one);
    mergeHelpers.checkMergeObjectArg(two);
  },

  /**
   * @param {*} arg
   */
  checkMergeObjectArg: function(arg) {
    ("production" !== process.env.NODE_ENV ? invariant(
      !isTerminal(arg) && !Array.isArray(arg),
      'Tried to merge an object, instead got %s.',
      arg
    ) : invariant(!isTerminal(arg) && !Array.isArray(arg)));
  },

  /**
   * @param {*} arg
   */
  checkMergeIntoObjectArg: function(arg) {
    ("production" !== process.env.NODE_ENV ? invariant(
      (!isTerminal(arg) || typeof arg === 'function') && !Array.isArray(arg),
      'Tried to merge into an object, instead got %s.',
      arg
    ) : invariant((!isTerminal(arg) || typeof arg === 'function') && !Array.isArray(arg)));
  },

  /**
   * Checks that a merge was not given a circular object or an object that had
   * too great of depth.
   *
   * @param {number} Level of recursion to validate against maximum.
   */
  checkMergeLevel: function(level) {
    ("production" !== process.env.NODE_ENV ? invariant(
      level < MAX_MERGE_DEPTH,
      'Maximum deep merge depth exceeded. You may be attempting to merge ' +
      'circular structures in an unsupported way.'
    ) : invariant(level < MAX_MERGE_DEPTH));
  },

  /**
   * Checks that the supplied merge strategy is valid.
   *
   * @param {string} Array merge strategy.
   */
  checkArrayStrategy: function(strategy) {
    ("production" !== process.env.NODE_ENV ? invariant(
      strategy === undefined || strategy in mergeHelpers.ArrayStrategies,
      'You must provide an array strategy to deep merge functions to ' +
      'instruct the deep merge how to resolve merging two arrays.'
    ) : invariant(strategy === undefined || strategy in mergeHelpers.ArrayStrategies));
  },

  /**
   * Set of possible behaviors of merge algorithms when encountering two Arrays
   * that must be merged together.
   * - `clobber`: The left `Array` is ignored.
   * - `indexByIndex`: The result is achieved by recursively deep merging at
   *   each index. (not yet supported.)
   */
  ArrayStrategies: keyMirror({
    Clobber: true,
    IndexByIndex: true
  })

};

module.exports = mergeHelpers;

}).call(this,require('_process'))
},{"./invariant":122,"./keyMirror":128,"_process":147}],134:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule mergeInto
 * @typechecks static-only
 */

"use strict";

var mergeHelpers = require("./mergeHelpers");

var checkMergeObjectArg = mergeHelpers.checkMergeObjectArg;
var checkMergeIntoObjectArg = mergeHelpers.checkMergeIntoObjectArg;

/**
 * Shallow merges two structures by mutating the first parameter.
 *
 * @param {object|function} one Object to be merged into.
 * @param {?object} two Optional object with properties to merge from.
 */
function mergeInto(one, two) {
  checkMergeIntoObjectArg(one);
  if (two != null) {
    checkMergeObjectArg(two);
    for (var key in two) {
      if (!two.hasOwnProperty(key)) {
        continue;
      }
      one[key] = two[key];
    }
  }
}

module.exports = mergeInto;

},{"./mergeHelpers":133}],135:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule mixInto
 */

"use strict";

/**
 * Simply copies properties to the prototype.
 */
var mixInto = function(constructor, methodBag) {
  var methodName;
  for (methodName in methodBag) {
    if (!methodBag.hasOwnProperty(methodName)) {
      continue;
    }
    constructor.prototype[methodName] = methodBag[methodName];
  }
};

module.exports = mixInto;

},{}],136:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule monitorCodeUse
 */

"use strict";

var invariant = require("./invariant");

/**
 * Provides open-source compatible instrumentation for monitoring certain API
 * uses before we're ready to issue a warning or refactor. It accepts an event
 * name which may only contain the characters [a-z0-9_] and an optional data
 * object with further information.
 */

function monitorCodeUse(eventName, data) {
  ("production" !== process.env.NODE_ENV ? invariant(
    eventName && !/[^a-z0-9_]/.test(eventName),
    'You must provide an eventName using only the characters [a-z0-9_]'
  ) : invariant(eventName && !/[^a-z0-9_]/.test(eventName)));
}

module.exports = monitorCodeUse;

}).call(this,require('_process'))
},{"./invariant":122,"_process":147}],137:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule onlyChild
 */
"use strict";

var ReactDescriptor = require("./ReactDescriptor");

var invariant = require("./invariant");

/**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection. The current implementation of this
 * function assumes that a single child gets passed without a wrapper, but the
 * purpose of this helper function is to abstract away the particular structure
 * of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactComponent} The first and only `ReactComponent` contained in the
 * structure.
 */
function onlyChild(children) {
  ("production" !== process.env.NODE_ENV ? invariant(
    ReactDescriptor.isValidDescriptor(children),
    'onlyChild must be passed a children with exactly one child.'
  ) : invariant(ReactDescriptor.isValidDescriptor(children)));
  return children;
}

module.exports = onlyChild;

}).call(this,require('_process'))
},{"./ReactDescriptor":53,"./invariant":122,"_process":147}],138:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule performance
 * @typechecks
 */

"use strict";

var ExecutionEnvironment = require("./ExecutionEnvironment");

var performance;

if (ExecutionEnvironment.canUseDOM) {
  performance =
    window.performance ||
    window.msPerformance ||
    window.webkitPerformance;
}

module.exports = performance || {};

},{"./ExecutionEnvironment":23}],139:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule performanceNow
 * @typechecks
 */

var performance = require("./performance");

/**
 * Detect if we can use `window.performance.now()` and gracefully fallback to
 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
 * because of Facebook's testing infrastructure.
 */
if (!performance || !performance.now) {
  performance = Date;
}

var performanceNow = performance.now.bind(performance);

module.exports = performanceNow;

},{"./performance":138}],140:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule setInnerHTML
 */

"use strict";

var ExecutionEnvironment = require("./ExecutionEnvironment");

/**
 * Set the innerHTML property of a node, ensuring that whitespace is preserved
 * even in IE8.
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */
var setInnerHTML = function(node, html) {
  node.innerHTML = html;
};

if (ExecutionEnvironment.canUseDOM) {
  // IE8: When updating a just created node with innerHTML only leading
  // whitespace is removed. When updating an existing node with innerHTML
  // whitespace in root TextNodes is also collapsed.
  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

  // Feature detection; only IE8 is known to behave improperly like this.
  var testElement = document.createElement('div');
  testElement.innerHTML = ' ';
  if (testElement.innerHTML === '') {
    setInnerHTML = function(node, html) {
      // Magic theory: IE8 supposedly differentiates between added and updated
      // nodes when processing innerHTML, innerHTML on updated nodes suffers
      // from worse whitespace behavior. Re-adding a node like this triggers
      // the initial and more favorable whitespace behavior.
      // TODO: What to do on a detached node?
      if (node.parentNode) {
        node.parentNode.replaceChild(node, node);
      }

      // We also implement a workaround for non-visible tags disappearing into
      // thin air on IE8, this only happens if there is no visible text
      // in-front of the non-visible tags. Piggyback on the whitespace fix
      // and simply check if any non-visible tags appear in the source.
      if (html.match(/^[ \r\n\t\f]/) ||
          html[0] === '<' && (
            html.indexOf('<noscript') !== -1 ||
            html.indexOf('<script') !== -1 ||
            html.indexOf('<style') !== -1 ||
            html.indexOf('<meta') !== -1 ||
            html.indexOf('<link') !== -1)) {
        // Recover leading whitespace by temporarily prepending any character.
        // \uFEFF has the potential advantage of being zero-width/invisible.
        node.innerHTML = '\uFEFF' + html;

        // deleteData leaves an empty `TextNode` which offsets the index of all
        // children. Definitely want to avoid this.
        var textNode = node.firstChild;
        if (textNode.data.length === 1) {
          node.removeChild(textNode);
        } else {
          textNode.deleteData(0, 1);
        }
      } else {
        node.innerHTML = html;
      }
    };
  }
}

module.exports = setInnerHTML;

},{"./ExecutionEnvironment":23}],141:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule shallowEqual
 */

"use strict";

/**
 * Performs equality by iterating through keys on an object and returning
 * false when any key has values which are not strictly equal between
 * objA and objB. Returns true when the values of all keys are strictly equal.
 *
 * @return {boolean}
 */
function shallowEqual(objA, objB) {
  if (objA === objB) {
    return true;
  }
  var key;
  // Test for A's keys different from B.
  for (key in objA) {
    if (objA.hasOwnProperty(key) &&
        (!objB.hasOwnProperty(key) || objA[key] !== objB[key])) {
      return false;
    }
  }
  // Test for B'a keys missing from A.
  for (key in objB) {
    if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {
      return false;
    }
  }
  return true;
}

module.exports = shallowEqual;

},{}],142:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule shouldUpdateReactComponent
 * @typechecks static-only
 */

"use strict";

/**
 * Given a `prevDescriptor` and `nextDescriptor`, determines if the existing
 * instance should be updated as opposed to being destroyed or replaced by a new
 * instance. Both arguments are descriptors. This ensures that this logic can
 * operate on stateless trees without any backing instance.
 *
 * @param {?object} prevDescriptor
 * @param {?object} nextDescriptor
 * @return {boolean} True if the existing instance should be updated.
 * @protected
 */
function shouldUpdateReactComponent(prevDescriptor, nextDescriptor) {
  if (prevDescriptor && nextDescriptor &&
      prevDescriptor.type === nextDescriptor.type && (
        (prevDescriptor.props && prevDescriptor.props.key) ===
        (nextDescriptor.props && nextDescriptor.props.key)
      ) && prevDescriptor._owner === nextDescriptor._owner) {
    return true;
  }
  return false;
}

module.exports = shouldUpdateReactComponent;

},{}],143:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule toArray
 * @typechecks
 */

var invariant = require("./invariant");

/**
 * Convert array-like objects to arrays.
 *
 * This API assumes the caller knows the contents of the data type. For less
 * well defined inputs use createArrayFrom.
 *
 * @param {object|function|filelist} obj
 * @return {array}
 */
function toArray(obj) {
  var length = obj.length;

  // Some browse builtin objects can report typeof 'function' (e.g. NodeList in
  // old versions of Safari).
  ("production" !== process.env.NODE_ENV ? invariant(
    !Array.isArray(obj) &&
    (typeof obj === 'object' || typeof obj === 'function'),
    'toArray: Array-like object expected'
  ) : invariant(!Array.isArray(obj) &&
  (typeof obj === 'object' || typeof obj === 'function')));

  ("production" !== process.env.NODE_ENV ? invariant(
    typeof length === 'number',
    'toArray: Object needs a length property'
  ) : invariant(typeof length === 'number'));

  ("production" !== process.env.NODE_ENV ? invariant(
    length === 0 ||
    (length - 1) in obj,
    'toArray: Object should have keys for indices'
  ) : invariant(length === 0 ||
  (length - 1) in obj));

  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
  // without method will throw during the slice call and skip straight to the
  // fallback.
  if (obj.hasOwnProperty) {
    try {
      return Array.prototype.slice.call(obj);
    } catch (e) {
      // IE < 9 does not support Array#slice on collections objects
    }
  }

  // Fall back to copying key by key. This assumes all keys have a value,
  // so will not preserve sparsely populated inputs.
  var ret = Array(length);
  for (var ii = 0; ii < length; ii++) {
    ret[ii] = obj[ii];
  }
  return ret;
}

module.exports = toArray;

}).call(this,require('_process'))
},{"./invariant":122,"_process":147}],144:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule traverseAllChildren
 */

"use strict";

var ReactInstanceHandles = require("./ReactInstanceHandles");
var ReactTextComponent = require("./ReactTextComponent");

var invariant = require("./invariant");

var SEPARATOR = ReactInstanceHandles.SEPARATOR;
var SUBSEPARATOR = ':';

/**
 * TODO: Test that:
 * 1. `mapChildren` transforms strings and numbers into `ReactTextComponent`.
 * 2. it('should fail when supplied duplicate key', function() {
 * 3. That a single child and an array with one item have the same key pattern.
 * });
 */

var userProvidedKeyEscaperLookup = {
  '=': '=0',
  '.': '=1',
  ':': '=2'
};

var userProvidedKeyEscapeRegex = /[=.:]/g;

function userProvidedKeyEscaper(match) {
  return userProvidedKeyEscaperLookup[match];
}

/**
 * Generate a key string that identifies a component within a set.
 *
 * @param {*} component A component that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */
function getComponentKey(component, index) {
  if (component && component.props && component.props.key != null) {
    // Explicit key
    return wrapUserProvidedKey(component.props.key);
  }
  // Implicit key determined by the index in the set
  return index.toString(36);
}

/**
 * Escape a component key so that it is safe to use in a reactid.
 *
 * @param {*} key Component key to be escaped.
 * @return {string} An escaped string.
 */
function escapeUserProvidedKey(text) {
  return ('' + text).replace(
    userProvidedKeyEscapeRegex,
    userProvidedKeyEscaper
  );
}

/**
 * Wrap a `key` value explicitly provided by the user to distinguish it from
 * implicitly-generated keys generated by a component's index in its parent.
 *
 * @param {string} key Value of a user-provided `key` attribute
 * @return {string}
 */
function wrapUserProvidedKey(key) {
  return '$' + escapeUserProvidedKey(key);
}

/**
 * @param {?*} children Children tree container.
 * @param {!string} nameSoFar Name of the key path so far.
 * @param {!number} indexSoFar Number of children encountered until this point.
 * @param {!function} callback Callback to invoke with each child found.
 * @param {?*} traverseContext Used to pass information throughout the traversal
 * process.
 * @return {!number} The number of children in this subtree.
 */
var traverseAllChildrenImpl =
  function(children, nameSoFar, indexSoFar, callback, traverseContext) {
    var subtreeCount = 0;  // Count of children found in the current subtree.
    if (Array.isArray(children)) {
      for (var i = 0; i < children.length; i++) {
        var child = children[i];
        var nextName = (
          nameSoFar +
          (nameSoFar ? SUBSEPARATOR : SEPARATOR) +
          getComponentKey(child, i)
        );
        var nextIndex = indexSoFar + subtreeCount;
        subtreeCount += traverseAllChildrenImpl(
          child,
          nextName,
          nextIndex,
          callback,
          traverseContext
        );
      }
    } else {
      var type = typeof children;
      var isOnlyChild = nameSoFar === '';
      // If it's the only child, treat the name as if it was wrapped in an array
      // so that it's consistent if the number of children grows
      var storageName =
        isOnlyChild ? SEPARATOR + getComponentKey(children, 0) : nameSoFar;
      if (children == null || type === 'boolean') {
        // All of the above are perceived as null.
        callback(traverseContext, null, storageName, indexSoFar);
        subtreeCount = 1;
      } else if (children.type && children.type.prototype &&
                 children.type.prototype.mountComponentIntoNode) {
        callback(traverseContext, children, storageName, indexSoFar);
        subtreeCount = 1;
      } else {
        if (type === 'object') {
          ("production" !== process.env.NODE_ENV ? invariant(
            !children || children.nodeType !== 1,
            'traverseAllChildren(...): Encountered an invalid child; DOM ' +
            'elements are not valid children of React components.'
          ) : invariant(!children || children.nodeType !== 1));
          for (var key in children) {
            if (children.hasOwnProperty(key)) {
              subtreeCount += traverseAllChildrenImpl(
                children[key],
                (
                  nameSoFar + (nameSoFar ? SUBSEPARATOR : SEPARATOR) +
                  wrapUserProvidedKey(key) + SUBSEPARATOR +
                  getComponentKey(children[key], 0)
                ),
                indexSoFar + subtreeCount,
                callback,
                traverseContext
              );
            }
          }
        } else if (type === 'string') {
          var normalizedText = ReactTextComponent(children);
          callback(traverseContext, normalizedText, storageName, indexSoFar);
          subtreeCount += 1;
        } else if (type === 'number') {
          var normalizedNumber = ReactTextComponent('' + children);
          callback(traverseContext, normalizedNumber, storageName, indexSoFar);
          subtreeCount += 1;
        }
      }
    }
    return subtreeCount;
  };

/**
 * Traverses children that are typically specified as `props.children`, but
 * might also be specified through attributes:
 *
 * - `traverseAllChildren(this.props.children, ...)`
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
 *
 * The `traverseContext` is an optional argument that is passed through the
 * entire traversal. It can be used to store accumulations or anything else that
 * the callback might find relevant.
 *
 * @param {?*} children Children tree object.
 * @param {!function} callback To invoke upon traversing each child.
 * @param {?*} traverseContext Context for traversal.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildren(children, callback, traverseContext) {
  if (children == null) {
    return 0;
  }

  return traverseAllChildrenImpl(children, '', 0, callback, traverseContext);
}

module.exports = traverseAllChildren;

}).call(this,require('_process'))
},{"./ReactInstanceHandles":61,"./ReactTextComponent":77,"./invariant":122,"_process":147}],145:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule warning
 */

"use strict";

var emptyFunction = require("./emptyFunction");

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = emptyFunction;

if ("production" !== process.env.NODE_ENV) {
  warning = function(condition, format ) {var args=Array.prototype.slice.call(arguments,2);
    if (format === undefined) {
      throw new Error(
        '`warning(condition, format, ...args)` requires a warning ' +
        'message argument'
      );
    }

    if (!condition) {
      var argIndex = 0;
      console.warn('Warning: ' + format.replace(/%s/g, function()  {return args[argIndex++];}));
    }
  };
}

module.exports = warning;

}).call(this,require('_process'))
},{"./emptyFunction":104,"_process":147}],146:[function(require,module,exports){
module.exports = require('./lib/React');

},{"./lib/React":29}],147:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};

process.nextTick = (function () {
    var canSetImmediate = typeof window !== 'undefined'
    && window.setImmediate;
    var canPost = typeof window !== 'undefined'
    && window.postMessage && window.addEventListener
    ;

    if (canSetImmediate) {
        return function (f) { return window.setImmediate(f) };
    }

    if (canPost) {
        var queue = [];
        window.addEventListener('message', function (ev) {
            var source = ev.source;
            if ((source === window || source === null) && ev.data === 'process-tick') {
                ev.stopPropagation();
                if (queue.length > 0) {
                    var fn = queue.shift();
                    fn();
                }
            }
        }, true);

        return function nextTick(fn) {
            queue.push(fn);
            window.postMessage('process-tick', '*');
        };
    }

    return function nextTick(fn) {
        setTimeout(fn, 0);
    };
})();

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
}

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};

},{}]},{},[1]);
